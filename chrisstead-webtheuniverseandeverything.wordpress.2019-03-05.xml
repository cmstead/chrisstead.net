<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.5.16" created="2019-03-05 21:34" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Chris Stead - Web, the Universe and Everything</title>
	<link>http://www.chrisstead.net</link>
	<description>Web, the Universe and everything</description>
	<pubDate>Tue, 05 Mar 2019 21:34:07 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.chrisstead.net</wp:base_site_url>
	<wp:base_blog_url>http://www.chrisstead.net</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[chris]]></wp:author_login><wp:author_email><![CDATA[steadster@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Chris]]></wp:author_display_name><wp:author_first_name><![CDATA[Chris]]></wp:author_first_name><wp:author_last_name><![CDATA[Stead]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.5.16</generator>

	<item>
		<title>Note to self, scope is important.</title>
		<link>http://www.chrisstead.net/archives/1/hello-world/</link>
		<pubDate>Wed, 05 Dec 2007 05:30:20 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Being that this was an issue just last evening, I thought I would share something that I have encountered when writing Javascript scripts.  First of all, let me state that Javascript syntax is extremely forgiving.  You can do all kinds of  unorthodox declarations of variables as well as use variables in all kinds of strange ways.  You can take a variable, store a string in it, then a number, then an object and then back again.  Weakly typed would be the gaming phrase.  The one thing that I would like to note, as it was my big issue last evening, is scope of your variables.  So long as you are careful about defining the scope of any given variable then you are ok, if not, you could have a problem just like I did.  So, let's start with scope and how it works.

<strong>Scope</strong>: A mouthwash.  Yep.  There you have it.  Brush and floss every day and you'll be a better programmer.

That's useless.

<strong>Scope</strong>: In computer programming in general, a scope is an enclosing context.<!--more-->

Ok, at least this one is accurate, though it doesn't tell us a whole lot.  Really, the way that you can look at scope is "what parts of my program can access this element?"  I know that "element" is a little vague, but you can have scope that refers to objects, variables, functions, classes and a whole set of "elements."  You see why I chose the word.  What I am concerned with here is the scope of a variable.

So, how do we reconcile this in programming terms?  Well, a variable can be a global, i.e. it can be accessed by anything.  Global variables are bad and should be eliminated with impunity.  I recommend a pistol.  Seriously, though, if you have a global variable that is storing anything that might be more than garbage text, you should probably find some other solution for your data storage needs.

Object scope.  This is much more limited.  Generally in an object you want to kind of tuck the variables away so that people don't fool with your program.  Anything that is tucked into an object and set as private or protected will serve you well LoL, grasshopper.  With any variable that is private or protected in an object you'll need to write a get and a set method/function for it.  Just something that should be said

Function scope and finer grain scope.  Variables that are explicitly defined in a function are available to the entire function from the definition of the variable onward.  Variables that are defined in a for loop, though, are available only in the loop.  This being said, if you define a variable for use in a loop like so "for(var i=0; i&lt;..." the scope is limited, however if you define a variable as such: "while(true){var i=0..." then 'i' will be available outside of the loop, in other parts of the function.  This is a very important distinction.

Quick thoughts on "while(true)..."  Don't do it.  Seriously.  Bad idea.  Bad bozo, no cookie!

So, now the problem that I ran into.  Javascript will allow you to declare a variable thusly: "i=5" and it is fine with that.  If there is no prior instance of the variable 'i' then a global will be created.  If there is a prior variable that is accessible, it will overwrite the current value of 'i' as it should.  If there is a variable 'i' that is limited in scope and inaccessible by the current operating function, a global will be created.  This is important to know when you are doing things like writing recursive functions.

Recursion leads us directly to the problem I had last night.  I was working on a recursive function that had a loop with an incremental counter.  I just went with "for(i=0; i&lt;other_var; i++){..."  I seemed to recall that if you declared a variable this way you would still have a nice, tight little for-loop scope to work with and you wouldn't interfere with other functions or instances of the league of legends recursion.  I was wrong.  This kind of error is somewhat invisible.  This took a while to figure out.  The way I should have done, and ended up doing this is "for(var i=0; i&lt;other_var; i++){..." Please note the added 'var.'  This will fix the scope issue and my code ran without a hitch.  Fun!  So, with that in mind, kids, remember to scope your variables properly or you might find yourself in a sticky situation.

Waiting that to find exactly who you’re not going to know Ranked Boost hasn’t missed any patch release If you’ve followed us on top against tank assassins champions against any patch release If you’ve followed us on one box This edition effectively win your champion without knowing who you’re probably not just champion and feel confident doing so You can gain the perks of the <a href="http://www.p4rgaming.com/lol/counter/ziggs/">LoL champion stats</a> team fight and prepared by purchasing LoL counter picks gain the LoL Counter.Be able to single handily carry You’ll never struggle on counter edition effectively win your team on top against tank assassins champions etc This can allow you and your jungle camps without fear knowing who you’re not going to counter picking up the reality is great for a winning player Using the entire game and your team fights.

Good luck and good web work!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2007-12-04 21:30:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-05 05:30:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yd4eugc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[39448cb4212bca7d415fbc5ca1d4aa2e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[failed]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[twitter_failure_code]]></wp:meta_key>
			<wp:meta_value><![CDATA[400]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[twitter_failure_reason]]></wp:meta_key>
			<wp:meta_value><![CDATA[Settings do not permit the auto-tweeting of old posts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551480114;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:735;}i:1;a:1:{s:2:"id";i:752;}i:2;a:1:{s:2:"id";i:180;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> Less is less, more is more. You do the math.</title>
		<link>http://www.chrisstead.net/archives/9/less-is-less-more-is-more-you-do-the-math/</link>
		<pubDate>Tue, 11 Dec 2007 23:48:02 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[By this I don't mean that you should fill every pixel on the screen with text, information and blinking, distracting graphics. What I really mean is that you should give yourself more time to accomplish what you are looking to do on the web. Sure, your reaction to this is going to be "duh, of course you should spend time thinking about what you are going to do online. All good jobs take time." I say, oh young one, are you actually spending time where it needs to be spent? I suspect you aren't.

First to the hard-core graphic designers in the crowd: Just because you spent extra time looking online through iStockPhoto finding that perfect picture does NOT mean that your design will encourage even one new customer. When it comes down to it, your average web user doesn't care what your design looks like. It should fit the theme of the product being sold and the tone should be appropriate, but they really don't care if you use one perfectly appropriate graphic or another. The nuance is generally totally lost. If you are going to consume days or even weeks coming up with that perfect design, it better slap my dad's dentures right out of his head and make him spend 50% more than he otherwise would. If this isn't the case, the ROI on those last few days or weeks that you spent is going to be painfully low. Think "solution" not "pretty." Spend you time actually solving your customer's problem.<!--more-->

Now on to the webmonkey/codemonkey. Do you really think that your customer cares if your algorithm is 2 nanoseconds faster on the server? They don't. I promise you. If you are shaving tiny fractions of seconds off of a process for the sake of speeding the page load imperceptibly then you are really focusing on the wrong thing. Redirect. Think about what the customer is going to be looking for in the site that you are providing your code for. Does your search algorithm actually produce results? Can I be a bonehead and still get what I need from your code or do I have to specialize in what YOU went to school for in order to make the site work?

So then what should you be spending MORE time on? Well, the customer. The sale. Does the site work? If your AJAXy, cool looking thing that loads all kinds of server-side data brings their browser to its knees, you should strip it. I know, AJAX is the rage. I was guilty too. Why do you think that I am writing this? Seriously, though, AJAX is not the panacea, just like DHTML before it or blink and marquee before that. Spend time looking at how the page works and most importantly spend time looking at how to moderate your "cool factor." Spend your time working on making a site that your customer will enjoy using. To the designer: spend time making the site easy to navigate. Put the information right at your customer's fingertips. Make sure that they will never want to use a competitor's site because yours sparkles so. Programmers: focus on making the site feature-rich in a way that your customer will appreciate. Make searches work properly. Listen to your IA, she knows what the search should do. Make sure that you match the search function match the customer needs. If you are going to use AJAX and other client-server interaction tools, make them lean and mean. Make them function well and MAKE SURE THEY DEGRADE WELL! There is nothing that will drive customers away faster than a site that doesn't work for them.

Unless the site is ultimately useful, regardless of how cool the site is, the customer will walk away. The bottom line is stop doing your techno-masturbation and provide what the customer wants: a useful site. If you spend your time on this your customer will spend more money with your company or use the services or whatever your site is supposed to do. Furthermore, your boss may even thank you with a raise or a promotion. Less is less. More is more. Think about it. ; )]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2007-12-11 15:48:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-11 23:48:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[less-is-less-more-is-more-you-do-the-math]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yawnm3v]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[552bf462b49e41cdb1aff7306d6ccbbf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Spending more time planning your site will pay off in the end, from user experience to content and function.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1541287438;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:12;}i:1;a:1:{s:2:"id";i:263;}i:2;a:1:{s:2:"id";i:18;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Accessibility and graceful degradation</title>
		<link>http://www.chrisstead.net/archives/12/accessibility-and-graceful-degradation/</link>
		<pubDate>Tue, 11 Dec 2007 23:51:54 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[Something that I have learnt over time is how to make your site accessible for people that don't have your perfect 20/20 vision, are working from a limited environment or just generally have old browsing capabilities. Believe it or not, people that visit my web sites still use old computers with old copies of Windows. Personally, I have made the Linux switch everywhere I can. That being said, I spend a certain amount of time surfing the web using Lynx. This is not due to the fact that I don't have a GUI in Linux. I do. And I use firefox for my usual needs, but Lynx has a certain special place in my heart. It is in a class of browser that sees the web in much the same way that a screen reader does. For example, all of those really neat iframes that you use for dynamic content? Yeah, those come up as "iframe." Totally unreadable. Totally unreachable. Iframe is an example of web technology that is web-inaccessible. Translate this as bad news.

Let's talk about <acronym title="HyperText Markup Language">HTML</acronym> and <acronym title="Extensible HyperText Markup Language">XHTML</acronym>. These are both derivatives of <acronym title="Standard Generalized Markup Language">SGML</acronym> which is a generalized markup language that is used to describe data. That's it. SGML doesn't make things "look" a certain way. You won't find it hanging around the local bar trying to pick up girls. It's just data description. Kind of geeky, like that kid that sits in the back of class playing with his... calculator. So, then HTML was developed with it's own <acronym title="Document Type Definition">DTD</acronym>so that people could describe the information contained in their HTML documents.  Early HTML was easy to interpret if it was coded well, however most people are sloppy with their code.  This led the W3C to create a code validator.  Now, based on the DTD that you use your document may be standards complient or it may not.  Personally I really like to stay within the bounds of strict XHTML, though onMouseOver is deprecated, so Javascript kind of hoses the whole complience thing.<!--more-->

This leads us to the topic at hand: accessibility.  Considering that HTML and XHTML are used for simply describing data, why would a page be more or less accessible?  Well, let's think about that kid that has MS, but still needs to get online research done for a class he's taking, or better yet, consider Stephen Hawking.  Do you think that they would be particularly amused if they had to fill out a form and had to be pixel precise to click on the input field?  I promise you they wouldn't.

Accessibility means that regardless of the browser or disability, your page should still be reasonably functional.  Now, this does not mean that your page should read minds, but there are some tags that should be very familiar. Learn and use the following:

&lt;acronym&gt; - The acronym tag describes what an acronym means.  Hover your mouse pointer over the first instance of HTML, XHTML, SGML and DTD.  The full name will pop up.  In some screen readers the full text will replace the acronym so that the human can interpret what the acronym means.

&lt;label&gt; - Label tags should be used with form inputs whenever possible.  This will ensure that your user will be able to click on either the form element or the associated text and the form element will gain focus.

&lt;noscript&gt; - Ok, if you have ever used Javascript, you are familiar with the &lt;script&gt; tag.  So, in contrast, the &lt;noscript&gt; tag surrounds what should happen if Javascript or other inline scripting language is disabled.

Aside from these few tags, you should also become familiar with the following attributes:

title - Title can be used on practically any element.  This should be used somewhat sparingly though, as using a title with an alt tag, for instance, could spell disaster for a screen reader which cannot interpret all of the attributes precisely as you might expect.

alt - EVERY IMAGE SHOULD HAVE AN ALT TAG!  No ifs ands or buts.  If the image is included in the page via the &lt;img&gt; tag, use an alt tag.  Furthermore, use descriptive alternate text.  img_21938740928374.jpg is not useful.   I will find out if you are doing this and I will stalk you in the night.  Alternate text doesn't have to be perfect.  No two people are going to interpret it in precisely the same way, but if the image is of a bird in flight, use alternate text that says something like "bird in flight."  People will understand enough to get by.

accesskey - The accesskey attribute sets the stage for people that are going to use the keyboard to navigate your site, or perhaps have a limited command set to work from.  This attribute enables people to use keyboard shortcuts to access form elements for their ease and convenience.  I recommend using this tag in your forms in general, though I strongly urge you to add accesskey to any form elements that a disabled user might be looking to use.

Moving forward, let's discuss the &lt;noscript&gt; tag.  Whenever you have a Javascript effect on your site, consider whether there would be a problem if there were no Javascript enabled.  As a matter of fact, go to your site, turn off Javascript in the options and try navigating.  If your site topples like a house of cards, you need to re-work your Javascript.  I currently work for a company whose previous web-person didn't account for people with no Javascript.  The corporate site is totally unnavigable without Javascript.  This is bad.  This is really bad.

Ensure that your scripts degrade gracefully.  If you have elements that are hidden from the user until the Javascript function is triggered, what happens if scripts are disabled?  I always run a special function at the end of the page that hides the elements I want hidden.  What this translates to is, if you have scripts disabled, the page displays everything.  The failsafe for my scripts is usability.

This brings us back to Lynx.  Don't think that I had forgotten.  I browse my sites using Lynx.  I do this so that I can see what happens when nothing is viewable but text.  Lynx doesn't even give any particular kind of formatting.  Pages are just a long string of words.  If you can open your site like this and still find everything easily you have successfully made your site accessible.  If your page looks like an amorphous mess then you have some work to do.

Now, go forth and make the web a more usable place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2007-12-11 15:51:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-11 23:51:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[accessibility-and-graceful-degradation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/y8drzmy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[9aef5b56d9a26519e2430da54e6ac338]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[A discussion of HTML and Javascript features for accessibility and enhanced user experience.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551470436;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:180;}i:1;a:1:{s:2:"id";i:78;}i:2;a:1:{s:2:"id";i:321;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Inflexible XML data structures</title>
		<link>http://www.chrisstead.net/archives/14/inflexible-xml-data-structures/</link>
		<pubDate>Fri, 04 Jan 2008 23:53:41 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[Happy new year! Going into the start of the new year, I have a project that has carried over from the moment I started my current job. I am working on the information architecture and interaction design of a web-based insurance tool. Something that I have run into recently is a document structure that was developed using XML containers. This, in and of itself, is not an issue. XML is a wonderful tool for dividing information up in a useful way. The problem lies in how the system is implemented. This, my friends, is where I ran into trouble with a particular detail in this project. Call it the proverbial bump in the road.

Generally speaking, when dealing with a database like one I use a lot, MySQL, you can run queries to retrieve data in any way you like. So long as the basic design is reasonably flexible, you can return anything you want. Apparently this isn't so with the XML structure that was used on my current project. People would ask, 'why is this a problem?' On the outset it doesn't seem like it would be. You figure out how you want to return the data and then you simply structure the XML containers appropriately. Great! Now along I come and I say, 'this model stinks. The usability is nonexistent and we want to change the structure.' Now what?<!--more-->

If the design were made to be flexible then it wouldn't be a problem. The query would be changed and the structure would be re-vamped. On the fly no less. Nothing like some good-old on-demand technology. I am all about on-demand flexibility. Obviously if you are talking about running a report for some exceptionally large amount of data then flexibility will have to be considered along with efficiency, but hey! We're talking about web experience here. People view things 10 at a time. We're not talking about 300,000,000 documents. Closer to 300. With current server tech as it is, 300 documents, even with an extremely inefficient algorithm, would take almost no time to sort at all, then you produce the correct XML and ship everything off to the client. Done! Zip-bang!

Now, if you have an inflexible data structure going into the whole system, you can end up with some major issues if someone, like myself, comes along and says 'this sucks. Fix it.' Now what? You start over. That's what. I made the mistake of coding a solution in a somewhat inflexible way and guess what? I had to re-work it. Some of the code was usable, but a lot of is was just lost time and lessons learned. Now the whole system is designed to be reasonably plug-able, though it's still not a spiffy API, and as people request things, I write them, plug in the necessary code and roll on like the champion I feel like!

So, the take away from all of this, if you are looking at things from a front-end, client-side perspective, expect to run into this kind of thing. Programmers like to write code that does <strong>precisely</strong> what it is supposed to. Nothing more. So if you are going to suggest major overhaul kind of ideas, prepare yourself. You will meet some friction. If you are a coder and would like to avoid the nastiness associated with people asking you to start over, think about how you can make your life easier at the front end. Since I finished the plug-in system, my life has been much happier and the final timeline has been much shorter on all associated projects. Do your self a favor. Be flexible. Think flexible. Things change. Will you be ready?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2008-01-04 15:53:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-04 23:53:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inflexible-xml-data-structures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ycucgf4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[7677038ce908481dd6926de12b6f9c26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551470990;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:132;}i:2;a:1:{s:2:"id";i:1226;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Occam&#039;s Razor</title>
		<link>http://www.chrisstead.net/archives/16/occams-razor/</link>
		<pubDate>Thu, 10 Jan 2008 23:55:33 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[I have a particular project that I work on every so often. It's actually kind of a meta-project as I have to maintain a web-based project queue and management system, so it is a project for the sake of projects. Spiffy eh? Anyway, I haven't had this thing break in a while which either means that I did such a nice, robust job of coding the darn thing that it is unbreakable (sure it is) or more likely, nobody has pushed this thing to the breaking point. Given enough time and enough monkeys. All of that aside, every so often, my boss comes up with new things that she would like the system to do, and I have to build them in. Fortunately, I built it in such a way that most everything just kind of "plugs in" not so much that I have an API and whatnot, but rather, I can simply build out a module and then just run an include and use it. Neat, isn't it?

So, today I was told that she really wanted to be able to update team members on a project and then update the status of said users. Now, the way the thing works is you update the list of team members on a project and then edit the project again to set the status. This is a little cumbersome, we've discovered, simply because we don't use the system the way we thought we would. Isn't this always the case? So, my boss specifically, goes and toys with the team members as she is working on a project. This is dandy, except that she has to update the team and then go find the project again, right away. Not so good. What she asked for is a way to update the team and then immediately update the status of any given member of the new team list.<!--more-->

My first reaction, mentally, was 'great, now I have to build out some crazy AJAX to go behind the scene, update the team list and then cobble together the list of the current team, push out some dynamic content to the page and then update things on the fly.' This is not my idea of a good day. I could have spent all afternoon working on this. Now being the planner that I am, I sat back and thought about this. This promptly put me into a slight daze and I took about a 5-minute nap. When I woke up it dawned on me: the requirements I put together in my head were not what my boss asked for, they were what I interpreted. My solution still uses a little javascript, but now there are just 2 buttons. 1 says 'save,' the other says 'save and exit.' When you click save, everything you did gets saved and you are returned to the page. From there, the page automagically builds and includes all necessary pieces. If you click save and exit, everything you did will be saved and you will be pushed back to the main screen.

So, the takeaway from all of this is Occam's razor applies very neatly to web projects. I love neat stuff that flies all over the screen and interacts with the server by making dynamic XHTML calls through activeX, but assuming all things are equal, the simplest answer is best. Why kill yourself and stress your server when you don't need to?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2008-01-10 15:55:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-10 23:55:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[occams-razor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ydbhbhk]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[d42c633fc4a941badf85aca25447990e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[An epiphany I had regarding perception versus actuality regarding client requests and delivery.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551470892;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:340;}i:1;a:1:{s:2:"id";i:1231;}i:2;a:1:{s:2:"id";i:1114;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web Scripting and you</title>
		<link>http://www.chrisstead.net/archives/18/web-scripting-and-you/</link>
		<pubDate>Thu, 16 Oct 2008 23:56:56 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[If there is one thing that I feel can be best learned from programming for the internet it's modularity.  Programmers preach modularity through encapsulation and design models but ultimately sometimes it's really easy to just throw in a hacky fix and be done with the whole mess.  Welcome to the "I need this fix last week" school of code updating.  Honestly, that kind of thing happens to the best of us.

Being that I am a web developer, specifically working in an interpreted language, there are two ways that things can go, clean, neat and easy to manage or a horribly mangled mess.  My first couple of full-scale projects on the web were more of the latter and less of the former.  I cobbled things together any way that worked within the time frame that I was given.  Ultimately this meant little to me at the time, but for the people that are maintaining the code now...  I am terribly sorry.  Fortunately, I know the poor sap that is currently updating the code so he has a resource to cut through the thick undergrowth of spaghetti.<!--more-->

Now fast forward a few projects and one ridiculously large CMS later and I have learned a few things about what not to do.  Lesson 1: don't make a script that does everything.  Lesson 2: you are eventually going to have to look at that code again.  Lesson 3: When the code is not completely obvious (read this as print statements and built in functions being used in the simplest possible way) comments are always helpful. Lesson 4: even interpreted languages have debuggers, so use one. Lesson 5: make it modular.

Lessons 1-4 are things that everyone hears, ignores and then ultimately pays the price for.  Lesson 5 is something that is preached and never reached...  dig the rhyming scheme.  On the web, if you build something in a nice, chunked out way to begin with, your code will look like that forever more.  I promise.  Once you have built a handy little chunk like an order-processing script that just hums along and processes whatever you send it, you'll never write a hack for this order or that one again.  I promise.  It won't happen because you won't need to.  You have a handy little piece of code that works like... say... an object!  WOW!  Who would have thunk it?

Now I write this not for the programmers that are in engineering teams out there working with a bunch of people that all have a standard that they follow and ultimately know all of this already.  I am writing this for the rogue programmer that has decided they are going to go it alone and do something stupid like write a custom CMS/Project Management System/Time tracker integrated tool... Man, that sounds really familiar.  Anyway, if you are going to tackle a large project all by your lonesome it is of the utmost importance that you make it as easy for yourself as possible.  I really like that I have built an ordering system where all I have to do is insert a new item and it is automagically updated and handled all over the place without any extra coding ever.  I don't even have to do a database insert.  It's all just done for me.  It's really nice.

So some of the basic rules that I follow for no other reason than I have found them to work:

1) A script in a file does one thing.  Even if you think it should do x, y and z, it doesn't.  If you coded it to do x, y and z all at the same time, one of those functions breaks on you, I have seen your code and your future, I know.  Trust me, one script, one purpose.

2) Create your directory structure BEFORE you write ANY code.  I generally include the following directories: page_elements, process, includes and templates.  This does not mean that you can't expand, but generally 4 directories and root is the barest minimum.

3) If you think something should be an object, it probably should be.  Gee, I find myself pulling info from the database a row at a time an awful lot.  Should I make a row object?  Yes. You should.

4) One object, one file.  Don't test me boy, see rule 1.

5) Break the system up into small, bite-sized pieces and create an API for plugins.  It can be rudimentary and even require a little code to plug the piece in, but you will save yourself a ton of work if you can just write the added feature without having to dig into anything else.

6) Figure out a layer structure and live by it.  I don't care the model, just use it and make it work for you.  It doesn't even have to be one of the widely recognized design patterns.  I use a home-grown MVC pattern myself and it works like a champ.

7) NO INLINE CSS! Yes, I have broken this rule from time to time, but eventually I go back and pull it out into a file

8) NO INLINE JAVSCRIPT! No, I haven't broken this rule.  I understand that you have to put in even handlers where you want the script to fire, but your script should not live in the document.  Plus, who knows, you might want that toggle element display script somewhere other than in the single place you built it originally.

9) Break up your scripts and include them as needed.  Both CSS and Javascript should function properly where it is needed, but it should be excluded when not needed.  I know that some people write these monstrous CSS files with inline server-side scripts to add in the extra pieces when they are needed, but honestly, isn't it easier on you and the server to just include files when they are needed and not load them at all when they are not?

10) Commenting!  You know that crazy function that you wrote which required bit-shifting to make it happen?  Remember how it took you three days to figure out how to do it?  It will take you 6 days to untangle what you did when you look at it again.  If you had to think about something before you wrote it, put in comments.  The person that ultimately follows after you will thank you, and that might just be YOU.

Very well, that is all.  Off with you.  Go about your programming and make the web a little better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2008-10-16 15:56:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-16 23:56:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[web-scripting-and-you]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ybz9djj]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[07efd03bf031ca027aa24092006edd4e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[A discussion of modularity and planning site architecture before development.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551470964;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:292;}i:1;a:1:{s:2:"id";i:907;}i:2;a:1:{s:2:"id";i:256;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Browser Wars</title>
		<link>http://www.chrisstead.net/archives/21/browser-wars/</link>
		<pubDate>Mon, 13 Apr 2009 23:58:43 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[It's been a while since I have posted. I know. For those of you that are checking out this blog for the first time, welcome. For those of you who have read my posts before, welcome back. We're not here to talk about the regularity (or lack thereof) that I post with. What we are here to talk about is supporting or not supporting browsers. So first, what inspired me to write this? Well... this:

<a href="http://www.wedontsupportie.com/" target="_blank">We Don't Support IE</a>

So, this brings a question to mind -- which browsers should we choose not to support and for what reasons?

This is an easy question to answer.  <strong>You support all of them</strong>.  Yep, you heard me right.  You support everything.  You are mindful of browser incompatibilities, inequities, disabled users, mobile users and users you had never even thought of before.  You are aware of the fact that browsers come in multiple versions and you make your sites backwards compatible.  Long and short, <strong>do not tell your users what to do</strong>.<!--more-->

Now, a caveat to all of this must follow.  If you are creating a web site geared toward the bleeding edge crowd, you can probably inform your users that they should hop on the newest tech to get the full features of the site, but even to this end, you are to never, never, never to create a site that displays no useful information to a user that does not fit into the spectrum of your audience.

Now, before people hop on me for claiming that the We Don't Support IE site is encouraging people to make their web sites inaccessible to all IE users, I am not saying this.  What I am saying is <strong>ignoring the IE crowd is throwing away, at the very least, 50% of your audience</strong>.  More than likely, you are going to be tossing out more like 70% of your audience.  This is a bad idea if you plan on doing anything even remotely commercial with your site.

This discussion could bear a little bit of transparency.  I do web development for a living, and I tend to spend a lot of time focused on user experience.  I mean a lot of time.  That being said, I spend quite a bit of time listening to people explain what they do and don't like about the way that something functions.  Moreover I see a lot of really bad sites.  By this, I mean horrible, awful, not fit for use web sites.  So I am not going to just pound on the Firefox/Mozilla, Opera, Safari/Webkit/Chrome crowd.  I understand that this is the group that would rather see Internet Explorer gone, but let's be realistic, IE is probably going to be around for quite a while yet.  Get used to it.

Like I said, though, I am not going to just pound on one camp.  You Microsoft guys get your lumps too.  See, I code in PHP, but I also code in ASP.Net and C#.  That being said, I know the dirty nastiness that lies under the hood of the MS technologies too.  I have seen sites that were built solely in ASP.Net and whatever code-behind model they chose which catered only to Internet Explorer.

Now, I understand that IE has access to neat little .Net architecture tools that other browsers don't play so well with, but I have seen sites that were simple, straightforward websites that when viewed in IE looked great, but heaven forbid you use anything else.  Unforgiving is too gentle of a word for what I have seen.  Pages rendered completely unreadable, forms that stretch across the screen and then some.  Serious kinds of ugly.

Just to inject my personal bias so everyone can see where I come from on a user-side standpoint:  I like Firefox.  I use it a lot.  I am comfortable with it.  It makes me feel all warm and fuzzy inside.  I really detest using Internet Explorer.  I find myself limited more often than not with it.  IE has gotten better in the past year or two, but I am still not a fan.  It's just the way it is.

So bearing my bias in mind, I have to say this: <strong>what you like, appreciate or prefer to work with does not matter</strong>.  The only one that matters is your user, and you should aim to <strong>create as close to the same experience for every user as possible</strong> that arrives at your web site.  If you have a menu that looks killer in Firefox, but can't be created in IE no matter how you try and it is unusable for more than half of your users, scrap it.  If you are unable to tweak your CSS to make everything feel similar, research, or pick another layout.  It is that simple.

This browser fight is very reminiscent of the 90's when everyone had a "Get Netscape" or "Get Internet Explorer" buttons plastered all over thier pages.  The web has grown, so it is time that we do too.  We cannot continue to battle this way or we will only alienate users that might otherwise be loyal customers.  In closing, we only hurt the user more by trying to force our preferences upon them.  Don't do it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2009-04-13 15:58:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-04-13 23:58:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[browser-wars]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yd8sqth]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[6829df3d706f54d0fc733128181bdf0a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[A brief discussion of why developers and designers need to consider all browsers carefully and develop for a broad audience.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551470915;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:143;}i:1;a:1:{s:2:"id";i:919;}i:2;a:1:{s:2:"id";i:964;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[The Browser Clipping Point | Chris Stead.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/143</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.205.11.33]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-01 10:03:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-01 18:03:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] while back, I posted a blog about browser wars and how people were behaving on the web. I would never condone a conscious exclusion of one visitor [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Information and the state of the web</title>
		<link>http://www.chrisstead.net/archives/23/information-and-the-state-of-the-web/</link>
		<pubDate>Tue, 09 Jun 2009 23:59:47 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[I only post here occasionally and it has crossed my mind that I might almost be wise to just create a separate blog on my web server.  I have these thoughts and then I realize that I don't have time to muck with that when I have good blog content to post, or perhaps it is simply laziness.  Either way, I only post when something strikes me.

Oh, and strike me it did.  Today I was hit with a brick by some guy running a site all about that crazy thing called love.  Lies!!  It was all about the web.  More importantly, it was about how to do various things on the web.  The site is called "The Noodle Incident" (http://www.thenoodleincident.com/) and, though it was not my favorite site to visit, I wasn't terribly bugged about it.  Let me say, I wasn't bugged until I got to the design page.  Finally, I'd had enough.<!--more-->

The navigation was impossible, the selection of navigation copy was mystery meat and backwards navigation was impossible.  I have to hand it to the guy, his site was clean and easy to read.  Applause deserved for that, but while he realizes that machines and all sorts of accessibility interfaces must interact with his site, he forgot that PEOPLE have to interact with the site too.  This is a really important thing to remember.

Wonderfully, this brings us to the topic <em>du jour</em>: Information Architecture and User Experience.  These are buzzwords right now, but they are really important buzzwords.  They represent something that people have worried about and fussed over for ages.  The question is always the same, "how do I make this easier for people to do?"  The IxDA community holds the key to this particular castle and I promise you the princess is in there.

So, where did our wily friend go wrong?  Simply put, everywhere.  Honestly, the site is easy to read as I had said before, however getting to that information is a real bear.  If you start on the front page then you are going to do well.  The main page of the site leads off to all of the information, as far as I can tell.  The real problem is navigating from another page back to main or to some other set of content.  If you landed anywhere but the front page of the site, forget about navigating anywhere without hand-editing the URL.  Long and short, accessing the content on this site is a challenge and that is bad.  This might be a good time to note, information is still king and getting to it is the only way to ensure optimal reader retention.  If your readers can't access your content, they are going to assume you have none and leave.  It's as simple as that.

Another big pitfall is his navigation location.  People learn to rely on the location of menus and such when visiting a site.  Optimally, you should have a strict, well though out navigation hierarchy that you adhere to in the most draconian sort of manner.  I'm not kidding.  Lop off hands of the people that defy you.  You'll feel better come the end of the day, I promise.  You will see immediate benefit as your users learn to trust that your navigation will remain right where they saw it last as they move from page to page to page through your site.  Key thought here: if your user doesn't notice the architecture of your site, you did a good job.

Finally, the most embarassing problem with The Noodle Incident, aside from having an uncanny resemblance to a Guns 'n' Roses album title, is that it suffers from Muphry's Law.  Technically, Muphry's Law applies to editing mistakes, but when generalized, would say "whenever you critique something, you are bound to have an error of the same type in your critique."  This relates to something really important, be sure that your content is useful, correct and does not point out flaws in your own site.  Nothing turns a user off faster than going to a site that is supposed to be an authority only to discover that they are incapable of following their own rules.  If you post authoritative content, be sure that you really know what you are doing and double check that you aren't going to be embarassed by it later.

The take-away from all of this is that Information Architecture, attention to the User Experience and some careful content creation will lead to a happier, more productive site.  People will enjoy visiting and may even take you seriously.  Focus on navigation, findability and accessibility.  These items, coupled with a site that is easy to read will lead to a better web experience for everyone involved.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2009-06-09 15:59:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-06-09 23:59:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[information-and-the-state-of-the-web]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yb44zh3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[2a76cc6e65e1db019f59bd3e447f3057]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[A brief explanation why Information Architecture and User Experience testing and application should be a big concern for developers and designers.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551471012;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:329;}i:1;a:1:{s:2:"id";i:21;}i:2;a:1:{s:2:"id";i:292;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It&#039;s Called SEO and You Should Try Some</title>
		<link>http://www.chrisstead.net/archives/26/its-called-seo-and-you-should-try-some/</link>
		<pubDate>Thu, 19 Nov 2009 00:02:19 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[It's been a while since I last posted, but this bears note. Search engine optimization, commonly called SEO, is all about getting search engines to notice you and people to come to your site. The important thing about good SEO is that it will do more than simply get eyes on your site, but it will get the RIGHT eyes on your site. People typically misunderstand the value of optimizing their site or they think that it will radically alter the layout, message or other core elements they hold dear.

First, what SEO isn't. I think it's best to get this out of the way early so we can get into helping you do good stuff without a bunch of "but-but-buts." So, SEO isn't cramming a bunch of keywords into the bottom of your page. It also isn't redesigning your entire site so it looks like garbage but Google can read it like a dream. SEO is not putting your site on every link farm in the world and it is not spamming people on social networking sites. SEO is also not spamming people on message boards. SEO is not about fads and fast grabs. It's not about people coming to your site and then bouncing immediately. SEO isn't about a bad web experience, plain and simple.<!--more-->

Now let's look at what SEO is. SEO is about strategic placement of key concepts in your web site to encourage traffic that will be interested in your message, product or service. SEO is about making the best of what you have to offer and making your web presence work for you. SEO is about traffic analysis and evolution. SEO is about marketing in a smart way and encouraging your customers to think of you first. SEO is about becoming an industry leader and a recognized authority.

I don't believe in mincing words or trying to sneak around and do back-room deals to become another SEO douchebag, so I felt it was only right to lay that all on the line first and foremost. Now that we have a picture of what SEO is and is not, we can benefit from looking at ways to improve your site today and give you tools to improve your site more over time.
<h4>Keywords</h4>
Keywords are important for any search. Regardless of the way that the searching is done, eventually it comes down to what the customer is searching for and keywords are precisely this in a crystalline structure.

The thing to know about keywords is they are meant to be a focus. If you are planning on making a page about anything, it would behoove you to understand the essential idea you are trying to convey. Once you have this in mind, write down three to seven keywords. Use these as a guidepost and they will keep you on target. Moreover, if you are on target and your keywords were selected properly, they will appear naturally in the text. This is good. Don't try to overdo it. If a keyword is important it will appear in the main copy a few times. The appearance of keywords in 400-1000 words of copy should live around fewer than 10 times.
<h4>Titles</h4>
Every document should have titles. These titles are going to range from the overarching document title down to sub-sub-subtitles. This hierarchy of titles is important in SEO because it tells both your reader and the search spider what is most and least important. If you have good titles, they will work for you. If you choose poor titles, or worse, your hierarchy is haphazard, then they may well work against you. Take care to pick the right title structure for what you are actually trying to say and you will do well.
<h4>In-bound Links</h4>
Any site that is considered an authoritative source on anything is bound to have in-bound links. If people care about what you do or say, they are going to refer to you for citation. The people who created search algorithms know this and they take advantage of it. The more in-bound links your site has, the more likely it is to be an authority. Authoritative sources show up higher in search rankings than derivative sources. Keep this in mind and strive to be an authority. Pick something that you do which the rest of the world could do to know about. Push that and become a key player. This will boost your site rankings as well as being a generally good business practice.

While we are discussing links, let's discuss directories. There are several directories on the web but, as far as I know, there is only one that is still completely human edited and maintained. That site is the <a style="color: #000000;" href="http://dmoz.org/" target="_blank">Open Directory Project</a> (<a style="color: #000000;" href="http://dmoz.org/">http://dmoz.org</a>). Since the Open Directory Project is human maintained, it is given more value by the search engines. It is the equivalent of having a single person, who is a noted authority, personally vouch for your site. This would be like having someone with a doctorate vouch for your research in their field. It's mega bonus points and you should use it to your full advantage. It takes a while to get listed so don't fret if, after you submit your site, it takes months to see a result.
<h4>Meta Information</h4>
This is where things get a little more technical. Meta information, generally referred to as meta tags, provide spiders with direct information about your site. You can add things like a description and keywords. Both of these things will help people find your site more easily. The meta keywords typically aren't given as much weight anymore, since people abused them in the past. Your meta description is the vital one. Google, for one, uses your meta description to tell people about your site in your own words. That's a good thing since it gives you personal control over what people see before they hit your site. Below are the tags that should be included in the head of your page:

&lt;meta name="description" content="your site description goes here" /&gt;
&lt;meta name="keywords" content="your keywords go here" /&gt;
<h4>Document Format</h4>
The underlying format of your document will tell spiders a lot about what they are looking at. This is one of those items that can be worked on over time. As long as spiders know you are out there, they will check back on pages from time to time to ensure they know about the latest changes. First, it is best to pull your site out of that table layout you are using. Spiders think tables mean that each piece of data is related to another in a certain way. If your entire format is a table then they will not correctly interpret the content you have on your page and you might lose brownie points.

Commonly, sites are created using page divisions, as God intended. This means that you tell the browser "this is a piece of this page and it stands on its own." Spiders can read this much more easily and the whole site degrades much more gracefully if you do a good job. Graceful degradation makes your users happy, especially if you have users with limitations, using a special browser. Once your document is formatted properly, you can arrange your divisions into an aesthetically pleasing format using Cascading Style Sheets (CSS). CSS is outside of the scope of this discussion, so I am going to let that dog lay.
<h4>Sitemaps</h4>
I'm not talking about your run-of-the-mill sitemap for your visitors. I am talking about a carefully crafted and standards compliant XML sitemap. There is a standard used for creating a sitemap and, once you have one, it makes indexing your site a breeze. Search spiders commonly grab a sitemap so they can better understand what they should and should not index. Sitemaps also allow you to tell spiders how often certain pages are updated. This allows them to index pages that change all the time more often than pages that may not change for months at a time.
<h4>Robots.txt</h4>
The robots.txt file is a simple text file that tells search spiders what to index and what to ignore on your site. It's similar to a sitemap, but the parameters are limited. You can say "index this" and "don't index that." This is great if you have some pages that are currently in development, should not be seen by the public or other strangeness like that. This also allows you to have a copy-testing site that should be ignored. Duplicate copy on sites is looked down on by search engines, so anything you can do to avoid indexed duplicate copy is a good thing. I typically have a sparse robots.txt file as most of my site is viable content, but government agencies and Rupert Murdoch seem to like robots.txt quite a bit.
<h4>.htaccess</h4>
This is probably a book in its own right, but it is something that people should be aware of. The .htaccess file allows administrators to control site access and redirect people to new pages and away from missing pages. Correct use of the .htaccess file can limit the number of broken pages that spiders will encounter and keep your visitors happy. One of the best features of a good .htaccess file is the ability to redirect users and spiders alike to new pages and send a message back to them, letting them know the redirect is permanent. Spiders like knowing that a page has moved. It makes the whole process of reindexing faster and easier. This kind of redirect is generally called a 301 redirect for the code that is returned by the browser.
<h4>Blogging</h4>
We live in a time where the blogosphere is king. What this means to the rest of the world is, blogs influence online life. Blogs change rapidly and bloggers tend to stay atop issues that are near and dear to them. Blogs are also a boon to your industry. If you have a blog that reflects knowledge and a profound understanding of your industry, you are more likely to be considered an authority. Blogs also give your site an opportunity to generate new content on a regular basis. Search spiders like new content and index sites, which are regularly updated, more frequently. This also provides an opportunity to share information about your industry in a non-business environment and generate in-bound links, you remember what I said about those, right?
<h4>Social Networking</h4>
This is closely tied to blogging, but it can impact your business and website in many ways. From forums to MySpace to Facebook to twitter and others like these, people will talk about what they do and don't like. If you are a well liked provider, the word will get around and people will head to your site. These sites help people to find things that others have recommended and they are a great source of in-bound links. Search spiders check these sites often as content changes minute to minute. Also, if someone recommends your site on a social network, it is taken as a personal recommendation and spiders will take note.

There are so many ways to take advantage of social networking that it should probably be at least one, if not several, college courses. I did choose to list this one last, however. If you have not worked on everything else first, social networks can be your worst enemy. People will say negative things about their experience and spiders will touch your site more often only to pick up your poor SEO. Once this happens, it's downgrade city, so watch out!

In the end, there are many facets to SEO, but most of them can be worked on and improved by anyone that helps build, update or administer your site. With this information I charge you, go forth and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2009-11-18 16:02:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-19 00:02:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[its-called-seo-and-you-should-try-some]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/y8z8f26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[9d0d17789716bdcb2873600f2ba9e1e0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[An overview of basic site SEO, or Search Engine Optimization, and how it can benefit website search rankings.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551471045;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:247;}i:1;a:1:{s:2:"id";i:329;}i:2;a:1:{s:2:"id";i:57;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Well, Now, Isn&#039;t that Flashy?</title>
		<link>http://www.chrisstead.net/archives/57/well-now-isnt-that-flashy/</link>
		<pubDate>Thu, 07 Jan 2010 22:40:51 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[I make no secret of the fact that i'm not a huge fan of Flash.  It's not really because I feel there is anything inherently wrong with Flash.  I am opposed to the gross overuse and misuse that happens every day.  Sometimes only Flash will do, and in those circumstances it is the answer.  Sometimes Flash is the answer to a question that is totally incorrect.

When someone proposes making a website, I immediately start asking questions of scope, regularity of updates, audience, intent and so-on.  Typically I don't ever ask what technology the client is interested in using.  When it comes down to brass tacks, I'm typically uninterested in the technology the client wants because the user is the important piece of the puzzle, so the tech that fits is the tech that gets used.  I can only imagine what goes through the minds of people before building a website that is run only with Flash.

"Hey Joe, what do you think of building a site using only Flash?"

"Cool idea! How do you think users should interact with it?"

"I hadn't really thought about it. I just think it would be neat to have an all Flash site."

"Let's do it."<!--more-->

This conversation may be out of touch, but this is how I feel any time I find myself looking down the barrel of an all Flash site.  It simply feels like people were putting tech before the user.  Flash is a great tool, but it seems to thwart some of the elements of the web I consider to be key.

Before I go further, let's agree to use a naming convention so I don't have to keep typing things out over and over. I'm going to refer to an all Flash site as an AFS.  Please be aware of this.

<h4>Now, That's Degrading</h4>

An excellent <acronym title="All Flash Site">AFS</acronym> will have been built to degrade gracefully, allowing for access by disabled users.  The content will be repeated in an <acronym title="HyperText Markup Language">HTML</acronym> format which can easily be read to the blind or accessed through a disability-geared browser.  I have seen sites like this and I applaud their effort to keep accessibility in mind.

Many of the AFS examples I have seen do not degrade so beautifully. Some just show a broken plugin indicator.  Others test for flash on a system, then display a message stating, "this site requires flash."  The worst test for flash, and if it is not installed, they display the main menu, without links and without content, as if to say, "this is everything you could have if you weren't such a luddite."

Users really dislike being told they are bad because they aren't like you.

<h4>Trafficking Issues</h4>

Unfortunately, even if an AFS is designed to degrade wonderfully, the content for the site is locked away in a Flash file which causes undue strain on the user.  Suppose, for instance, an AFS has a really incredible article about a relevant topic.  Since the site is built into a Flash file, the user cannot pass the article along to other potential readers.  This means the site is losing potential traffic.  Lost traffic is always a good indicator of bad design and development.

<h4>Johnny 5 Requires Input</h4>

Marketing teams should always be against an AFS on principle alone. If a user visits the site and spends a large amount of time in one section, how is anyone to know?  I am unaware of any analytics tool that will track this, as all of the tools I've used rely on a standard HTML site.  This lack of site analytics should elicit horrified reactions from your marketing team instantly.  A complete lack of marketing feedback is always a little frightening.

<h4>What Search Engines?</h4>

Even the best AFS leaves something to be desired in <acronym title="Search Engine Optimization">SEO</acronym>.  Supposing your site degrades perfectly and any Flash-disabled browser hits your site, the content is on the ready in plain text and markup, you are still committing an SEO faux pas called cloaking. In simple terms, cloaking is when you display different content for the search engine than what is provided to the real user.

Understandably, the argument would be made that the content is identical to what is in the Flash file.  It isn't.  The look is different and there are pages which can only be accessed if Flash is disabled, while, if Flash is enabled, you have to navigate within just a single page.  What this translates to is, you are lying to the search engine.  You are saying there is content directly accessible on your site which, in reality, is not.

Google doesn't look kindly upon this and has banned websites doing legitimate cloaking in the past.  What makes you think you are any different or better?

Now, supposing you don't have all of the degrading features we love so well? In plain terms, you don't exist to the search engines at all.  Your site comes up on Google or Yahoo and the description is, "sorry, you must have flash to view this site."

When I see that in any search result, I skip it immediately.  Fortunately, since you have chosen the path of Darwinian self-selection, I never come across that message since I don't look for that phrase.

<h4>Up-shot</h4>

I am certain I haven't covered all of the evils that ride on the coattails of an AFS, but I believe these few are a strong enough case on their own.  In the end, if you opt for an AFS for your company, be prepared for many difficulties, which will, undoubtedly, outweigh the benefits you gain by having a pretty transition from one page to another.

Please, keep the web a beautiful and accessible place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2010-01-07 14:40:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-07 22:40:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[well-now-isnt-that-flashy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ye9pa6p]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[d68a5cb61584a98c40ffe2d38cefb753]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[As all-Flash websites regain popularity, it is important to consider the related pitfalls and usability issues.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551720080;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:87;}i:1;a:1:{s:2:"id";i:321;}i:2;a:1:{s:2:"id";i:21;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Chris Stead.com » Well, Now, Isn’t that Flashy? -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/4JaNbK</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-07 16:03:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-08 00:03:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Ast Riske, Jason K. Jason K said: RT @TweetODoom: STOP MAKING ALL FLASH SITES! Thank you. http://bit.ly/4JaNbK [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Ah, Simplicity</title>
		<link>http://www.chrisstead.net/archives/78/ah-simplicity/</link>
		<pubDate>Fri, 08 Jan 2010 22:14:10 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[Every time I wander the web I seem to find it more complicated than the last time I left it.  Considering this happens on a daily basis, the complexity appears to be growing monotonically.  It has been shown again and again that the attention span of people on the web is extremely short.  A good example of this is a post on Reputation Defender about the <a href="http://www.reputationdefenderblog.com/2008/06/16/the-short-attention-span-of-web-searchers-most-never-read-past-3-results/" target="_blank">click-through rate on their search results</a>.

I was discussing these two aspects of the web with the graphic designer at my work and we seemed to agree that all evidence points to the growing trends of complexity and short attention spans.  Then we had something of a revelation.  Perhaps there is a correlation. Is it possible that the ever increasing complexity of the web and the numerous sites which live there are encouraging the limited attention of users?  Perhaps it's the other way around and short attention spans affect choice to add extra elements to an already architecture-overburdened site.<!--more-->

Without any solid evidence or support, I have a tendency to lean toward the complexity of web sites as a contributing factor to ever shorter attention spans.  It has also been shown that people who are multitasking perform each task <a href="http://www.shmula.com/375/multi-tasking-leads-to-lower-productivity" target="_blank">less efficiently than if they had focused on a single task through completion</a>.

It seems, with such a claim. that complexity in web design and architecture would, inherently. Lead to poor focus and retention.  Understandably, there are multiple factors that play into a site with an overburdened architecture.  Not only is there the desire to encourage users to remain on the site, which drives a desire to present more compelling content, but there can be executive pressure to maintain certain elements on a page which may not serve the user's purpose.

One thing that seems to make for better selling products, time and time again, is taking something that already exists and making it easier to use.  Apple is a great example of this.  They didn't invent the computer, the MP3 player, the cellular phone or any other technology they sell.  What they did was create something that was more appealing to the user.

This may be the key to getting ahead on the web as well.  Suppose we packed more features into a site, but did it in a smarter way.  The web site will never be as intuitive as the <a href="http://informationarchitects.jp/the-interface-of-a-cheeseburger/" target="_blank">cheeseburger</a> or the <a href="http://www.greenend.org.uk/rjk/2002/08/nipple.html" target="_blank">nipple</a>, but if we could eliminate some of the clutter in lieu of a more progressive experience user retention and attention might take to the rise again.

From a user-experience and developer perspective (as opposed to a graphic design perspective) I argue that the first thing we could benefit from is stripping away the nonsense.  Suppose we assumed that a blog would actually do what it was intended to do and present information in an easy-to-digest fashion.

Think of it as eating a fresh apple rather than apple pie.  When you eat the apple straight as it came from the tree, you can predict roughly what you will get.  It will be crunchy, sweet and apple flavored.  Now, suppose you are eating a piece of apple pie.  It is much more challenging to anticipate precisely what you will get.  There are spices and sugar and a crust that all get in the way of the same tasty apple you wanted to eat.  Now sometimes apple pie is just right, but just as often, a single apple would offer a more consistently good experience.

Once you nail down the basic site, you have moved back to the more nutritious and significantly less complicated apple.  From there, we can think of enhancements as a genetically modified apple, destined for better flavor and crunch than you could ever find in nature.  It's the hyper-apple.

Different sites will require different focusing and careful pruning, but I have seen very few sites that could do with more clutter and complexity.  Conversely, I've seen plenty of sites that could stand for an architecture trim and shape.

I took this very approach to heart when preparing the presentation of this site.  At first blush, there appear to be elements distinctly missing, for instance, a sidebar.  Perhaps this was a poor choice, but I don't think anyone will miss it.  A simple majority of the web-using populace is search centric anyway.  I have made sure to leave the search bar easily accessible, but I have eliminated the archives links which are so ubiquitous on most blogs today.

I could discuss all of the various features and plugins I used to create the experience you now see, but the details are beside the point.  In the end, either the user experience is a good one or a bad one.  So far, the stats for this site seem to reflect an experience that has kept users on the site for about five minutes at a time and they have visited 3 or 4 pages per visit.  Perhaps these stats aren't the best, but I'm not going to complain about a bounce rate of less than 50% at the moment.

The next time you are looking at your own site, perhaps you will think about what could use a little trimming and, together, we can make a simpler, more exciting and engaging experience for our users.  In the end, all I ask is that you do your part and help make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2010-01-08 14:14:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-08 22:14:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ah-simplicity]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/y8bdtau]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[b590a5dc76341b991bf07811ea0fffb8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[If only the web were a friendlier, simpler place to be. Perhaps we could regain some of our sanity.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551470941;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:180;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:1231;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Selection Correction</title>
		<link>http://www.chrisstead.net/archives/87/the-selection-correction/</link>
		<pubDate>Tue, 12 Jan 2010 00:21:38 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[User self selection is a mess.  Let's get that out in the open first and foremost.  As soon as you ask the user questions about themselves directly, your plan has failed.  User self selection, at best, is a mess of splash pages and strange buttons.  The web has become a smarter place where designers and developers should be able to glean the information they need about the user without asking the user directly.

The innate problem with asking the user about what they want is, they will invariably give you the wrong answer.  Sometimes it happens because they don't know what they want.  Sometimes they don't care.  Sometimes they misunderstand what you really want to know and sometimes they flat out lie to see what happens.

The question has hit my desk a few times now, "how does the user self-select in a nice, fluid manner?"  The answer: they don't.<!--more-->

It occurred to me, while pondering this question, that it wasn't the answer that was a problem.  It was the question.  I don't want to know how the user self-selects. I want to know how I am to select the user.  The question is flawed.

The first thing I did, once I awoke from the haze and saw the truth for what it was, I reformulated the question.  How do I select the user before they get to the site?

It sounds like I am preparing for a life of mind reading.  No computer will tell you much, if anything about your user.  Do they like cats or do they like laser blasters?  The computer neither knows, nor cares.  All you get is an IP address, an operating system and browser info.

So, how would one approach the user selection issue?  Is it a design concern or a development concern?  Yes.

The developer can say a lot about the computer the user is using, the place they came from to get to your site and where they landed on your site.  The designer can pick up the stragglers and put them on the path to user experience redemption.

First the developer must work their magic.  Given where the user came from and what page they landed on, the developer can make predictions about what they are going to want to do next.  These predictions are essential to handling the user experience moving forward.

If you have more than one type of user coming to your site, it is helpful to understand what they did to arrive.  If they typed in the address manually, or clicked on a link in their e-mail, the resulting behavior is almost certain.  They are there for a purpose and it would be wise to get out of their way.

If, on the other hand, the user arrived via search, the search terms will probably be in the referrer URL that is passed along with the GET request. If this is too much tech speak, think of it this way: the browser tells you what they searched for and you can use that to guide your user.

Any other in-bound links will tell you the user is interested in the page they clicked through to.  This is especially true if they were not mislead to believe the page is something it's not.  Your SEO skills would come in handy for that little task.  If you know the user is interested in a particular product or area, you can use that for opportunities to cross- or up-sell.

Once the user it on your site, the battle is half over, or only half over, depending on your outlook.  Since you know something about your user, you can guide them.  If, on the other hand, the user arrives mistakenly, on the wrong page, they need to find a way to get out of their mess.

This is where design and client-side architecture come into play.  Users typically behave in a click, back, click, back manner.  They click a link then, if it is not what they wanted, they click the back button.  It is your job, O noble chess player, to stave off that back-click at the expense of life and limb.

Make it easy to find the way to the right place on the site.  "Is this not what you wanted? Why not try this?"  It's a fantastic way to lead the user where you want them to go.  Make their journey one that ends at Mecca.

There are two wonderful side-effects of pre-selecting your user and their journey.  The first is you can streamline the architecture of your site to match precise needs and exclude the train wreck "features" that balloon into eventual site clutter.  Secondly, you can spend more time solving the problem of how to handle the edge-case users, leaving the straight-and-narrow users alone to complete their journey as effortlessly as they please.

In the end, the question of how a user self-selects should undergo great scrutiny before it is passed off as a primary goal of the site development process.  Think carefully and consider, not only the visual elements of the site, but the outside influences that make up the ecosystem you are about to interact with.  Consider your user before building the site.  Your users will thank you for it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2010-01-11 16:21:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-12 00:21:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-selection-correction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yb95ajf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[5bfbcf5cd124a25ebd17d52c0fad3f5a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Rethinking the user self-selection problem by eliminating the user selection from the process and cutting to the core of the issue.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446509;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:211;}i:2;a:1:{s:2:"id";i:166;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Party in the Front, Business in the Back</title>
		<link>http://www.chrisstead.net/archives/94/party-in-the-front-business-in-the-back/</link>
		<pubDate>Thu, 14 Jan 2010 17:00:55 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[Nothing like a nod to the reverse mullet to start a post out right.  As I started making notes on a post about findability, something occurred to me.  Though it should seem obvious, truly separating presentation from business logic is key in ensuring usability and ease of maintenance.  Several benefits can be gained with the separation of business and presentation logic including wiring for a strong site architecture, solid, clear HTML with minimal outside code interfering and the ability to integrate a smart, smooth user experience without concern of breaking the business logic that drives it.

The benefit that engineers will appreciate is the ease of maintainability.  With business logic abstracted from the presenation, engineers can maintain the infrastructure without worrying about breaking the look and feel of the client experience.  This alleviates stress and sleepless nights they might experience otherwise.<!--more-->

I just finished building the beta version of a Content Managment System for the company I am with.  I built a multi-layer system including two distinct uses of the Model-View-Controller design pattern.  The first instance was the underlying system that actually maintained the content, page information, taxonomy, hierarchy and page templates.  The second was more abstracted from the classic MVC pattern.

The CMS control interface, in my abstract version, is the model.  The API is the controller and it handles requests for display data, stores input from.  Finally, a very lightweight templating system is the view.  The templating system is actually built to act as a fully functional site on its own, built around a business logic/presentation theme.  The entire site can run on a separate machine from the CMS or API.

The benefit to all of this is releasing the presentation which the user interacts with from the confines of business logic which can slow a site down and muddy the response of an interactive system.  Flexibility is the path to enlightenment.

With the presentation decoupled, it offers a unique opportunity to concern myself only with what the user will interact with.  With some creative CSS and good, solid HTML I can build an experience my users will look forward to.  Also, with a lighter template to render, the site response should be snappier, leaving the user free to concern themselves with what they came for, content.

Because much of the template is pure HTML, the task of search engine optimization becomes trivial.  The HTML validates better and the content hierarchy is easier to develop.  This means search engines will be more likely to get a clear picture of what the site is like and how the content interrelates.

The benefit of keeping the business logic tucked away behind an API is, regardless of how it changes or functions, the user will have a seamless, predictable experience.  This builds trust between the user and your organization, which increases the liklihood they will stay longer and visit again.

Finally, all of this positive user experience would not be possible without a solid design.  Since the business logic does not interact or interfere with the design, the designer is empowered to make bold moves and guide the user through the site in a way that might not have been possible if user interface were tightly coupled with the code that drives it.

In the end, decoupling the business logic from the presentation allows us to move back to a simpler time when the web was primarily HTML, except you've got more than just bronze-age tools to build with.  With increased usability, maintenance and findability, your site will feel more like a smooth, clean experience and less like a clunky tool straight out of the mid-ninties.  Presentation decoupling makes for happy users and everyone wants happy users.  Go make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2010-01-14 09:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-14 17:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[party-in-the-front-business-in-the-back]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Decoupling presenatation from business logic not only leads to happy engineers, it leads to happy users.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yblpo5v]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[65729e8f49a2701a4de670f4c56bb3bb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446697;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:256;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:820;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Party in the Front, Business in the Back | Chris Stead.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/7isT4G</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-14 20:29:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-15 04:29:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Jason K, Chris Stead. Chris Stead said: Oh, I was a tired boy when I wrote this. Post updated. Separate your presentation from your business logic. http://bit.ly/7isT4G [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>OOC: Object Oriented Content</title>
		<link>http://www.chrisstead.net/archives/112/ooc-object-oriented-content/</link>
		<pubDate>Fri, 15 Jan 2010 19:15:08 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[Most content on the web is managed at the page level.  Though I cannot say that all systems behave in one specific way, I do know that each system I've used behaves precisely like this.  Content management systems assume that every new piece of content which is created is going to, ultimately, have a page that is dedicated to that piece of content.  Ultimately all content is going to live autonomously on a page.  Content, much like web pages, is <a href="http://www.websitemagazine.com/content/blogs/posts/archive/2009/02/05/psychology-of-design.aspx" target="_blank">not an island</a>.

Six months or a year ago, I had an epiphany.  Content can be handled much like programming, i.e. in an object-oriented manner.  Web sites often have repeating elements which could be broken out into individual pieces and reused throughout the site.  These pieces could be considered objects in their own right, and they would share quite a bit with objects in programming.  After building a proprietary Content Management System around this concept, I coined the phrase "Object Oriented Content."<!--more-->

Object Oriented Programming (OOP) has roots dating back as far as the 1960's and came into common use in the early 1990's, <a href="http://en.wikipedia.org/wiki/Object_oriented_programming" target="_blank">according to Wikipedia</a>.  Since its widespread adoption, OOP has become commonplace among engineers and is expected to be part of a programmer's standard arsenal.  Though object orientation (OO) has become commonplace with engineering professionals, some of the inherent benefits of OO have been overlooked in other, non-geek circles, especially within creative groups.

Though content will never demonstrate all of the principles found in programming, as it is written copy and not a programming language, there are some striking similarities between OOC and OOP.  Principles such as encapsulation, inheritance and abstraction come to light as content is broken into objects and removed from the page in which it will be displayed.

Content, once broken into objects, is an abstraction from the page it was intended to be displayed on.  We can look at this as, distinct copy is an instance of the object content and content is what goes on a page to solve the content question on the web.  In English, this means any copy I create is, ultimately, content.  A content object is an abstract idea that is used to answer the question of content on the web.

This abstraction of content from the page provides great power in managing a website and trimming time off the process of maintaining a website.  Content objects can be reused again and again throughout your site.  Moreover, since the content is not tied directly to a particular page, it offers greater flexibility in the operation of gathering and presenting content on the web.  The power comes from the ability to edit content in a single place in the system and update across an entire site, or across multiple sites.

A content object is, by its very nature, encapsulated.  All parts of the content are maintained within the content object and no part of the content is outside of the object.  The site page on which your content is to be displayed is totally unaware of the content contained within the object, but simply that it is a chunk ready for human consumption.

For the non-programmer, this means your end display does not look for what kind of content is being displayed or what the content says specifically.  Your client-facing site simply receives a prepared object and displays it as it is, without meddling in the affairs of the copy writer and editor.

Ultimately, display properties may vary based on things like CSS and container wrappers in your site, but the content, itself, will remain wholly intact and unedited.  This translates to a high-fidelity in content presentation based upon what the author intended. 

Finally we will look at content inheritance.  Content inheritance must work differently than programming inheritance.  Engineers will argue that what I am offering here is not the same effect, but for copy writers and editors the world over, this will be a great benefit for you.

If you create a content instance and store copy in it, you can reuse it.  This we know.  Within my proprietary system, you can also inherit content from an existing instance.  Once content is stored, it can be included in a page.  Suppose you would like to make a change to your content, but only on one page.  You can clone the content and edit it accordingly.  What you've done is inherited from the original content, but modified it to suit the new use.

There is an issue with this definition of inheritance.  If you modify the original content, your modified content does not change with it.  This is, however, a boon to your editor as they expect content to behave this way.  If your modifications change, or revert to some other form, it would lead to a great deal of frustration.

In the end, moving away from a static page-content model and to a more flexible and fluid content object model provides a great deal of power and ease when preparing a site for production.  From the creation of content, which can be reused, to editing content where a single change can affect multiple pages, the process of updating content prepared for the web because fast and easy, allowing all parties to spend less time managing pages and more time doing what they specialize in, providing content to the user.  Consider applying this approach to your site and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2010-01-15 11:15:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-15 19:15:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ooc-object-oriented-content]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ybnyvor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[47a813d24ab28a984b8d46ea721dd346]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446624;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:269;}i:1;a:1:{s:2:"id";i:276;}i:2;a:1:{s:2:"id";i:292;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention OOC: Object Oriented Content | Chris Stead.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/bit.ly/50N0IM</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-15 22:03:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-16 06:03:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Ast Riske and Jason K, Chris Stead. Chris Stead said: New Post: OOC: Object Oriented Content - http://tinyurl.com/ybnyvor #in [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Website Overhaul 12-Step Program | Chris Stead.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/211</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.205.11.33]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-22 09:19:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-22 17:19:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] could be written on the topic of templates and content management systems, including my notes on Object Oriented Content. For now, let&#8217;s simplify the idea and say, templates are good. You should use them. They will [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Content: It&#8217;s All About Objects | Chris Stead.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/276</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.205.11.33]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-25 13:37:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-25 21:37:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I wrote my first post about object-oriented content, I was thinking in a rather small scope. I said to myself, &#8220;I need content I can place where [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Reactionary Navigation: The Sins of the Broad and Shallow</title>
		<link>http://www.chrisstead.net/archives/118/reactionary-navigation-the-sins-of-the-broad-and-shallow/</link>
		<pubDate>Mon, 18 Jan 2010 16:00:11 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[When given a task of making search terms and frequetly visited pages more accessible to users, the uninitiated fire and fall back.  They leave in their wake, broad, shallow sites with menus and navigtion which look more like weeds than an organized system. Ultimately , these navigation schemes fail to do the one thing they were intended for, enhance findability.

Though one of my latest projects was the final straw, prompting this post, I've seen teams approach sites with the goal of findability and navigability in mind, only to end up with a system of menus and a field of links that are almost impenetrable to even the most tenacious of webonauts.  Documents, pages and external links mingle in a taxonomic and architectural nightmare.

Perceived site architecture is to blame for this iniquity, regardless of the real information hierarchy.  Although broad and shallow architecture is fine for small, simple sites, it is unforgiving as the site grows and the number of pages needed to contain all of the information provided balloons up.<!--more-->

Broad and shallow architecture is precsiely what it sounds like.  Instead of crafting a set of taxonomical structures and an architecture that reflects the hierarchy of information on the site, broad and shallow architecture offers all pages at the same level and provides no understanding of the interrelation between pages and the information they contain.

When search and analytics data is taken without proper insight, it can quickly become confusing to try and unravel the intent of the users visiting a site.  Users search for strange items and land on pages that may not reflect what their intent was originally.  Often, frustration mounts and they will search for anything that seems related to what they want.  Ultimately, the user will become discouraged and leave the site angry and unfulfilled.  Angry users are never return customers.

These frantic searches can lead to unexpected search terms.  Someone who is unskilled in assessing user data is likely to assume that pages need to be accessible directly from the home page of a site.  Eventually buildup occurs and ever page becomes a direct link from the home page.  When this happens, a broad and shallow architecture emerges from the mire.  With Draconian enforcement, teams will inflict "usability" upon the user in heaps and gobs.

The only way I know to solve this kind of problem is to strip a site down to nothing and begin again.  It's a hard pill to swallow and many teams respond horribly to this kind of news.  I typically revel in this kind of situation because it gives the site new hope for a fresh beginning.

The best thing any team can do is uncover a clear hierarchy and stick to their guns.  Often, it's not the information hierarchy, but the navigation architecture and highlighted links that kill the user experience faster than anything else.  Undestanding information importance and subordinance will always provide for a solid foundation to build a site with longevity and scalability.

After a solid, clear hierarchy has been laid in place, select clear, descriptive language to describe the categorizaion.  Be certain you are using the user's parlance.  Review search terms, both internal as well as search engine referer sourced, to select the right verbiage.  These carefully selected, key terms will be fundamental in guiding your user in a comfortable, transparent manner that will provide comfort to their experience.

Find key terms which are most searched for and focus on guiding your users there.  Most often the users that are searching on your site are not finding what they are looking for.  Even if the pages are clearly defined in the information hierarchy, the path to arrive there may not be so clear.  Provide <a href="http://www.designbycandlelight.com/digital-road-signs/" target="_blank">road signs</a> for the user to follow.

Signs on your site should be sparse, much like signs found describing the roads on which you drive.  Don't inundate your user with directions to get everywhere.  They have a goal.  Find out what it is and lead them to the promised land.  Guide them gently and let their discovery feel like their success.

Ultimately, large sites should avoid the broad and shallow approach, opting for a narrow and deep approach instead.  Give signs along the way to ensure the user experiences incremental success.  Guide your user gently and let their success be a rewarding experience they will look forward to recreating when they return next.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2010-01-18 08:00:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-18 16:00:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reactionary-navigation-the-sins-of-the-broad-and-shallow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Avoid broad and shallow architecture.  Use a strong hierarchy coupled with clear signs to guide users to the information they seek.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ya538ul]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[43935cb540b72cbda9a075938b3b3334]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446742;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:94;}i:1;a:1:{s:2:"id";i:78;}i:2;a:1:{s:2:"id";i:23;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>User Exwhatience?</title>
		<link>http://www.chrisstead.net/archives/127/user-exwhatience/</link>
		<pubDate>Tue, 26 Jan 2010 22:17:58 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of weeks ago, a friend of mine sent out a tweet asking what the 'x' was in Ux.  I shot back a pithy "Ux is User Experience."  In a small way, the question got my mind rolling.  I didn't realize, at the time, that I was considering who does and doesn't know anything about user experience and why that might be.

Today I landed on a slideshow put together by a gentleman at Microsoft all about <a href="http://www.slideshare.net/wctschumy/what-is-ux-and-why-should-i-care-in-line-of-business-applications" target="_blank">Ux and why it's important</a>.  This is particularly poignant as Microsoft developed a reputation for building applications that weren't always pretty, or clear, but essentially got the job done.<!--more-->

Microsoft is a company that hails from the old guard and is trying to move into a new era of user-based production.  Their oldest applications were built to serve the techs and speed their progress.  They weren't terribly interested in the average Joe since said Joe wouldn't be using their software much anyway.

As we hit the 1990's and computers became much more commonplace in the home, the average Joe became a more critical factor.  Apple recognized the need for point-and-click ease of use and simple configuration.  The Mac Classic became quite popular for people that wanted a machine that was simple to use and not quite so "techy."

The straw that ultimately broke the proverbial camel's back, I'm certain, is the proliferation of the web as a popular platform for distributing and maintaining information, entertainment, tools and any combination of the three.  Now we have engineers, users, designers, data people, games people and most other types of people you can imagine, all interacting.

User experience has become paramount in conveying anything through the human interface staring you in the face right now.

So, what is user experience? In short, it's precisely what it sounds like.  It is the experience that a user has while interacting with things around them.  This is really important, as William Tschumy says, because there is no choice of having or not having an experience.  Every user has an experience.  The question is, was the experience good or bad?

Designers have the demands of user experience placed directly on their shoulders.  They carry the social albatross of ensuring the user has a great experience and they dictate what can be seen, heard and interacted with.

Though designers are often blamed when Ux goes awry, it is typically not their doing alone.  Even if a designer is the best of the best, if you have an engineer that is not focused on carrying through with solid execution, the best designs can be laid waste by the mere use of a keyboard and an engineer.

In the end, everyone who touches a project that will be seen by a user, and that is most projects, is responsible for the end experience the user has.  In the end, the thing that will set your product apart may not be the features it does or does not have, but the way the user interacts with them.

If you are presenting information, ensure your user gets to the information quickly and easily.  Ensure their path is scattered with signs and directions.  Find pitfalls and mitigate them.  This task is not for the faint of heart.

In the end, the day is gone when merely having an application that did something was sufficient for a business plan.  As the information age takes hold and rolls forward like a juggernaut, we find ourselves as businesspeople, as doers, in the age of the user.  If you embrace the user and make things as pain-free as possible, you will do well.  If you do not, you may fossilize right next to that old Commodore 64.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2010-01-26 14:17:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-26 22:17:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[user-exwhatience]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yaledrb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[a4d0e2b341b5e285cac5cb0b45890c52]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446577;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:321;}i:1;a:1:{s:2:"id";i:233;}i:2;a:1:{s:2:"id";i:87;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creativity Kills</title>
		<link>http://www.chrisstead.net/archives/132/creativity-kills/</link>
		<pubDate>Fri, 29 Jan 2010 17:00:56 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[People are creative.  It's a fact of the state of humanity.  People want to make things.  It's built into the human condition.  But there is a difference between haphazard creation and focused, goal-oriented development.

Andy Rutledge states that <a href="http://www.andyrutledge.com/creativity-is-not-design-test-2.php" target="_blank">creativity is not design</a>.  I agree with him.  Creativity alone does not solve problems.  Creativity, when allowed free reign, is as much a destructive force in business projects as it could be a productive partner.

Creativity can be a great driver for new ideas, but when creative focus  remains the primary focus, the end product is bound to suffer.  Web sites can prove a noteworthy breeding ground for creative direction overriding good problem solving.<!--more-->

I will avoid mentioning any sites that I have found which are better macaroni and finger-paint project than they are solutions to existing problems.  I tend to agree with <a href="http://www.sensible.com/" target="_blank">Steve Krug</a> that it is hard to make a really effective site and easy to botch the job.

Andy Rutledge has already said quite enough about creativity versus visual design that I don't feel I should elaborate any further.  There are plenty of other aspects of a project that people get slick and tricky with.

Visual elements within a design can be a killer when you have someone that wants to expend lots of time being creative.  Regardless of the fact that the visual elements on a site can be referred to as artwork, it is not art like they have in your local coffee shop.

Before I started working at my current company, there was a designer that was interested in photography.  When working on a particular marketing folder, he spent weeks creating a set, cutting out styrofoam letters and shapes.  He set up backdrops and lights.  Eventually he came away with just the right shot.  Truth be told, it looked so perfect I swore he rendered it in a 3D imaging program.

The problem is he was more focused on being creative than working on business needs,  The folder he created looked nice but it was far too costly in time and salary.  Creativity can be a major expense on a project for only a small improvement, if there is improvement at all.

Even if your designer stays sharp and focused, other issues can arise.  Copywriters can get creative, which can be as detrimental to the message as any overwrought design.  A good copywriter will stay focused on company goals, speak in simple language and cut straight through the goals of the business.

Bad copy can take a good design and tell your user that the company looks great on the outside, but suffers from a lack of direction on the inside.  Creative copy can be painful.  Often, a creative writer is going to show their love of the language so they will use too much of it.  Focus and simplicity is key.

The last problem I am going to bring up, though there are a large number of other issues that arise out of overly creative thinking, is creative development.

Development involves anything from site hierarchy and architecture to coding and various other elements which make the site recognizable as an interactive information machine.

When an information architect or user experience designer/developer allows creativity get in the way of focusing on the user, the results can be disastrous.  The site flow will suffer and navigation will become obvious to the user.

Obvious site navigation and structure is painful.  The user notices because they find themselves frustrated and lost.  Lost, frustrated users leave, never to return.

Finally, the engineering development which goes into the site must be clear.  Problems must be solved in a clean, thoughtful way, but creativity cannot drive this aspect of the project.

One of the most detrimental things to a project life cycle is a creative engineer.  Engineers that are being creative first and solving problems second are engineers looking to add unnecessary features.

The cliche of the feature-happy engineer comes from a creative engineer.  Good engineering requires a smart, creative problem solver.  The key is solving a problem.  If an engineer is allowed to create a solution that lacks a problem, the engineer is guaranteed to derail your project as fast as you can imagine.

In the end, business solutions require a clever, focused team.  Creativity should be harnessed and directed toward solving existing problems.  When creativity is allowed to run rampant in a business environment, the results can be damaging to the user experience and the business image.  Go forth, solve problems and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2010-01-29 09:00:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-29 17:00:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creativity-kills]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Creativity, when used to solve problems, can offer smart new solutions.  When creativity rules over business function, solutions suffer.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ycdabb7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[07c8a609debe0c566ddf9ac20cab71f4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446547;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:340;}i:1;a:1:{s:2:"id";i:196;}i:2;a:1:{s:2:"id";i:263;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Marco]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[marco@i-marco.nl]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.i-marco.nl/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[209.131.62.115]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-29 09:48:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-29 17:48:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The biggest problem with creativity is that everybody has it, to a certain extent anyway. When it comes to design and UI literally everyone has an opinion about it. Like I saw someone say on Twitter the other day: "Everybody is an armchair designer". Very true.

When a company / project group allows all these 'armchair designers' to have a say in the project the whole thing tends to end up in an epic mess.

Things get even worse when people with power (execs, sr. managers) push their 'creative ideas' through and have them implemented because most designers don't have the balls to tell their superiors to stick it where the sun don't shine.

I see this happening. A LOT.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.239.96.113]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-29 10:18:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-29 18:18:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Marco

You're absolutely right.  Steve Krug addresses this issue in "Don't Make Me Think," and points out what each party has in mind for a single project.  I've run into this several times with various project here.  Everyone wants to steer the boat and people need to learn when it helps and when it's just getting in the way of business.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The Browser Clipping Point</title>
		<link>http://www.chrisstead.net/archives/143/the-browser-clipping-point/</link>
		<pubDate>Mon, 01 Feb 2010 17:00:15 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[Today, at the time of this writing, <a href="http://googleenterprise.blogspot.com/2010/01/modern-browsers-for-modern-applications.html" target="_blank">Google posted a blog</a> stating they were dropping support for old browsers. They stated:

<blockquote>
The web has evolved in the last ten years, from simple text pages to rich, interactive applications including video and voice. Unfortunately, very old browsers cannot run many of these new features effectively.
</blockquote>

I made a case to move in the same direction at my company less than a month ago.  I reviewed the visitor statistics and discovered less than 10% of all visitors to our sites use Internet Explorer.  Months ago, <a href="http://about.digg.com/blog/much-ado-about-ie6" target="_blank">Digg posted a blog</a> asking whether they should block Internet Explorer 6 from viewing the site.  Their statistics represented similar numbers to our own.<!--more-->

This would be a fairly radical move as blocking someone from viewing a site seems like a fairly aggressive move on Digg's part.  My proposal was much more relaxed and forgiving.  I proposed that I upgrade Internet Explorer on my computer and stop supporting version 6.  This doesn't mean I plan to block people from the site if they haven't upgraded, it just means I've consciously deprecated their choice.

A while back, I posted <a href="http://www.chrisstead.com/archives/21" target="_blank">a blog about browser wars</a> and how people were behaving on the web.  I would never condone a conscious exclusion of one visitor or another simply to support my favorite browser.  This is unfair and, moreover, can alienate the user in a way that will discourage people from ever returning to my site, even if they opted for my preferred browser.

I am certain someone is asking why 10% is a good threshold for clipping browser support.  I assure you, the number is arbitrary.  Some people may want to choose a higher or lower number, depending on what their audience needs.  Regardless of the particular number, the important thing is the direction the percentage is headed.

When Firefox first hit the market, to say it wasn't interesting as a browser because it didn't have a large enough market share would have been perceived as foolish.  Firefox use was on the rise, so catering to the users would have been in the best interest of all involved.

Internet Explorer 6 use is on the decline and the dropoff is getting steeper.  As users buy new computers and upgrade their software, IE6 gets wiped out.  Moreover, Microsoft started campaigning years ago for users to upgrade to a newer version of Internet Explorer.

Something of note, Internet Explorer has been around for almost a decade now.  As technology moves forward, IE6 only becomes more obsolete.  One of the easiest examples to point to is the support for alpha-transparency PNGs.  IE6 renders PNGs with alpha transparency with a blue background.  Unless your site is already the particular shade of blue which is rendered, the transparent graphics are going to look cludgy and out of place on your site.

Other items of note, which are important to developers more than users, are things like new Javascript technologies and updated CSS specifications.  As these technologies improve and grow, IE 6 will continue to to seem more and more obsolete, much like how IE5.5 appeared after IE6 hit the market.

To be fair, there are other old browsers which also fall down when pushed to render web sites using new technologies.  The difference is, new browsers have built-in functions to test for updates.  IE6 is old enough that Microsoft didn't think to build that kind of functionality.  They relied on users going to the Microsoft website and upgrading by hand.

In the end, we have reached a breaking point.  Old browsers which are no longer supported, even by the company that built them, will eventually need to be clipped from the support regime that so many companies and individuals adhere to.  Instead of blocking them, however, try the gentler approach of simply forgetting about them and letting them fade into the past.  Be kind to your users, give them a gentle nudge to update and upgrade.  Never push them off the cliff.  Be aware of the browsers you support and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2010-02-01 09:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-01 17:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-browser-clipping-point]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ydtb9oq]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[101152c795b273c6decd370d10343e97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Old browser support is critical for graceful degradation, but a threshold should be set to deprecate the oldest versions.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551664384;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:21;}i:1;a:1:{s:2:"id";i:180;}i:2;a:1:{s:2:"id";i:454;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mapping the Course: XML Sitemaps</title>
		<link>http://www.chrisstead.net/archives/154/mapping-the-course-xml-sitemaps/</link>
		<pubDate>Tue, 02 Feb 2010 17:00:14 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[I just read a short, relatively old blog post by David Naylor regarding why he believes <a href="http://www.davidnaylor.co.uk/why-an-xml-sitemap-is-bad.html" target="_blank">XML sitemaps are bad</a>. People involved with SEO probably know and recognize the name.  I know I did.  I have to disagree with his premise, but agree with his argument.

I say XML sitemaps are good!

The real issue with XML sitemaps does not lay in the technology but the use.  If a site is well designed, well developed and has a strong information architecture, it should spider well and indexing should occur.  Moreover, if the HTML/XHTML supporting the information on the site is well formed, the site should get decent rankings.  This is where I agree with David.<!--more-->

I disagree on the grounds that there is nothing XML sitemaps do that other SEO best practices won't do.  There is one clear item on this docket.  Update frequency.  There is no better tool I know of for announcing update frequency than an XML sitemap.

Within the standard for sitemap generation, update frequency can be denoted.  By setting the update frequency appropriately, the spider will have an indicator to how often it should visit.  This is really important in assuring that a spider will revisit your site and pick up new pages regularly, especially for new sites.  Established sites may not suffer from the same kind of crawl frequency, but even there, it is good practice to make things as easy for the search spider as possible.

While we are on the topic of unique features, XML sitemaps also offer an opportunity to reinforce your navigation hierarchy.  Page priority can be specified, giving the search engine an early indicator to what will be found in the site.  Search spiders dislike hunting through site links to discern information for which they could, otherwise, have a pre-set baseline.

It should be stated that XML sitemaps, when held isolated, do not cure all ills.  They are merely one more tool in the locker that allows a site to grow and benefit from good search ranking.  When sitemaps are coupled with strong content, good code, description tags, thoughtful information architecture and careful navigation, they can only be a boon to your site.

When used correctly, an XML sitemap will drive search spiders to key pages faster and ensure early indexing of the entire site.  Once this initial indexing is managed, it is up to the people who maintain the site to ensure that the path is clear to access information across the site.

Ultimately, David does not argue against sitemaps but, instead, chooses an easy target like poor navigation and concludes that because there are users that don't use a sitemap properly, the technology must be bad.  This is disappointing as it seems to lead potential SEO professionals astray.  XML sitemaps are your friends and when treated with the kindness and care a friend deserves, they will only be a boon to your site.  Build your site well, use sitemaps intelligently and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2010-02-02 09:00:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-02 17:00:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mapping-the-course-xml-sitemaps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[XML sitemaps are an important tool in your SEO arsenal. Regardless of their independent weakness, XML sitemaps provide a solid SEO foundation.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ygz75q8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[05c420a317fe632d6f0fe9bd5daf760a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551446654;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:26;}i:1;a:1:{s:2:"id";i:329;}i:2;a:1:{s:2:"id";i:57;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Communicating With Source Code - Naming</title>
		<link>http://www.chrisstead.net/?p=1222</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1222</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1222</wp:post_id>
		<wp:post_date><![CDATA[2017-10-27 12:36:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Predictive User Self-Selection</title>
		<link>http://www.chrisstead.net/archives/166/searching-for-user-self-selection/</link>
		<pubDate>Thu, 04 Feb 2010 17:00:14 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[Some sites, like this one, have a reasonably focused audience. It can become problematic, however, for corporate sites to sort out their users, and lead them to the path of enlightenment.  In the worst situations, it may be a little like throwing stones into the dark, hoping to hit a matchstick.  In the best, users will wander in and tell you precisely who they are.

Fortunately, users often leave hints as to who they are without knowing it.  They (hopefully) travel through your site, touching certain pages and avoiding others.  They also arrive from somewhere.

When trying to select your user and direct them, your initial response may be to directly ask them who they are and what they want.  This works well if you are an e-tailer like Amazon, but the rest of us don't have quite the same luxury.<!--more-->

If you are planning on selecting the user once they get to your site, you are already too late and they have left.  You should know something about them before they every arrive.  This, surprisingly, is not just about knowing your audience.  It's also what they can tell you.

Yes, your users choose to tell you something before they arrive at your site.

To learn about your users sub rosa, you need look no further than the HTTP referer.  From the HTTP referer, you can find out where your user came from and, hopefully, something about what they want.

If your user accessed your site directly, you know they are either a returning visitor or they were recommended by someone.  If they arrived at a landing page, it is, undoubtedly, due to some marketing effort.  This, however, says the least about the user.

If they came from another website and not a search engine, you'll know they were reading another site related to yours.  Perhaps this is a competitor.  Perhaps this is a colleague.  Either way, you know they have come to your site because they are interested in the link they clicked through to.

The most directly informative method a user can use to access your site is through search engines.  You can gather, immediately, that your user was interested in something directly related to your site.  You also know your user is actively seeking something.  Finally, your user told the search engine what they wanted and, subsequently, they told you.

How?

The HTTP referer.  The referer is passed with every GET request and tells the server about where you have been.  Don't get ahead of yourself.  The referer only informs you of the last place your user was.  In our current case, a search engine.

The big four search engines, AKA Google, Yahoo, AOL and Bing (MSN), all use get arguments to store information about the current search.  This makes it easy to clip the information you want, like a coupon, from the HTTP referer string.

<strong>Note:</strong> The next bit of this discussion involves a little code.  If you're not comfortable with programming in the popular language PHP or this just isn't your job, copy and paste the following into an e-mail and send it to your developer.

In PHP, you can collect user referer information with the following line of code:

<pre class="brush:php">
$referer = $_SERVER["HTTP_REFERER"];
</pre><br />

Once you have the referer stored, you can test it against the big four.  One way of doing this might be like the following:

<pre class="brush:php">
$refererType = "other";
$searchEngines = array("aol", "bing", "google", "yahoo");
foreach($seachEngine as $value){
     if(preg_match("/$value/i", $referer) !== false){
          $refererType = $value;
          break;
     }
}
</pre><br />

Now we've got the search engine they used and a referer string.  This is prime time for extracting their search query and figuring out who your user really is.  Hopefully this won't turn into a Scooby Doo episode, where Old Man Withers is haunting your site.  Let's do some data extraction:

<pre class="brush:php">
$queryKey = ($refererType == "yahoo") ? 'p' : 'q';
$pattern = "/(\\?|\\&)$queryKey\\=/";
$argStart = preg_match($pattern, $referer) + 3;
$argLen = preg_match("/(\\&|\\$)/",
     $referer, $argStart) - $argStart;
$arg = urldecode(substr($referer, $argStart, $argLen));
$argArray = explode('+', $arg);
</pre><br />

Still with me?  The code part is over.

Now that you have the search information and it's been broken into happy, bite-sized chunks, you can use it to do all kinds of fun things with your user.  You can check their spelling, to ensure they are in the right place.  You can offer special links that relate to what they searched for.  You can even adjust the page to better suit the user's needs.

The possibilities are limitless.  By knowing a little about what the user did before they arrived at your site, you can direct their journey through your site.  It is in your hands to find interesting and creative uses for this information.  Go and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2010-02-04 09:00:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-04 17:00:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[searching-for-user-self-selection]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ya6hgal]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[b7341f6e2c1c15457950e014c10cc5a9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Predicting future user behavior can be made easier by utilizing HTTP referers.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551439574;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:226;}i:1;a:1:{s:2:"id";i:429;}i:2;a:1:{s:2:"id";i:304;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>User Experience Means Everyone</title>
		<link>http://www.chrisstead.net/archives/180/user-experience-means-everyone/</link>
		<pubDate>Fri, 05 Feb 2010 17:00:12 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[I've been working on a project for an internal client, which includes linking out to various medical search utilities.  One of the sites we are using as a search provider offers pharmacy searches.  The site was built on ASP.Net technology, or so I would assume as all the file extensions are 'aspx.'  I bring this provider up because I was shocked and appalled by their disregard for the users that would be searching.

This site, which shall remain unnamed, commits one of the greatest usability crimes I've seen: they rely only on Javascript to submit their search.  In order to give you, dear reader, the scope of the issue, I always test sites like these by disabling Javascript and testing the function again.

The search stopped working.<!--more-->

Mind you, if this was some sort of specialized search geared toward people that were working with Javascript technology, I might be able to see requiring Javascript in order to make the search work properly.  Even in circumstances like the aforementioned search, shutting down the search with Javascript disabled is still questionable.

This, however, is a search for local pharmacies.

Considering the users that might be searching for a pharmacy, we can compile a list.  This is not comprehensive: the young, the elderly, the rich, the poor, sick people, healthy people, disabled people and blind people.  I'll stop there.

Let's consider a couple of select groups in that list, i.e. the poor, the disabled and the blind.  The less money you have the less likely you are to buy a new computer if your old one still works.  I know this sounds funny, but I've seen people using Internet Explorer 5.5 to access sites in the insurance world.  Lord knows what other antiques they might use to access a site.  Suffice to say, people with old computers may not support the AJAX calls made by an AJAX only search.

Let's, now, consider the two groups who are much larger than the  IE 5.5 crowd: the disabled and blind.  I separate these two so we can think about different situations for each.

First, the blind.  Blind people use screen readers to view web sites. Though I am unsure as to the latest capabilities of screen readers, but the last time I did reading about screen readers for the blind, I was brought to understand that their experience is a little like using Lynx.  See a screencap below to get an idea of what Lynx is like.

[caption id="attachment_182" align="alignnone" width="300" caption="ChrisStead.com on Lynx"]<a href="http://www.chrisstead.com/wp-content/uploads/2010/02/lynx1.png"><img src="http://www.chrisstead.com/wp-content/uploads/2010/02/lynx1-300x210.png" alt="ChrisStead.com on Lynx" width="300" height="210" class="size-medium wp-image-182" /></a>[/caption]

As you can see, browsing for the blind is kind a no-frills venture.  No CSS, no Javascript, no imagery.  Since many of them can't see what you have made available, (yes, there are varying degrees of blindness) they have to rely on a program to read the screen for them.  This means, pages that rely on Javascript for core functionality are out of reach for these users.

In much the same way, disabled users may have a limited set of functions they can access within their browser.  This will depend on the degree of disability and the breadth of function on their browser.  I can't and won't say what a disabled browsing experience is like since I am not disabled and the experience varies so widely it's not possible to pin down what the overall experience is like.  Suffice to say, it is limited.

Now, the reason I mentioned the site was built on ASP.Net:  For whatever reason, the sites I see with the worst usability almost always seem to be built on ASP.Net.  I have a hard time wrapping my head around this, as I've built ASP/C# apps and had no problem building the core functions to operate with or without Javascript enabled.  Everything you need is right at your fingertips.

From sites that require users to be on a windows machine using the newest version of Internet Explorer, to web apps that require users have Javascript and images enabled just to navigate the core functions, ASP sites often seem to be bottom of the barrel.

Perhaps it is a group of people that are used to developing for desktop apps and haven't had to consider usability in the modern age of the web.  Perhaps it's novice developers that don't understand some of the core concepts that go into building successful web applications.  Either way, the current trend of ASP disabled-inaccessibility must come to an end.

To the ASP.Net developers of the world, I implore you to reconsider your development goals and meet the needs of your customers.  To the rest of you that may be committing the same sins in another language, I beg you to be considerate of all of your users, instead of a select group.  Think about usability for a degraded experience, build accordingly and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2010-02-05 09:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-05 17:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[user-experience-means-everyone]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-dot-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Usability in a degraded web environment seems to suffer under the iron fist of ASP.Net.  We, as developers, are the last defense for usability.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/y89wlld]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[7e9806755d31d493aa2f3515e63b4230]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551457437;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:321;}i:1;a:1:{s:2:"id";i:226;}i:2;a:1:{s:2:"id";i:247;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pretend that they&#039;re Users</title>
		<link>http://www.chrisstead.net/archives/196/pretend-that-theyre-users/</link>
		<pubDate>Tue, 16 Feb 2010 17:00:32 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[Working closely with the Creative team, as I do, I have the unique opportunity to consider user experience through the life of the project. More than many engineers, I work directly with the user.  Developing wireframes, considering information architecture and user experience development all fall within my purview.

Typical engineers, on the other hand, live in a world separated and buffered from Creative and, subsequently, the user.  They work with project managers, engineering supervisors and other layers of businesspeople that speak on behalf of the user, alienating the engineer from the world they affect.

It becomes easy to dissociate and refer to the user as clients and eventually abstract the interaction by focusing on the system and the software client that will interact with the functions being built.  People as users become a vague notion that is hardly considered as functional pieces are built and pushed out.<!--more-->

This is an unfortunate circumstance as engineers exist solely for the purpose of building and supporting systems that people, somewhere, will be interacting with.  People use computers. People use programs.  People use web sites.

Even when working with Creative people, I still find myself getting lost in the code and forgetting that I eventually need to be able to interact with the user.  I work on items that stimulate my brain, but don't actually solve the user needs.

A popular design pattern on the web is <acronym title="Model View Controller">MVC</acronym>.  I prefer this pattern myself.  There are pitfalls in any pattern, but MVC allows me to work on three separate items in parallel.

My most recent, major project was constructing a content management system.  I built this on Cake PHP.  Cake is built around the idea of constructing the entire project on MVC principles.

The thing that happened as I built the system was I constructed an interface for the user to play with, first, then I built supporting architecture.

Recently I had a discussion with a friend of mine, he brought up the idea of constructing screens to show the user, first, then building the support system afterward.  Funny how things seem to work out like that.

The point of all this is simple: engineers need to pretend like the clients are users, because they are.  When building a function into a system, the engineer should ask, "how will this impact the user?"

Another way of stating this is, everything an engineer does, even at the deepest level of a system, will impact the user and their experience.  From speed, to clean integration with a client-side interface, every line of code is important to the user.

The most important thing to keep in mind is that we are no longer in a world where bare forms and featureless landscapes of system interfaces are acceptable.  Users don't want to be reminded they are working on a machine built to do math really quickly.

Users don't want to see an interface that is a direct expression of code, they want a smooth, human-like experience that leaves them with a feeling of satisfaction and ease.

Depending on how you view this challenge, it is either fortunate or unfortunate that building a system that anticipates user needs requires careful consideration and, potentially, more code.

The age of engineers that build programs in C and COBOL, which run exclusively on the command line is done.  Engineers in the new era must be user-aware.  They must anticipate user difficulties before they happen and prepare to guide the user, in a smart way, through the minefield

Current-era engineers are the gatekeepers to the computing experience.  They hold the keys and empower the user to build confidence and manage the experience they have in a natural way.

Instead of being a guard, keeping common man out, be a host.  Encourage your users to click, type and interact.  Give them a wonderland.  Pretend that they're users, treat them like people and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2010-02-16 09:00:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-16 17:00:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pretend-that-theyre-users]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Engineers are often abstracted from the end user so, user experience is an afterthought for them. Engineers should aim to be more user-focused.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/y8w63bs]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[35a5b6e6fd4a8a755ad49b1b6fe63266]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551445395;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:132;}i:1;a:1:{s:2:"id";i:896;}i:2;a:1:{s:2:"id";i:340;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Carrie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[carrierawks@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.carriethe13th.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[76.212.149.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-16 22:38:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-17 06:38:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Errr I meant hippie! Yes I know I know I rule!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Carrie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[carrierawks@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.carriethe13th.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[76.212.149.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-16 22:36:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-17 06:36:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You are the internets first web hippy! Next your going to say "Now everyone hold hands..." LOL :-P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Website Overhaul 12-Step Program</title>
		<link>http://www.chrisstead.net/archives/211/website-overhaul-12-step-program/</link>
		<pubDate>Mon, 22 Feb 2010 17:00:55 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[Suppose you've been tasked with overhauling your company website.  This has been the source of dread and panic for creative and engineering teams the world over.

Some people, in the panic and shuffle, opt for the fast-and-loose approach.  They start throwing anything they can at the site, hoping something will stick.  Anything means ANYTHING. All marketing ideas go in the bucket, then the executive mandates, the creative odds and ends, some engineering goodness and all of that.  This almost always results in a disaster.

Others look to collect everything that people want and need, do a ton of marketing research and then follow that up with user testing.  Though this may lead to a usable site, this method probably won't generate a site that actually solves user needs.<!--more-->

There are various other permutations on these ideas, including the design by committee, the hire a specialist and the design by marketing requirements approaches.

After suffering through most of these approaches, I devised a plan that is reasonable, easy to execute, offers answers to common questions.  If executed, this will provide a smart, well designed, user-oriented site which also fulfills business needs.

I call my plan the Website Overhaul 12-Step Program.  Let's dive in.

<strong>Step 1: Install analytics and do nothing for three months.</strong>

This doesn't mean don't do standard updates to information and common, day-to-day operations.  I simply mean, don't design. Don't workflow. Don't create nav structures and hierarchy and all of that. Just sit on your hands and wait. For. Three. Months.

<strong>Step 2: Review Analytics Data and Collect Client Needs.</strong>

Once you have let the analytics bake for three months, review your results.  Sometimes they back up what your marketing team is pushing for.  More often, there are little surprises and gems you'd never anticipate.

Look for commonly viewed pages.  Review common search terms.  Watch for people seeking names, phone numbers, account data or anything else that might seem odd in a search.  All of these items can give you insight into your user.

While reviewing your analytics data, collect stakeholder ideas, information and requirements.  Include this information in your concerns moving forward.  Be sure to balance your findings and temper stakeholder information with your analytics findings.

<strong>Step 3: Create an Information Hierarchy.</strong>

I don't care what you think your navigation should be, think about the information you have and create a hierarchy of relations.  Which documents are gateways to information?  Which information is subordinate to other information?  This is all useful in developing an information hierarchy for your site.

<strong>Step 4: Develop Core Navigation.</strong>

Now that you have your information hierarchy and months worth of synthesized analytics data, you can start developing your core navigation.  Think about what your users need and what your marketing team wants to accomplish.  Apply everything you know here.  Think about taxonomy and make sure you have navigation consistency, both in vocabulary and in behavior.  This is your first move in actually creating a site.

During your core navigation development, you should start using tools like card sorts and thesauri to solve copy concerns and ensure clear language and categorization.  If need be, you can reassess your information hierarchy at this step.

<strong>Step 5: Uncover Special Needs Navigation.</strong>

This does not mean you need to start thinking about accessibility right now (though accessibility is VERY IMPORTANT).  This means, you need to consider items which don't fit in your core navigation structure, but answer questions your users have.  Assess user special, non-core, needs and address them here.  Make a list and associate the special needs navigation with specific pages.

<strong>Step 6: Wireframes.</strong>

Now that you have your navigation structure laid out and your special needs listed, you are ready to start creating a visual guide for the layout of the site.  Consider your user, what they look for most, what they look for least and consider <a href="http://chrisstead.posterous.com/fittss-law-and-the-steering-law" target="_blank">Fitts's Law</a>.  Think about scanning behaviors.  Build something that begs to be clicked on, even when it's printed and bound.

Standard (and not-so-standard) user testing should happen here.  Be sure to develop your wireframes with the correct granularity for your audience to ensure they don't get stuck in the mud of details that are unimportant at this stage.

<strong>Step 7: Design.</strong>

Once wireframes have been created and approved, pass the site along to the design team for their magic touch.  Let them bump, nudge and finesse your wireframes into a compelling presentation.  If you work carefully with your design team, they can take genius and bring it to life. Let them.

<strong>Step 8: Develop Templates.</strong>

Volumes could be written on the topic of templates and content management systems, including my notes on <a href="http://www.chrisstead.com/archives/112" target="_blank">Object Oriented Content</a>.  For now, let's simplify the idea and say, templates are good. You should use them.  They will make your life easier in the short and long run. Now is the time to build them.  Include all of the design goodies from step 7.

<strong>Step 9: Implement Site Structure.</strong>

Once your templates are built, using all of the designs produced from your previous work, you are ready to start implementing your site structure.  If you created solid templates, this step should be fairly simple and straightforward.  Take advantage of the separation between your templates and your content.  All your content should drop in and you can make tweaks to your presentation. You're getting close.

<strong>Step 10: Test and Bug-Fix.</strong>

Once you have implemented the site structure, begin testing the site.  Send it through QA. Look for broken links.  Look for bad content.  Find items that will be a deal-breaker for your users and repair it now.  Ultimately you don't want your user to find the flaws that you already thought of.  Be aware and move forward in a smart way.  By now, you should have already gotten stakeholder buy-in so they should not still be in the mix unless they are core to user testing.

<strong>Step 11: Deploy.</strong>

Once you have the final seal of approval from your testers, you should feel confident your site is ready for the prime-time.  Launch it and let your users have a crack at it.  Give yourself a pat on the back, your site is live.

I'm sure you're wondering why everything launched at step 11, since this is, after all, a 12-step program. Well...

<strong>Step 12: Watch Analytics for New Trends.</strong>

Now that your site is live, watch for new trends in your analytics data.  Are your users getting their questions answered or are they still having difficulties?  Are your users visiting new pages?  Is everything still working or are you experiencing technical issues?  All of this will appear in your analytics data, so keep an eye out.

There are many small steps that fall within the scope of this 12-step process, but it is up to you to ensure you implement your specific needs and tests.  If your stakeholders need you to keep them in the loop, make sure you let them know your process so you can get their input when it is going to be most useful.

Make sure the people involved in the process feel confident about your moves and get buy-in at the right times to facilitate a swift, fluid move through the process.  If you move forward with confidence, you will be a hero to your coworkers and a champion of your users.  Take control, build confidence and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2010-02-22 09:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-22 17:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[website-overhaul-12-step-program]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ybbf6av]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[04f634223c1f60148b7fffb5fe950f35]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Doing website overhauls can be stressful at best and a disaster at worst.  These are 12 steps to live by as you roll out your updates.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551497700;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:132;}i:1;a:1:{s:2:"id";i:340;}i:2;a:1:{s:2:"id";i:57;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Carrie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[carrierawks@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.carriethe13th.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[76.212.146.248]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-22 13:12:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-22 21:12:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I remember you telling me about this. I might actually use this stuff. But 3 whole months! ARGH! lol Good points though seriously.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.239.96.113]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-22 14:45:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-22 22:45:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@ Carrie

Yep, three months.  You want a good, solid 90 days worth of data to work from.  I understand that some projects just won't allow for this.  Whenever possible, though, wait for three months at the least. This will ensure you have a solid set of information.

A lot can happen in three months and you'll get a good snapshot of all that. Marketing materials will go out, the season will change and you'll see three month-end periods cruise by.  Different actions will be triggered by these events.  You'll want to account for them.

All is not lost, however. If analytics has already been in place for three months or more, you can skip step one as you've already done it.  You can pull the data you've already collected (at least 3 months worth) and you can move to step 2 right away.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Degrading Behavior: Graceful Integration</title>
		<link>http://www.chrisstead.net/archives/226/degrading-behavior-graceful-integration/</link>
		<pubDate>Fri, 26 Feb 2010 17:00:26 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[There has been a lot of talk about graceful degradation.  In the end it can become a lot of lip service.  Often people talk a good talk, but when the site hits the web, let's just say it isn't too pretty.

Engineers and designers work together, or divided as the case may be, to create an experience that users with all of their faculties and a modern browser can enjoy.  While this goes down, the rest of the world is left feeling a bit chilly.

What happens is, the design starts with the best of intentions and, then, the interactivity bug takes hold.  What comes out is something that is almost usable when slightly degraded, but totally non-functional when degraded to the minimum.<!--more-->

In the end, of course, the user needs must be considered.  Having a graphically intensive site doesn't hurt if you are a design firm, but might not be the best option for a company dealing with medical customers.

My suggestion, however, is simple.  Instead of degrading your site as the user needs become greater, start with a site that is usable at the lowest common denominator and work up.

Understand who your audience is and prepare to serve those of them who have the greatest needs.  Build a site that is attractive and works if the user can only view it through a program that reads for them.

Once your site has been built and is fully functional, build up.  Integrate functions to serve the users that have some needs, but aren't in the highest-need area on the spectrum.

Continue on this path until you have integrated all of the latest and greatest, bleeding-edge functions that your highest-ability users can interact with.

As you build this way, be sure that you are simply enhancing the function that is already on the screen.  As you add enhancements, you should be able to remove them cleanly and still get the same experience you started with.

I call this approach graceful integration.  Each progressive step, you integrate more functionality and interaction, preserving the layer just below as a separate user interaction.

Each progressive enhancement should be separate and easily disabled.  The granularity of your enhancements can be as large as a two-step approach: all or nothing.  You may also enhance your site in a careful way that allows for several levels of degradation depending on the user and their distinct needs.

A natural separation of user interaction happens when HTML is written, CSS is added and Javascript acts upon the subsequent design.  This three-tier separation, you can use the work that will be done regardless to define your user interaction in a clean way.

One of the best quotes I've heard regarding graceful degradation, in paraphrase, is, "if you show it with Javascript, hide it with Javascript."  I offer this with no source as I can't recall where I heard it.  If you know/are the author of this, stand up and reap the rewards.

The attitude in this quote represents the core of graceful integration.  As you pile the Javascript on, be sure you manage its behavior with Javascript.  Don't use CSS to manage something that is going to be handled with Javascript.  If you must, prepare a style sheet that defines scripted behavior, but set the object classes with Javascript.

There are other benefits you'll gain from this approach.  Not only will your users appreciate the time and care you put into their experience, so will the search engines.

As search spiders crawl your site, they won't see any CSS that looks to be doing something sneaky like hiding text from the viewer.  Spiders have gotten smarter and they recognize when something fishy is going on.  As you are already doing something good for your users, you get this bonus for free.

For those of you looking for snippets of code, the best thing you could know and rely on is the "noscript" tag.  This is a tag which defines the behavior of the page for users without Javascript.  I use this quote a bit to display extra form controls when Javascript has been disabled or is unavailable to the user.  You can use it like the following:

&lt;script type="text/javascript"&gt;
     //your script logic goes here
&lt;/script&gt;
&lt;noscript&gt;
&lt;!-- HTML elements go here like style definitions or form controls. -->
&lt;/noscript&gt;

You can also use noscript by itself scattered throughout the page to display page elements that might, otherwise, be missing for some of your users.

In the end, behavior on your site should be defined by the HTML first, the CSS second and the Javascript third.  Should you choose to go to a finer granularity, don't forget to double check your users can still use all of the layers effectively.  Be mindful of your users, integrate function into your site in stages and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2010-02-26 09:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-26 17:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[degrading-behavior-graceful-integration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[ERROR]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[34d76f292d36f15b3b603780221b7604]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551448166;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:466;}i:1;a:1:{s:2:"id";i:26;}i:2;a:1:{s:2:"id";i:300;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Didn&#039;t Expect THAT to Happen</title>
		<link>http://www.chrisstead.net/archives/233/i-didnt-expect-that-to-happen/</link>
		<pubDate>Wed, 03 Mar 2010 20:48:07 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[How many times have you been on a website and said those very words? You click on a menu item, expecting to have content appear in much the same way everything else did.  Then, BANG you get fifteen new browser windows and a host of chirping, talking and other disastrous actions.

Boy, I didn't expect THAT to happen.

You've fallen prey to a violation of what I call page-behavior taxonomy.  In short, page-behavior taxonomy is a set of rules that certain items must follow when they perform an action or page-behavior.  Wikipedia does a reasonable job of telling the user what they should expect after they perform an action as each type of link looks a certain way.<!--more-->

In the current age, a typical website has links that behave in all kinds of ways.  Some links move the user to a new page. Some links display information inline. Some links move the user away from the site altogether.  The user anticipates the behavior of a link based upon page context and presentation.

Each of the links on a page fall under a particular taxonomical definition.  The written list of taxonomical definitions is all but hidden to the user.  In the best situations the taxonomy can be used to define the user journey and experience, creating a smooth flow of content from the web to the user.

The most common page-behavior taxonomy I use categorizes links into the following groups: inline content links, intra-website content links, extra-website content links, object display links and other javascript behavior.

When the taxonomy is considered, the user will understand the function of a link given the context they discover it under.  This means, if they see a calendar icon next to a date entry field, they won't be surprised when they click the icon and a calendar pops up.  It relies on expectation of the user and the fact that the link was part of the "other javascript behavior" kingdom.

What brought this discussion about was my discovery of a set of tabs that violated the page-behavior taxonomy.  I won't provide the site because they were giving away a script to let others recreate the effect. We discourage bad Ux around here.

The tabs I encountered were <acronym title="Asychronous Javascript and XML">AJAX</acronym> enabled.  This means the user clicks a tab and the content is requested and displayed inline.  I was generally okay with the behavior.  It was something the user could reasonably anticipate or even be pleasantly surprised by.  I didn't see any way for the tabs to degrade gracefully, but I won't go into that now.  

As I clicked through the tabs, I had a nice, consistent experience.

Click -> content,
click -> content,
click -> content.

Then I clicked the last tab and my browser window was hijacked.  I was sent off to a new page entirely. I didn't know where I was. I didn't know what I was supposed to gain from the page.  I was lost.  All I wanted, after that, was to go home.

The designer had kept me distracted while the developer got behind me and crouched.  The designer pushed and I fell over.  I felt betrayed.  How could my friend, the designer, or my colleague, the developer, play such a dirty trick?

This sentiment is shared by users when they visit a site that tricks them.  The user, in the end, feels they were somehow dealt an unfair hand.  They feel betrayed.  They lose faith. They leave.

The important item to note is, no single person is responsible for this kind of manhandling.  First, the UxD has to betray the user by not telling them something is going to happen.  Then the developer has to build a function to enable this kind of behavior.  In the end, both parties were to blame.

The solution to this is to build a taxonomy.  Consider the terms you will use.  Select copy that is meaningful to your user and use it consistently across your site.  Develop a list of page behaviors and implement them, projected against your taxonomical dictionary.  Make page-behavior rules clear to your user.  If you plan on surprising them, do it by understanding ease-of-use.

Carefully consider your link behavior and develop it against a backdrop of user understanding.  Make your site easy to use.  Think of your user and don't give them unpleasant surprises.  Construct a page-behavior taxonomy to structure your site around and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 12:48:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 20:48:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-didnt-expect-that-to-happen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ygnza8h]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[637f520ed306a8d94dc5a171c18dda42]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551445441;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:602;}i:1;a:1:{s:2:"id";i:211;}i:2;a:1:{s:2:"id";i:321;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Almost Pretty: URL Rewriting and Guessability</title>
		<link>http://www.chrisstead.net/archives/247/almost-pretty-url-rewriting-and-guessability/</link>
		<pubDate>Mon, 29 Mar 2010 08:00:10 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[Through all of the usability, navigation, design, various user-related laws and a healthy handful of information and hierarchical tricks and skills, something that continues to elude designers and developers is pretty <acronym title="Uniform Resource Locator">URL</acronym>s.  Mind you, SEO experts would balk at the idea that companies don't think about using pretty URLs in order to drive search engine placement.  There is something else to consider in the meanwhile:

The user.

Several articles I found talk about the SEO benefits of pretty URLs and whether it is very important to consider using them with a site as they don't encourage a major boost anymore. "It's ten years too late," they say.  It's never too late, I say.<!--more-->

Rather than bashing SEO experts that cry "content, content, content" let's look at content and wrap it up in an easy to guess URL the user can make sense of.  <a href="http://findability.org/" target="_blank">Peter Morville argues for findability</a>, meaning users are more likely to use resources which are easy to navigate. Moreover, users will naturally navigate to whatever <a href="http://en.wikipedia.org/wiki/Satisficing" target="_blank">satisfices</a> their information needs.

I wonder why users are forced to satisfice when pretty URLs make it much easier to satisfy by simple guessing.  Unfortunately, something that stands in the way of this guessability is the combination of SEO professionals considering pretty URLs as a lesser sin combined with technologies which stand in the way of smarter URL writing.

Actually, I don't necessarily wonder much, at all, why users are forced to satisfice when attempting to find something on a site through URL guessing.  Much of the available technology on the internet is fairly limited when looking at URL rewriting.

When working with PHP, Python, Perl or anything else that works well with Apache, rewriting is easy.  If you are working with Java or anything that runs under IIS, rewriting gets tricky quickly.  Some of the technology which lives under the skin of the web gets a little ugly when you want to start doing pretty things.  We'll talk about overcoming these obstacles soon.

See, here's the issue.  We really want to do URL rewriting, not maintenance-heavy URL trickery.  I came across <a href="http://www.sitepoint.com/blogs/2009/07/07/pretty-urls-pretty-easy/" target="_blank">an article about creating pretty URLs</a> which claims it is "pretty easy."  Technically it IS easy but the suggested method is to make a directory for every page and have a single index.php or index.html page in the directory.

Using this method is a one-way ticket to sites you'll have to manually manage forever.  If you are a maintenance thinker, this is fine.  If you want to solve the problem correctly, once and for all, you'll want to do a little URL rewriting, instead.

In case you are new to the idea of URL rewriting, here's a quick overview.  When someone arrives at a site using a URL of the following form:

<a href="http://www.chrisstead.com/search/url rewriting" target="_blank">http://www.chrisstead.com/search/url rewriting</a>

The server captures the URL which was used and then works a little magic, making it look more like the following:

<a href="http://www.chrisstead.com/?s=url+rewriting&submit=Search" target="_blank">http://www.chrisstead.com/?s=url+rewriting&submit=Search</a>

Which makes the whole URL much MUCH easier to manage and manipulate by, in this example, a PHP script.  There are a couple of different reasons we would want to do this kind of rewriting.  Let's take a look at them.

Note: Yes, those both work. Give them a try! 

Rewriting hides the underlying technology.  This might sound like a strange thing to want to do, but there is learning in my lunacy.  People interested in compromising your site will use any knowledge they can get to take advantage of common little flaws and loopholes.  By disguising what technology you are using, it sets up a roadblock, making your site less interesting to attack.  This isn't really what I wanted to write about, however.

Rewriting makes gives you the opportunity to make your URLs guessable.  If users start to notice a pattern in the way the URLs are structured, they can take advantage of the common themes.  This means it is easy for the user to guess how to get to something they want directly and just type the URL.  This might seem like kind of an obscure goal, but let's look at something a little more reasonable.

Suppose you are a music retailer.  If you write scripts to handle URLs like the following, your users might not be particularly keen on trying to guess how to rewrite things to find something else:

http://www.mymusicsite.com/query.aspx?s=records&key=LKIH8hi7iKJbkjykjBJ&artist=some%20artist

This looks a little intimidating to me and I know what I was trying to say.  Let's suppose you, then, rewrote URLs instead so what the user sees is this:

http://www.mymusicsite.com/search/some-artist

This looks a lot less intimidating and, better yet, your user knows precisely what happened without even looking at the results you present.  They typed "some artist" in the search box, which took them to a search page.  They then know how to type another artist in and get a result.  It would be even better if you capture the URL and replace the spaces with dashes for them, they can just type the artist name in and get what they want.

When the day is done, the SEO work, usability and findability could and SHOULD work together to create a site that is friendly to search engines as well as your users.  That single little string is the first, last and only direct link your user has with the underlying system that drives your website.

**Disclaimer**

If you are a designer reading my blog, you are welcome to stop here.  If you have concerns about URL rewriting, I encourage you to contact me and I'll address them.  Take what you have read and make the web a better place.  If you are comfortable programming in a web-friendly language, please read on!

**On with the code!**

That's great and all, but this doesn't really get us any closer to how you DO any of this rewriting.  There are, of course, barriers which get in the way of making this all happen.  See, if you are writing in PHP then you are probably serving everything with Apache.  This is great since Apache supports URL rewriting directly.  If you have any skill with regular expressions then you can work a little juju and be rewriting by this afternoon.  Your work will start and stop in the .htaccess file.

Common rules will look like the following:

RewriteRule (.*) /command/directory/index.php?$1 [L]

This was totally made up, so I can't promise it will work, but this is the basic idea.  Apache URL rewriting is a cryptic art that I have yet to master.  Fortunately, there are many people, much smarter than I, who can advise and direct your work.

Apache is the nice situation, however.  When we look at two languages used on the web, things get tricky really quickly.  The tools for rewriting get few and the machinations become more cumbersome.  I've encountered problems with each of the following.

ASP/ASP.Net runs on <acronym title="Internet Information Server">IIS</acronym> which does not natively support URL rewriting.  If you are interested in writing your own module or paying for something someone else has written for you, I give you my blessing.  However, this may not be an option for you.  Fortunately, you can still write URLs of the form:

http://www.mysite.com/Default.aspx?/my/ugly/url

Sadly, this probably cause more pain than anything else.  Java, through JSP, has much the same problem.  Unless you are running a Tomcat instance, hiding behind an Apache instance where you can rewrite your URLs nicely, your URLS at best will look like this:

http://www.mysite.com/index.jsp?/my/ugly/url

Once you have written your URLs like this, you can get slick and tricky with the code by simply doing the following:

<strong>ASP with C# code behind:</strong>

<pre class="brush:c-sharp">
String path = Request.QueryString.toString();
</pre>
<br />

<strong>JSP:</strong>

<pre class="brush:java">
String path = request.getQueryString();
</pre>
<br />

Now that we have gotten that little piece of ugly out of the way, let's look at a solution for that gorilla in the corner.  ASP and Java are typically only used to solve problems in a business environment.  This means your IT department probably has a router and a load balancer sitting between the world and their servers.  Enterprise routers are typically highly configurable, and can do quite a bit of rewriting work for you.

The most difficult part of getting your IT department to rewrite your URLs for you is convincing them it's worth the time and effort.  If you can provide them with precisely what you want the end result to be in your efforts, they can probably create the right rules and get everything situated fairly quickly.  Be ready to buy them beer.

In the end, pretty URLs, under the skin, are pretty ugly.  When it comes to getting your user to the site, moving them through your vast amounts of information and converting the visit into a sale or a return, the pain is worth it.  Just think about how much easier life will be for your users once you have taken the time to craft their journey even outside the carefully designed presentation of your website.  Think about URL rewriting and guide your user gently.  Make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2010-03-29 00:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-29 08:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[almost-pretty-url-rewriting-and-guessability]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-dot-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[1cdc624e4b5e68c556b8f3c8159ee53e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yfbh2af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_014e4bf260cf09f392c37588dbe63087]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_70e8a0736c0e3bf243c00dd31e194c16]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2a52e51a7a7c6cd618b6000eba35ea4c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a2c6f0713632d82b2204569c5b41ed20]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f457d238b617a11eefe62bc0827b75af]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d058da9486dfab971c3d8eea98f6f285]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d39bbf63d2cfce06eb99e4ba4f5bdcf7]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_aab0228be6f5fedcb66aa0d23db17bc2]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551439579;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:329;}i:1;a:1:{s:2:"id";i:211;}i:2;a:1:{s:2:"id";i:87;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Developing for Delivery: Separating UI from Business</title>
		<link>http://www.chrisstead.net/archives/256/developing-for-delivery-separating-ui-from-business/</link>
		<pubDate>Fri, 12 Mar 2010 18:47:58 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[With the advent of Ruby on Rails (RoR or Rails) as well as many of the <acronym title="PHP: Hypertext Preprocessor">PHP</acronym> frameworks available, <acronym title="Model View Controller">MVC</acronym> has become a regular buzzword. Everyone claims they work in an MVC fashion though, much like Agile development, it comes in various flavors and strengths.

So, what is really going on here?

The idea behind MVC as well as many other design patterns, is to break programming tasks into chunks and handle them independently.  MVC typically fills a need on the web as the view or <acronym title="User Interface">UI</acronym> is what the user ultimately sees and keeping it uncluttered makes life easier for the creatives to work their magic after the programmers have performed theirs.<!--more-->

Though frameworks typically make it easy to keep the models, views and controllers separate, programmers tend to get a little heavy with the code.  There is a project of which I know, and will remain unnamed, that incorporates business and model logic into all parts of the code.  This sets the developers up for two distinct issues:

Requirements change

Maintenance is a nightmare

First, we know that requirements change.  Someone is going to say "gee, I wonder if we could do x."  When it is an executive that says this, the whole sentence can be rewritten simply as "do x."  If the code is scattered across views, controllers and models then changing direction is kind of like redirecting an aircraft carrier.  You can do it, but it is slow going.

If the code is packaged into neat little controllers and the view is completely separate, then adding new function is much less labor intensive.  In the end, functions almost materialize before you, taking a task which could have been a month project and turning it into something which gets done in an afternoon.  The savings is tremendous.

Second, the maintenance nightmare.  There are many factors that come into play when writing maintainable code, but let's focus on the single aspect of good, modular practice.  When writing code, be it in an MVC design or some other separation scheme, putting together solid modules makes everything a little easier to maintain.

Imagine you have your same, scattered code.  A little of the work is done here.  Some of it is done there.  In the end, it takes fifteen files to get a job done.  Suppose something breaks. Don't say your code never breaks.

All code breaks.

Once something breaks, you have to maintain it.  Now, was that function here or was it over there?  What all did it do?  Where do I find it?

Perhaps you haven't touched that code in three years.  It happens.  You could spend a day just tracking down the bug, forget about fixing it.

Now, I don't want to make this all about MVC, because it's not.  This is about simply keeping the presentation separate from the business logic.  Perhaps your business logic is broken into 15 layers.  Great. Make sure that none of those layers is the presentation.

So, what does this have to do with delivery?

I'm glad I asked.

Rhetorical questions suck.

On the web there is one goal. Deliver content to the user.  I don't care who you are or what you do.  In the end you are delivering something to the user.  Sometimes it's e-mail. Sometimes it's a blog.  Sometimes it's a way for them to do their taxes.  It is all about delivery.

Users on the web are demanding.  They want it all and they want it now.  If there is a bug, they don't want to wait for the next five build cycles to see it fixed, they want it now.  The simpler you make things for yourself, the easier it is to get down to the business of delivery.

Another benefit you will see is the ability to quickly change direction.  If your creative team wants to completely redesign the website, it won't cost the rest of your life to make this happen.  You can keep all of the infrastructure you already have and simply make it look new.

I am currently working on a project using <acronym title="Java Server Pages">JSP</acronym>.  I am collecting website content from an outside source and presenting it within a JSP page.  I could have build a heavyweight page that does all of the collection and presentation, but I opted against it.  Instead I built several classes, each meant to perform a single clear task.  One collects menu information, another collects the content.  Yet another produces nicely formatted menus.

You'll note there are two classes for menus.  This is intentional.  I don't want to have to dig through all of the menu collection code to rewrite the menu presentation engine.  These should live separately.

In the end, all the actual JSP page does is present the pre-collected, pre-formatted content I prepared using plain old, run-of-the-mill Java.  The extra added benefit: because most of the function is compiled to run in a virtual machine, rather than parsed and executed by an interpreter, the collection and presentation is blazing fast.

The lesson to be gleaned from my rambling post is this: regardless of the particular design model you choose, break pieces apart.  Keep the UI separate from the business logic.  It will save some gray hair, hours of lost time and it might even make your program function better. Develop for delivery, keep your code tidy and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2010-03-12 10:47:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-12 18:47:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[developing-for-delivery-separating-ui-from-business]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ybudyah]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[b2e56018ff0b1d1beaf01526d74e0e26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551445547;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:1142;}i:2;a:1:{s:2:"id";i:1114;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It&#039;s a Fidelity Thing: Stakeholders and Wireframes</title>
		<link>http://www.chrisstead.net/archives/263/its-a-fidelity-thing-stakeholders-and-wireframes/</link>
		<pubDate>Mon, 15 Mar 2010 17:17:32 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[This morning I read a post about <a href="http://uxmag.com/design/where-wireframes-are-concerned" target="_blank">wireframes and when they are appropriate</a>.  Though I agree, audience is important, it is equally important to hand the correct items to the audience at the right times.  This doesn't mean you shouldn't create wireframes.

There is an inherent problem with simply not creating wireframes before the design process begins.  If the designer is handed a stack of content and a few images that represent what the stakeholders would like to see incorporated, the project can land, very quickly, in a swamp.

The designer won't have user data to work with.  The site may lack important flow and the information presented may become lost in a design which is appealing and hard to use.  Wireframes do more than simply offer a low-fidelity idea of what the design is going to look like in the end.<!--more-->

When wireframes are carefully thought out and developed, they define the skeletal structure of the site as well as important user interaction.  Wireframes reveal an underlying architecture that should become all but invisible once the final design is implemented.

User interaction with the information architecture should be transparent.  This cannot be done with a pretty design alone.  Functional specifications come from wireframes.  Documentation comes from wireframes.  Even code is defined from wireframes.

Let's consider concerns regarding why people are building wireframes.  If a designer decides to build wires for a project simply because they have heard or seen others doing it, they are definitely making wires for the wrong reasons.  If the client, on the other hand, demands wireframes simply because they heard a new buzzword, they are asking for the wrong thing as well.

The important issue surrounding wireframes and audience is not whether they should be made or not.  The issue is what the fidelity of the wires should be.  At the beginning of the thinking process, hand-sketched wires are a great way to get ideas on the table with little time invested.  These wires are typically not provided to the customer unless they were sketched at a client meeting.

Once the basic concept is sorted out, more formalized functional wires can be created and presented.  These will typically be more fleshed out, accounting for the general states of the site they are intended for.  Often times these frames will accompany a document detailing the information hierarchy and user flows.  This set of documents is important for the developers and designers to aid in constructing a site that conforms to expected layout and behavior.

After the formal frames have been created, it is time to discuss appropriate fidelity of wireframes for presentation to the stakeholders.  If project stakeholders are visionaries, capable of looking through low-fidelity wires to see a final product, then present what you have.  Low fidelity is an acceptable choice here.  If, on the other hand, you have users that are much more responsive to a final product, it may be time to beef up your wires with some graphics and real content.  This is a high-fidelity presentation.

Speak to your client in their native tongue.  If you are talking to bunch of engineers you may be able to simply hand them a spec for the views and the business logic and they will extrapolate the rest themselves.  On the other hand, executives often don't have time to review detailed documents.  Instead, give execs a nicely presented, medium- to high-fidelity set of frames and comps which they can glance over and make a decision on.  Knowing your stakeholders makes all the difference.

In response to the article mentioned early on, wireframes are an important part of the site development process. In order to provide the customer with an optimal product, wireframes should be an integral part of the development process.

The development team will know, immediately, if their work hit the mark when the stakeholders try to click on printed copies of the wireframes to see more information.  Wires don't define the graphical elements of the site, they define how the graphical elements drive the user to move.  Wires don't define how website function will interact with underlying code, they define how the user achieves their goals through using what the developers will build.

Wireframes are not an early version of something pretty, they are an interface tying visual appeal, function and user journey together.  In the end, the question should not be, "do I make wireframes?"  The question should be "what fidelity should my presentation be to have the greatest impact?"  When presenting to stakeholders, consider their needs too.

As a designer, engineer, IxDA or any other element in a project, your users are your goal.  Stakeholders are your clients.  Build a better user journey.  Think about presentation fidelity.  Give the stakeholders something to believe in.  Make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2010-03-15 09:17:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-15 17:17:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[its-a-fidelity-thing-stakeholders-and-wireframes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ycny4se]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[8cbaaa586b75da820b6e10057f543ef6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551445486;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:211;}i:1;a:1:{s:2:"id";i:522;}i:2;a:1:{s:2:"id";i:196;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What Have I Done? (Redux)</title>
		<link>http://www.chrisstead.net/archives/269/what-have-i-done-redux/</link>
		<pubDate>Mon, 22 Mar 2010 18:08:05 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[A little earlier this month, I made a post to Posterous called "<a href="http://chrisstead.posterous.com/what-have-i-done-18" taget="_blank">What Have I Done?</a>"  It was less a post about what I had done as what I was doing.  Here we are, approaching the end of the month and I've just completed phase one of what I was doing.

In saying all that, I would like to oficially kick this post off with a bit of rejoice.  <a href="http://cobblesite.chrisstead.com/" target="_blank">CobbleSite</a> version 1 is complete and ready for people to play with it.  Let's just call it a version though it's not. Not really, anyway.  This is exciting for me as I get to do more than simply blog about what I do, I get to show it.

All of this isn't very useful if I don't share a little about why I did it.  I mean, what's so special about just one more content management system if it's built to be a variant on everything else that is already out there?  There is, after all, one major difference:<!--more-->

Object oriented content.

The CobbleSite <acronym title="Content Management System">CMS</acronym> is not so much about doing something that others before me have already done, it was about a philosophy.  I believe that treating content as objects is the right way to move forward into new places on the web.  Moreover, <acronym title="Object Oriented Content">OOC</acronym> makes life easier for administrators and users alike.

I've poked through several different content managers to see what they do well and what they do poorly.  Every system has a strength: simplicity, focused function, raw power or vast ability to integrate plugins and custom functions.  All of these things are wonderful, but they come with a tremendous amount of stuffing and whatnot that makes them unwieldy given the situation.

Personally, I love WordPress.  I think they have done a great job of building a tool that is easy to install, use and administer.  Templates are reasonable to build even by the relative novice and getting a site up and running takes little time and effort.  I would consider this a success on many levels.

Regardless of how I feel about WordPress, it, just like every other system, fails to fulfill requirements I typically have for a website.  I don't only work on blogs.  I build Corporate sites with pages and content distributed throughout a medium to large hierarchy and, sometimes, across multiple domains.

There are other tools as well, which are open source, that might fill this need a little better.  Drupal is one.  Drupal, however, is hardly friendly to the newcomer.  You must learn new technical jargon, become familiar and comfortable with a cryptic template system and then struggle through building menu systems which support different levels of users.  This is just too much work for me.  Moreover, running a distributed Drupal installation for multiple domains becomes challenging very quickly.

In short, I can't build a site, push it out to the world and then hand control to a creative team to maintain the content.  Worse than all this, every CMS I have seen (so far) has content tightly coupled with pages.  This is precisely why I built CobbleSite.

I had only one aim when I set out to build CobbleSite in the first place: decouple content from pages.  I won't go into detail about the benefits of OOC as you can read them in <a href="http://www.chrisstead.com/archives/112" target="_blank"">a previous blog</a>.  Let's take a peek under the hood and I'll give a little insight into why I did things the way I did them.

First, let's look at hierarchy.  Up-front, the hierarchy management works a little like a folder system.  There are pages, sub-pages and sub-sub-sub-pages.  This can be carried as deep as necessary.  I was inspired to manage the hierarchy this way after working with people who would ask "so, where do I find that page again?"  The answer: right where you left it.  If the page is in a particular location within the site, it is right there in the hierarchy too.

Another benefit of managing the hierarchy this way is taxonomy management.  It becomes quite obvious whether a taxonomical dictionary for your site will work or not.  You can ask "does this copy work," and get an answer with a glance.  It allows people to tackle user-centric questions before the site has been built.

Within the hierarchy lay the pages.  Pages are containers and, as such, just because you've made a page doesn't mean you are stuck with some lorem ipsum to fill the space while you construct the site hierarchy.  This approach maintains focus on one task at a time.

Pages are defined rather than created.  This means, you give it a name, a template and some related meta information.  Page definitions are manipulated through the hierarchy.  Grouping and subordination are defined and stored.

Finally, let's take a look at content.  Content is created and given a type.  Content can be created through a page view, or it can be created independently.  The function of the content is left to the user to define.  This is where the principle of OOC becomes clear.

The "class" of the content can be viewed as the content type.  Meanwhile, each piece of content can be viewed as an object instance of the class.  The translation of this technical jargon is, content can be created and reused across pages or even websites.  This cuts down on duplicated work and turns the work of building a site into a much more straightforward act of creating and posting content inside of existing containers.

In the end, my method is not the only way of implementing OOC.  Moreover, I wouldn't even dare say it is the correct way, but it is the best I have done so far.  There is much MUCH more related to the topic of building CobbleSite, but now is not the time.  I encourage you to try CobbleSite, think about OOC principles and find ways it could improve.  Better yet, think of ways you would build a better system altogether.  When you make a site, think about object oriented content, provide a great site for your users and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date><![CDATA[2010-03-22 10:08:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-22 18:08:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-have-i-done-redux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ycr73g9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[40872f9ee287be9305a9baf04c1da39d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551439573;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1106;}i:1;a:1:{s:2:"id";i:256;}i:2;a:1:{s:2:"id";i:349;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Content: It&#039;s All About Objects</title>
		<link>http://www.chrisstead.net/archives/276/content-its-all-about-objects/</link>
		<pubDate>Thu, 25 Mar 2010 21:35:56 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[When I wrote my first post about <a href="http://www.chrisstead.com/archives/112" target="_blank">object-oriented content</a>, I was thinking in a rather small scope.  I said to myself, "I need content I can place where I need it, but I can edit once and update everything at the same time." The answer seemed painfully clear: I need objects.

Something funny happened between then and now.  I realized that content is already made up of objects.  All at once, I discovered I was one with all of the content scattered across the web.  It was a very zen moment I'm not sure I could recreate on my best day.

See, we are already working with content objects everywhere, but we just haven't noticed.  Take Twitter for instance.  Twitter specializes in the content object. It's a very small object, but it's there all the same.  Take, for instance, a <a href="http://twitter.com/cm_stead/status/11044627560" target="_blank">tweet</a> from my <a href="http://twitter.com/cm_stead" target="_blank">feed</a>.

My one tweet is both content on its own and it is part of my feed which is also content.  The same can be said for blog posts, RSS feeds, Facebook status updates, YouTube videos, that picture of your cat and any other of a number of things scattered across the web.<!--more-->

The funny thing is, these pieces of content are already broken up for you and made ready for consumption.  So, let's head back to your site for a moment.  That footer information you have posted on every page is managed as an object.  This can be further demonstrated by the fact that CSS uses the box model to manage the content on your page.  Those boxes are objects.

This is getting a little esoteric.  Let's bring things back around for a moment, shall we?

Content is more than just the sum of its parts, i.e. words, images and video.  Content is something so real it can almost be touched.  It's a building block.  Without content, the web would be nothing and the only reason the web is something WITH content is because content is something.

Still a little weird, right?  When you build a site, you could simply throw content at the screen without containers.  This would result in a rambling page with no breaks, no sense and no way to logically decipher it.  This would be something akin to the center of the sun: lots of elements, really dense and really REALLY hard to live around.

In order to make the content more presentable to the user, we break it up into pieces we can manage and format.  As soon as you have done this, you no longer simply have words and other garbage on a page, you now have divisions, paragraphs and images. Outside the page, those divisions are meaningless.

Says who?

If a paragraph from a book were written, longhand, on a sheet of paper, it doesn't lose the quality of being a paragraph, it simply loses its association with the book from whence it came.  This means the content structure is actually meaningful outside of the original context.

This is really useful when you deconstruct and reconstruct a page.  All of a sudden you aren't trying to figure out where to put this image and that word.  Instead, you are filling a bucket.  That bucket happens to have a name, and that name is 'page.'  The best part of this whole exercise is, we have now separated content from the page it lived in.  

Why do this?

Once you've broken the content out of the page, it doesn't really matter where the content comes from.  This means you can start drawing smart boxes on your page and simply filling them with the content you want.  Need an RSS feed? I'll draw a box for that.  Want a piece of home-grown content? I'll draw a box for that too.  After all of the box drawing is done, you can start pulling in pieces from all over the web and putting them right into your site.

Much of this isn't new.  We've been dropping content into sites like this for years.  Where this can get really interesting is when you are working on blended content/application sites.  All of a sudden something really magical happens.  Functions aren't programs which live off in a separate ecosystem.  The functions become OBJECTS!

When your functions become objects, they stop being scary and just become part of the content flow.  Forms go here, dynamic items go there and the page comes together.  By simply realigning ourselves and looking at content as objects, instead of words, images, feeds, functions and all the other odds and ends available to us in spades, putting a site together becomes something of a spiritual experience.  All of the wonders of the web come together to form a cohesive whole.

For your next project, go crazy.  Imagine you are playing with blocks and throw away your content notions altogether.  Use the APIs available in the wild and build a smarter page.  The magic of the web is the fact that everything exists a mere request away.  Think about objects and build your site.  Make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2010-03-25 13:35:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-25 21:35:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[content-its-all-about-objects]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/yhftwvu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[915b9e0b2d5b78641822e078b5b5731a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551445422;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:292;}i:1;a:1:{s:2:"id";i:112;}i:2;a:1:{s:2:"id";i:269;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[Thinking in Pieces: Modularity and Problem Solving | Chris Stead.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/292</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.205.11.33]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-12 08:11:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-12 16:11:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] lots of problems on the web to fix and modularity applies to many of them. A couple of posts ago I talked about content and that it is all built on or made of objects. The benefits from working with objectified content [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Thinking in Pieces: Modularity and Problem Solving</title>
		<link>http://www.chrisstead.net/archives/292/thinking-in-pieces-modularity-and-problem-solving/</link>
		<pubDate>Mon, 12 Apr 2010 16:00:28 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=292</guid>
		<description></description>
		<content:encoded><![CDATA[I am big on modularity.  There are lots of problems on the web to fix and modularity applies to many of them.  A couple of posts ago <a href="http://www.chrisstead.com/archives/276" target="_blank">I talked about content</a> and that it is all built on or made of objects.  The benefits from working with objectified content is the ease of updating and the breadth and depth of content that can be added to the site.

Something really exciting that came from my previous post was that functions are objects.  By this, I mean, site function does not live in a separate world, outside of the content object ecosystem.  Functions should be and ARE integrated right into the website.

This is the beauty of the modern web.  Since functions are merely objects which can be included in pages, they can be built, tested and deployed independently and then integrated seamlessly into the web application.  Typically we think of this kind of function as a plug-in, though plug-ins are merely objects in their own right.

Hagan Rigers (<a href="http://twitter.com/haganrivers" target="_blank">@haganrivers</a>) is currently part of the <a href="http://www.uie.com/events/web_app_masters/" target="_blank">Web App Masters Tour</a>. Without giving too much away about her talk, she discusses managing site (and application) navigation as a function.  She breaks navigation out of the system and handles it as a separate function of the site, independent of the content.  If we consider this approach, then we can see something really important:

Navigation is a function.<!--more-->

Something we already know is that functions are simply objects to be plugged into a website.  Moreover, we know we can AND DO build all kinds of interactivity and user-centric functions into websites.  So, adding one more function to the site is no big deal, or is it?

Thinking about navigation as some object to simply plug into a website seems like a radical departure from good sense, doesn't it?  I mean, navigation is integral to the site.  It's the foundation upon which all is built, isn't it?

I'm not sure that's actually true.

Ultimately, there is only one thing on the web: content.  If not for content, there would be no reason for the web.  There would definitely be no reason for my blog.  There would absolutely be no reason to ever think about navigation.  Perhaps navigation really isn't as foundational as we might think.

The real dilemma of all of this content-object business is that once everything becomes an object then there is no reason to think that any object is immutable or immovable.  Everything can be updated, changed, moved around and even reinvented as the need arises.

This is not to say that any content-object is disposable.  I would argue quite the opposite.  It was said, as taken from Paddy Donnelly's blog, "A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away."  (quotation by Antoine de Saint-Exupery)

In short, if this is done correctly, each content-object should be indispensable and irreplaceable. This holds for everything from the main body of text you write to the RSS feed you pull syndicated content from, through the interactive functions of the site and finally to the navigation.

So, we're 500 or so words in, what's the big hubbub?

Here's the thing, your user need not know that you're dealing in objects.  The key is integrating your content objects so well that your user feels as if they are immersed in a smooth, polished experience, each part completely inseparable.

Each object does not live in a vacuum, however all of your content of a certain type should be interchangeable with another.  This is key as you move forward in building a site.  Users will tell you what they want from you.  This may be as direct as an e-mail detailing the things your user would like to as indirect as an inference based on analytics data.

When your site is built upon the content-object ideals, you can quickly rise to meet the wants and needs of your user.  Users are fickle and what they may prefer one day, they will balk at the following.  By managing your site in a modular way, it allows you to keep up with the users and their impossibly quick pace.

So, navigation and modularity.

What I have been driving at this whole time is modularity.  Wonderfully, navigation falls right into that basket.  As you build your site consider your content as objects, then think about your pages as objects containing smaller objects.  Each of those objects is then contained inside the site.

Spinning yet?

The navigation should be your savior.  The navigation, when done right, is the glue which holds everything together in a polished structure.  Navigation is the wrapper that should bind your objects together and, at the same time, make the structure as transparent as possible.

In the end, what you will uncover is, content is drafted and the navigation describes it all as your user is guided through the experience.  Since navigation is a function and all functions are objects, then navigation is simply a content-object which should be crafted with the same kind of care you pour lovingly into your media content-objects.

By breaking the entire site into independent objects and polishing each individually, you lay a strong foundation for building your site.  Once each content-object is ready for inclusion in your site, begin thinking about your navigation.  Pull the site together and buff everything to a high shine so you know your user will be nothing less than dazzled.  I'll let Hagan do the talking about how to think of navigation in even smaller objects.  In the meanwhile, build your site modularly.  Think about everything as an object.  Keep up with your users.  Fill their needs.  Make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2010-04-12 08:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-12 16:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thinking-in-pieces-modularity-and-problem-solving]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[OOC, Object Oriented Content, content-object, modularity, web, design, development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[It's time to start thinking about site solutions in a modular way.  Design, develop and deploy with content-objects, including navigation.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/ydtv8l8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[40fc9d18093f02f19161c94e486624b5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551445519;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:18;}i:1;a:1:{s:2:"id";i:795;}i:2;a:1:{s:2:"id";i:1082;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention New Post: Thinking in Pieces: Modularity and Problem Solving - #in -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L2&amp;url=http://www.chrisstead.com/archives/292</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-12 09:16:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-12 17:16:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Chris Stead, Chris Stead. Chris Stead said: New Post: Thinking in Pieces: Modularity and Problem Solving - http://tinyurl.com/ydtv8l8 #in [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Usabilibloat or Websites Gone Wild</title>
		<link>http://www.chrisstead.net/archives/300/usabilibloat-or-websites-gone-wild/</link>
		<pubDate>Wed, 21 Apr 2010 16:00:18 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=300</guid>
		<description></description>
		<content:encoded><![CDATA[It's always great when you have the opportunity to built a site from the ground up.  You have opportunities to design things right the first time, and set standards in place for future users, designers and developers alike.  These are the good times.

More often than not, sites are already built and deployed for the world to view.  Moreover, there are probably unintentional standards in place which get in the way of your best efforts to do right by the site, the content and the user.

It can be said that, much like user experience is either good or bad, there is no such thing as no standard, there is merely a good or bad standard.  Once a project is underway, if there are no standards to work from, they will create themselves.

Pretty soon you find yourself in the corner holding a roller and a can of paint with a confused look on your face.<!--more-->

"How did I get HERE," you ask.

Patterns become entrenched.  People begin to rely on the uneven foundation.  It is expected that things are going to be built around warps in the floorboards.  Broken becomes the new fixed.

Suppose you approach a site that has a decade, or more, of this kind of entrenched patterning.  You will quickly discover that doing any updating, making any change or acting upon the site in any way is a momentous task.

On one side of the fence stand the engineers who have cobbled together this house in the swamp and there you stand, Captain Ahab, looking at the white whale of usability and proclaiming you will have victory regardless of the cost.

This kind of standoff leads to what I refer to as usabilibloat.  Usabilibloat is the unexpected and swift expansion of codebase and resource usage to support a cumbersome system and a user interface which may be little more than merely passable.  Typically this kind of situation is not grown out of contention or malevolence but simply out of "organic growth."

Organic growth, when controlled and directed, can allow a site, tool or other system to flourish and become a loved and trusted tool.  When uncontrolled, organic growth of a site becomes malignant.

The first step to take when approaching a site which is in danger of developing usabilibloat is to assess what is easy to fix and what is hard.  The hard things are typically systemic problems, likely related to cutting a corner years ago.  Often, the person who cut said corner is long gone and others are left to pick up the pieces.

The easy problems should be evaluated as to level of efficacy regarding user experience and ease of maintenance in the long run.  Don't ignore any of them, but make a list and order the problems as they should be handled.

Sometimes easy problems reveal systemic ones, so be aware.  If an easy problem starts to become a systemic problem, shift it from the easy list and move on.

Once you have sorted the easy problems in order of importance and immediacy, evaluate the ideal user experience.  Note the key features and make a list of them.  These are the do or die features.  These are the "if our system doesn't have these, it is a non-starter."

Appraise the list of easy-to-fix issues and non-starter features and roll these out in the earliest version of your site.  Forget about the other neato things you intend to put in place one day.  Just get the site rolling with what you need and give people something to click on.

Something that is key for limiting usabilibloat: build an API.  Create something to allow your UI to interact with the system below.  It can be hacky.  It can be ugly.  It may not work quite right the first time you try it.  Regardless, with a good programming interface, you can interact with the user in a consistent way while the developers pull the system back from the edge of the abyss.

By building an API, you separate the UI from the system and allow the pieces to move more independently.  A major benefit you will gain from this approach is the ability to give your users something to click on early.  The more user testing you can incorporate the better.  If you can incorporate it early, you are doing well.

User testing will help to eliminate more usabilibloat.  Your users will tell you if something works better, worse or about the same as what they were expecting.  Sometimes you will discover you can cross items off your list as they are unrelated to what your user is truly interested in.

After you've accomplished these critical steps, continue to work through your site in much the same way, iterating in the UI elements as they are appropriate and refine the system to work more efficiently within the scope of the user needs.

Usbilibloat should be managed from the earliest possible moment.  The only remedy available once usabilibloat sets in is time and sweat.  If bloat is carried too far, your users will suffer for your sins.

The key to your salvation is planning.  If you see your site heading for the edge, take a moment.  Sit down with your developers and make a plan.  managing the issue early will save lots of grief for both you and your users.  Meet the problem head on.  Break your UI away from the rest of the system.  Save your users and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2010-04-21 08:00:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-21 16:00:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[usabilibloat-or-websites-gone-wild]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/y7ufz7h]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[aa369adc5b44d18a444a39d083a727ff]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551440972;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:132;}i:1;a:1:{s:2:"id";i:211;}i:2;a:1:{s:2:"id";i:531;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Inclusive or Exclusive Web?</title>
		<link>http://www.chrisstead.net/archives/304/inclusive-or-exclusive-web/</link>
		<pubDate>Mon, 26 Apr 2010 19:21:22 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[When you start working on a website or application, what is your goal?  In the current state of the web, there are many ways you can carry your user but, in the end, you must choose web inclusive or web exclusive.  Sites with rich APIs which interact with the world around them are web inclusive.  Sites which focus internally, drawing little content from the outside web and, ultimately, giving nothing back are web exclusive.

The web is moving away from exclusivity.  When the web started, documents were shared, whole, and people had to visit a particular site to view their content.  It rarely came to you, typically requiring you went to it.  This was the face of the web in the 1990's.  Autonomous operating sites maintained individually for the sake of the content maintained within.<!--more-->

The modern web, <a href="http://chrisstead.posterous.com/modularity-and-the-web" target="_blank">as I discussed last week</a>, is constructed with a blend of autonomous content and content-objects from across the web.  This kind of shared content structure is a natural development beginning with sites maintained as interfaces interacting with content sources like databases.

By creating an exclusive web application you gain certain benefits.  You control your environment.  You get to set the rules and everyone who uses your system must obey.  You maintain the images.  You store the copy.  You define the network.  Everything you do lives within the ecosystem you create.

For as good as it sounds to have supreme power over a web ecosystem, there are drawbacks.  You are solely responsible for maintaining the system.  When things break, it is your job to fix them.  When enhancements are made, you are the one on the hook to build them.  The onerous is on you and you alone.

There is another issue that comes with maintaining a partially or fully closed ecosystem. You can lose trust.  People get wise when others start watching everything they are doing.  This kind of realization hurts companies.  Facebook appears to be suffering from just this kind of loss of trust right now.  As they get more aggressive with sharing user data, they lose user trust.  Since Facebook is a closed ecosystem, an exclusive web application, and users are aware they are being watched, trust in the system wanes.

Inclusive web applications, on the other hand, lend a feeling of freedom and sharing due to the transparent sharing of information across the wire.  The inclusive web draws information in from APIs and RSS feeds across the web.  Just as information flows in, the local API allows information back out again.

When the inclusive web also allows people to manage their own privacy, users feel more secure.  They know they can collect the information they want and share it with whomever they like without feeling the burden of filtering or censoring their preferences in order to please people they neither know nor are aware even exist.

The benefit you gain from running an inclusive web application is the ease of production.  You maintain the code base for a hub and your unique function while allowing other services to manage the content they specialize in.  This community development process leads to many different groups acting in a specialized way and supporting a subset of the total code that builds the end user experience.

For the gains available in the inclusive web, there are pitfalls as well. Privacy management becomes a more complicated task for the user.  Instead of managing the privacy controls at a single dashboard, they are required to manage their privacy as it applies to each system they touch.  This can become a burden if a user suddenly decides to overhaul the privacy settings across their personal social ecosystem.

Another concern to weigh against is control.  The more inclusive your application is the less control you have over the experience your user has when they interact with the ecosystem in its entirety.  Within the scope of your application, users can, and should, have a consistent experience.

All APIs, however, are not made equal, so preparing and presenting an interface for your user does not mean you will be able to give them the same rich experience they would have when interacting with the primary service.  On the other hand, this may be preferable as you can offer a subset of functions which relate directly to your service without directly mirroring the function of the service you are interacting with.

With these control issues in mind it is likely still a greater benefit to be inclusive rather than exclusive.  Through acting in an open, inclusive way your site becomes a boon to the user, enhancing their experience and making the web a friendlier place to be.

In the end, however, the inclusive web is where users truly live.  No user interacts solely with any specific web application forsaking all others.  They look to constantly enhance their experience on the web through richer interactions.  These interactions, however, are not just with a machine.  They are interactions with people.  People don't all live in once place.

Instead of trying to fight the inevitable rise of the inclusive web as an expectation of the user, embrace it.  Think about the sites and services your users prefer.  Engage your users with new ways of acting with and upon the web around them.  Provide your users an open, inclusive experience.  Make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2010-04-26 11:21:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-26 19:21:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inclusive-or-exclusive-web]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/36f5duo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[4f43b6816e6676ea81cc243e833884ee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1542510056;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:466;}i:1;a:1:{s:2:"id";i:454;}i:2;a:1:{s:2:"id";i:292;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Coding Transparency: Development from Design Comps</title>
		<link>http://www.chrisstead.net/archives/312/coding-transparency-development-from-design-comps/</link>
		<pubDate>Thu, 20 May 2010 21:12:54 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[Since I am an engineer first and a designer second in my job, more often than not the designs you see came from someone else's comp.  Being that I am a designer second, it means that I know just enough about design to be dangerous but not enough to be really effective over the long run.

When I say I am a designer second I mean I am, in fact, a design school dropout.  I went, I learned just enough to "get it" and then I ended up dropping out.  I did go back to school and I got a math degree, but that is a different story for a different day.

If there is anything I learned from design school, it was that everything in design is done for a reason.  Mind you, this is when design is at its best.  Every designer that is working to solve a problem and communicate with the viewer has incorporated elements and done things so a specific message comes through.<!--more-->

Unfortunately, many of my engineer colleagues don't have this insight.  Typically people who opt for the engineering route do so when they are in high school or earlier and rarely set foot into the creative world.  They may be proficient hobbyists in a particular art or craft, but their real love is engineering.  Typically they really have little or no knowledge of design whatsoever.

<strong>People who don't understand design make really poor designers.</strong>

Sorry, it's true.  This is not to say people without design skill can't convey messages, but they tend to be inconsistent and unpredictable.  Moreover, engineers, in specific, are typically more interested in solving a puzzle than making the final presentation precisely "so."

This is the benefit of design comps.  Designers, unlike engineers, are trained in design and are able to consistently and deftly communicate ideas with a clear voice.  When they create a design comp for a website, or several depending on circumstances, they are creating a visual roadmap to communicate with the world.

Engineers, even as wonderfully detail oriented as they are, tend to see the big-picture items like color and location of items on a page, but they miss items which are equally important, like typography, subtle shading and other items which create a polished look that tells the user this is something made by professionals.

Ultimately, what happens is engineers color the design with their desire to finish slapping that UI together so they can solve the really meaty problems.  When I joined Arrowhead, the company I currently work for, much of the Creative-specific projects looked pretty good, though the code was abominable.  The collaborative work between Creative and Engineering seemed to suffer.

Mind you, this does not mean the engineers here are bad at what they do.  Quite the contrary.  They simply colored the output when they worked on it.  Designs would fall apart as content was added and the best laid plans met the real world.

Engineers and developers need to work on being more coding-transparent.  Regardless of how ugly the first iteration of the code might be, get the page looking good.  When you think you're done, take a printout of the original comp and hold it next to the completed page.  Do the look the same?  Do they look different?  How do they differ?

In order to achieve coding transparency it is important to take a moment and understand what the designer is trying to communicate.  See what the pieces of the design do when they work in concert.  Understand the intention.

Ultimately, this may lead to asking the designer questions.  They don't mind answering questions like "what am I supposed to be doing here," or "when I add content, the design seems to break like this, any thoughts?"  Questions like these help designers to work with you and, hopefully, develop a more robust design, capable of handling what the world throws at it.

Designers, on the other hand, hate questions like "what is this for? Do you really need that?"  The answer is typically "yes," so don't ask.  Try to implement it and then ask questions if something breaks.

As you work through a design, you may find you have to interpolate or extrapolate on a designer's idea.  If it is clear how to build from what they have done, just go for it and brace yourself for minor tweaks.  It's okay, changes happen.  If you don't understand what they want or it's not clear how the design extends to what you are currently working on, then stop and ask questions.

When engineers ask questions which lead to better design decisions, designers feel more confident about how the end product will turn out.  Much like engineers feel when people ask questions about whether items are possible to implement rather than just assuming they are and promising the world.

In the end, coding transparency is all about communication.  It is about communication between the designer and the engineer and it is about communication between the designer/engineer team and the user.  If communication breaks down anywhere along the way, the message will never reach the user or worse, it does and it's ugly.

In the end, everything we do is intended to reach an audience.  The more we can do to facilitate the message as it comes down the wire, the better.  So, the next time you receive a comp and rush through, slapping elements into place without review, imagine what your system would look like without testing and code review.  Practice coding transparency and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date><![CDATA[2010-05-20 13:12:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-20 21:12:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[coding-transparency-development-from-design-comps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/2a7ndzv]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[67a31672a8886354aea2da85469b5d7d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551434445;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:132;}i:1;a:1:{s:2:"id";i:263;}i:2;a:1:{s:2:"id";i:340;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Balance is Everything</title>
		<link>http://www.chrisstead.net/archives/321/balance-is-everything/</link>
		<pubDate>Tue, 01 Jun 2010 17:55:57 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[Earlier this year I discussed <a href="http://www.chrisstead.com/archives/226" target="_blank">progressive enhancement</a>, and proposed that a web site should perform the core functions without any frills.  Last night I had a discussion with a friend, regarding this very same topic.  It came to light that it wasn't clear where the boundaries should be drawn.  Interaction needs to be a blend of server- and client-side technologies.

Ultimately, it is rarely clear where boundaries are in a project.  What is too much, what is too little?  Somewhere between too much and too little is just right, much like what Goldilocks wanted in her porridge.  We know that even the most limited of users should be able to access our sites within certain considerations.  A photo gallery is, ultimately, little use to a blind person, but alt tags should still be in place.  Sound clips of the Boston Philharmonic Orchestra would be useless to a deaf person, though a caption or indication as to what each sound clip is would be quite handy.

Coming back to the point, finding a balance point is critical to providing rich, meaningful interaction between your user and your site.  Perhaps the first question which should be answered is "can this be done without Technology X?"<!--more-->

Technology X is always the hot technology everyone is dying to use.  Flash, AJAX, CSS3, these all have fallen under the Technology X heading at one point or another.  By using Technology X as your baseline interaction, you may be causing your users pain when you thought you were enhancing their experience.

A prime example of where Technology X is used when standard interaction would do is the Google login procedure.  Many, if not all, of Google's login boxes use AJAX for verification of user creds.  It sounds cute and looks vaguely neat, but what happens when the browser barfs on their Javascript or you suddenly lose your internet connection?  You have no clue what happened.

Your experience just took a nose dive and left you in the dark.

This is especially bad news for something like a login.  Logging into a website should be a simple, straightforward, FAST experience.  I want to type my creds, log in and be on my way to my dashboard.  If something dies unexpectedly, I want a clean, clear indication as to what happened and why.  If someone cut my ethernet cable in the next room, I want to know my computer lost network connectivity and that's why I'm not seeing my dashboard in all its glory.

CSS is another item which can choke on users, leaving them feeling lost and confused.  When things are hidden or altered with CSS in a way that makes them unreadable or unusable to the user, it can get ugly.  The user sees a damaged site and moves along.  Your rep falls to pieces and your user has moved on to greener pastures.  This is especially true for people using Javascript to reveal something hidden with CSS.

The phrase "if it is to be shown with Javascript, hide it with Javascript," carries a lot of weight with me.  If your Javascript is going to die, it would be preferable that you err on the side of caution.  Show everything.  Make sure the page is as usable as possible.

So, the balancing act.  I'm not saying there is no room for Technology X.  The Technology X of today is the old standby of tomorrow.  People will become familiar with new technology and learn to expect it.  In the meanwhile it is important to consider what your user is aiming to do.

As a friend of mine likes to quote: Proper prior planning prevents piss poor performance.  Know what it is your user is trying to accomplish by using your site.  If they are there to purchase widgets, build a no-frills site which sells widgets.  Use styles only to make the page more readable.  Make sure everything makes sense without styles.  Don't use Javascript to do anything.  Let the server do all the grunt work.

If you plan your site carefully and build something which is clear, usable and meaningful, adding Technology X will only make the site better.  If something fails, your user will still be able to interact with the site and get things done.  It may take them an extra click here or there, but it won't be the show stopper it would have been if Technology X had been your only approach.

Balance is everything.  Balance your plain site with your desire to incorporate interesting new technology.  Just because it might be neat to see something done with AJAX doesn't mean you should.  Flash doesn't solve all world ills.  Sometimes a little bit of HTML a dash of simple CSS and some server-side elbow grease will do just fine.  Build your sites for real use.  Make your toys secondary.  Think about your users' goals and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date><![CDATA[2010-06-01 09:55:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-06-01 17:55:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[balance-is-everything]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[Balancing new technology with standard web practice makes sites easier to use and more robust.  Progressive enhancement enables this approach.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[Balance is Everything: Progressive Enhancement]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/264djgs]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[793e586f86940141c521e8b9d12dcb4f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551481418;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:226;}i:1;a:1:{s:2:"id";i:466;}i:2;a:1:{s:2:"id";i:180;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>231</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Balance is Everything: Progressive Enhancement | Chris Stead.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L2&amp;url=http://www.chrisstead.com/archives/321</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.112.128.63]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-02 16:59:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-03 00:59:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Chris Stead, Chris Stead. Chris Stead said: New Post: Balance is Everything - http://tinyurl.com/264djgs #in [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>When SEO Goes Bad</title>
		<link>http://www.chrisstead.net/archives/329/when-seo-goes-bad/</link>
		<pubDate>Tue, 06 Jul 2010 21:22:01 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[My last post was about finding a healthy balance between client- and server-side technology.  <a href="http://www.designbycandlelight.com/" target="_blank">My friend</a> sent me a link to an article about <a href="http://searchengineland.com/seo-implications-of-googles-reasonable-surfer-patent-44222" target="_blank">SEO and Google's "reasonable surfer" patent</a>.  Though the information regarding Google's methods for identifying and appropriately assessing useful links on a site was interesting, I am quite concerned about what the SEO crowd was encouraging because of this new revelation.

It is important to consider search engines during the site building process, however I feel the SEO guys often get carried away.  In this article it is suggested that you de-emphasize navigation and forget footers along with lots of other questionable advice.

These two suggestions alone are enough for me to consider this article, at best, a crackpot spouting extremist ideas.  SEO experts often seem to forget a very important element on the web: the user.<!--more-->

Something designers are told and people are wise to heed is, pretty things work better.  Do they ACTUALLY work better in some sort of quantifiable way? Probably not, but that doesn't matter to the user.  If a site is attractive and seems easy to use, the user is more likely to invest the time to learn how it works.

User experience people know that navigation is key to moving a user through the site.  Let's take, for example, Amazon.  They are a top-rated site for Google searches.  Have they gone and done away with navigation? No. Why? They know users rely on navigation to move through the site.  Moreover, their designers know that pretty navigation works.

While the SEO nuts will scream "de-emphasize navigation," Amazon bucks the "trend" and keeps on doing what they know works best for making money: directing users.

Regarding forgetting about footers, if anyone in the SEO world ever thought footers were there for search engines, they are fooling themselves.  Footers are only ever implemented for the user.  Information which a small group of users may want is typically stored in the footer.  This kind of information is stuff like license numbers, contact information and other legal odds and ends.

Other common footer items include convenience links, brief site navigation and polish elements which finish out a site.  Footers, especially those of the fat variety, were never intended to be SEO tools.  They are for the user.

If an SEO guru were to design a site, it would probably be a huge mass of text with a few peppered images, some meta information at the top, a link which says "home" and the required legal information at the bottom in a big, unattractive text block.

Though a page like this would garner a couple of extra points from search engines for being easy to parse, it would lose mega points for being completely useless to a user.  The more useless your site is, the fewer users will return. The fewer return visitors you have, the lower your site rank will be.  Ultimately, you will win the battle and lose the war.

Moreover, what is really making the money, the search engine or your product?  Trust me, if you have a product everyone wants, the search engines will bump you up the list even if your SEO stinks.  On the other hand, if your SEO is top-notch, but your site fails to deliver conversions you may as well pack it in now.

Finally, something I never seem to hear SEO people talk about which should be absolutely top of their list is the semantic web.  The semantic web can be horribly complex which seems a little daunting, but it doesn't have to be.  Simply remember to use the right tags at the right time and you'll be on your way to better SEO without all of the extraneous pain involved in new metadata information embedded in your pages.

Remember to do things like break your pages up into headers, divisions, paragraphs, lists and tables.  If you want to get really fancy, add definition lists.  This will score big points with the search engines and it will also score big with your audience.  The more you can divide your information into digestible chunks and then style with CSS, the happier everyone will be.  Users will be able to quickly skim the page in search of what they are there for and the search engines will be able to parse your pages better, potentially leading to better overall ranking.

In the end it is best to build your pages the right way: semantic tagging, strong user focus and dense metadata components.  There are many SEO techniques which work better for both search engines and users.  Forget about completely re-building your page just to impress the Google spider, because you won't.  Think about the user, build a compelling site, mark it up correctly and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date><![CDATA[2010-07-06 13:22:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-06 21:22:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[when-seo-goes-bad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://tinyurl.com/2es48u6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[ffa4c275eb17222bc84514b9d25c2e36]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551434382;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:321;}i:1;a:1:{s:2:"id";i:247;}i:2;a:1:{s:2:"id";i:522;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>234</wp:comment_id>
			<wp:comment_author><![CDATA[Carrie Lewis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[carrierawks@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.lewisweb.info</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.161.182.121]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-07 10:34:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-07 18:34:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Chris you should get the award for "Best Web Hippie Dude"! Seriously people should listen to you more. Including me when I am not running amok with my head cut off like a crazy chicken. ;-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Know Thy Customer</title>
		<link>http://www.chrisstead.net/archives/340/know-thy-customer/</link>
		<pubDate>Tue, 17 Aug 2010 21:02:42 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[I've been tasked with an interesting problem: encourage the Creative department to migrate away from their current project tracking tool and into Jira.  For those of you unfamiliar with Jira, it is a bug tracking tool with a bunch of toys and goodies built in to help keep track of everything from hours to subversion check-in number.  From a developer's point of view, there are more neat things than you could shake a stick at.  From an outsider's perspective, it is a big, complicated and confusing system with more secrets and challenges than one could ever imagine.

Years ago, I built a project tracking system for the Creative department at my current company which they use for everything.  More projects come and go through the Creative project queue than I had planned on, but it has held together reasonably well.  That said, the Engineering director would like to get everyone in the company on the same set of software in order to streamline maintenance efforts.

In theory, this unification makes lots of good sense.  Less money will be spent maintaining disparate software and more will be spent on keeping things tidy, making for a smooth experience for all involved.<!--more-->

Unsurprisingly, I was met with resistance from the Director of Communications.  She told me she was concerned about the glut of features and functions she had no use for.  She prefers the simple system because the creative team is a small team of three.  Tracking all of the projects a small team has is just challenging enough to require a small system, but not so challenging that she needed all the heavyweight tools a team of 50-100 people would.

I am currently acting as negotiator between the Engineering and Creative departments.  Proposals and counter proposals are being thrown back and forth and I'm caught in the middle.  The challenge I see sneaking about in the grass is that the Engineering team doesn't know their customer.

This doesn't mean the Engineering team is bad.  It doesn't mean they don't care.  It simply means they don't live in the same headspace the Creative team does and they don't have enough time to think about it.

This puts me in a sticky situation.

I worked exclusively with the Creative team for the first two years I was with the company.  I ate lunch with them, worked with them, met their deadlines, played by their rules and build 95% of the tools they use today.  It was a really great insight into what a creative time is really like.  Something many engineers never have the opportunity to experience.

Now, I am part of the Engineering team again and playing by their rules.  Engineers think differently.  I am an engineer and my father was an engineer before me.  I know a thing or two about engineers and their quirks.  Ultimately, I can see both sides of the argument and the standoff is looking a little hairy.  

"So, where are you going with all this," you might ask.

If you are going to propose a solution to a problem, instead of learning all you can about the solution you are going to offer, learn about your customer instead.  Don't try to shoehorn a customer into a solution saying "it kind of does most of what you need as long as you need the stuff it does."  It will never work out for you.

Learn your customer's language.  Uncover little secrets about them and figure out how they really work.  Customers will rarely pony up and say "here's everything you need to know about us and our problem."  Almost always, they say "here is our problem. Fix it."

If you don't know your customer, you'll never solve their problem.  If, on the other hand, you DO know your customer, you have a fighting chance.  Mind you, even if you know your customer, they may still disregard your solution anyway, but at least you know you gave them the best you had.

Don't fret if it takes some time to learn to think like your customers, though.  It's not something that comes overnight.  I know it took a while for me to stop thinking like an engineer for 30 seconds and think like a designer.  One day, I woke up and everything had to be diagrammed.  There were so many things which could only be said through images.  The shift happened and the code disappeared.

Look for the transparency.  If you can stop and step into your customer's head for a few minutes you may discover that the real problem is not the issue they have with the solution you offered, it may be with the solution that doesn't solve their problem.  Creatives, engineers, accountants, executives and marketing people all work in different ways.  Businesses are much the same.  Find how their problem is different and you will find the solution.  Know thy customer and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2010-08-17 13:02:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-17 21:02:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[know-thy-customer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="company-culture"><![CDATA[Company Culture]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://b2l.me/ah2vbj]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[d56d0d75314855f3852458ee2f4edf9b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420206;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:132;}i:1;a:1:{s:2:"id";i:196;}i:2;a:1:{s:2:"id";i:300;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Small Inconveniences Matter</title>
		<link>http://www.chrisstead.net/archives/349/small-inconveniences-matter/</link>
		<pubDate>Thu, 26 Aug 2010 16:41:47 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=349</guid>
		<description></description>
		<content:encoded><![CDATA[Last night I was working on integrating oAuth consumers into Noisophile.  This is the first time I had done something like this so I was reading all of the material I could to get the best idea for what I was about to do.  I came across a blog post about oAuth and one particular way of managing the information passed back from Twitter and the like.

This person will remain unidentified as I don't want gobs of people spamming his site, nor do I want to give his poor judgement any extra exposure.  That said, the basis of the post was, it is preferable to make users authenticate with Twitter every time they logged into the system as opposed to storing the keys and remembering who the users of the site are.

The take-away message was, paraphrased, "it's a simple back and forth between your site and Twitter each time they log in.  It won't bother the user and it is preferable to storing all of those authentication keys."<!--more-->

Let me say it again: he was evangelizing inconveniencing the user and stating this was actually the preferable thing to do.

This idea is wrong-headed in so many ways.  First, let's look at Twitter and see how they would feel about it, shall we?

Suppose we stored the keys for the user.  Twitter would have to generate a key just once for each user.  Once that work was done, they would simply take requests as usual and the day would go on.  Their API is built around using stored user authentication so this is no extra burden.  Instead it is business as usual.

Now, suppose you make your user re-authorize every time they signed in to your web app.  This means that each user would have to hit the Twitter authorization page once per login.  Now Twitter has to burn the extra cycles to generate a new key for YOUR user.  On top of that, there is storage of that key.  Each time you request a key, you are taking up space on their server.

The more times you make your users request authentication, the more it costs Twitter.  It might be no big deal to you, but that is money out of THEIR pocket.  That is the very same pocket which is financing that lovely API you are using to update your user's timeline.  We haven't even started talking about your users yet.  This is just the mess for Twitter.

Let's have a look at your user.  If you store their authentication, they have to hit the Twitter authentication screen just once.  Once they do that, they will probably forget all about it, carrying on with using your application, like they want to.  That's it.

Suppose you, on the other hand, make your user authenticate every time they log in.  One of two things is going to happen.  Either you make them authenticate through an account screen and they will assume, after the first time, that they are done.  The other option is, as soon as your user logs in, they will be faced with a Twitter authentication screen.

Suppose you make them authenticate through an account screen.  Your user will reasonably assume this was a one-time thing.  Later they will discover that Twitter isn't being updated by your app anymore.  They will check their account and see they have to re-authenticate.

Rinse, repeat.

Eventually, your user will figure out that you expect them to re-authenticate EVERY time they log in.  If your application relies heavily on Twitter updates, you will lose that user.  If that user liked your application because it updated twitter, you will lose that user.  In the end, you are likely to lose users over the choice.

Suppose you force your user to re-authenticate each time they logged in.  Your users are going to view logging in to your service as a chore.  Eventually they will tire of the whole process and leave. This is the most direct route to losing users.

Regardless of the path you take, you are bound to lose users if you make them re-authenticate through a service each time they log into your service.  Also, the more services your app interacts with, the more services your user will have to re-authenticate each time they log into your app.  This compounding effect will only drive users away faster.

In the end, what this person was really evangelizing is simply laziness.  It is unreasonable to expect your user to go through a litany of special operations each time they log in before they can fully use your service.  In this day of "less is more" user interaction, asking the user to perform unnecessary actions is a sure-fire way to drive users from your site and fast.  Think about your user.  Do a little work for them and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date><![CDATA[2010-08-26 08:41:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-26 16:41:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[small-inconveniences-matter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://b2l.me/ak76zt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[7a00491ad09a1518f376b6c09d816fdb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551434424;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:321;}i:1;a:1:{s:2:"id";i:276;}i:2;a:1:{s:2:"id";i:12;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Geocoding with CakePHP</title>
		<link>http://www.chrisstead.net/archives/355/google-geocoding-with-cakephp/</link>
		<pubDate>Tue, 31 Aug 2010 21:26:54 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=355</guid>
		<description></description>
		<content:encoded><![CDATA[Google has some pretty neat toys for developers and CakePHP is a pretty friendly framework to quickly build applications on which is well supported.  That said, when I went looking for a Google geocoding component, I was a little surprised to discover that nobody had created one to do the hand-shakey business between a CakePHP application and Google.

That is, I didn't find anyone, though they may well be out there.

I did find several references to a Google Maps helper, but, that didn't help too much since I had an address and no geodata.  The helpers I found looked, well... helpful once you had the correct data, mind you.  Before you can do all of the maps-type stuff, you have collect the geodata and that's where I came in.<!--more-->

I built a quick little script which takes an address and returns geodata.  It isn't a ton of code, it doesn't handle paid accounts and it isn't fancy.  What it lacks in bells and whistles, it makes up for in pure, unadulterated Google Maps API query ability.  Let's have a look at how to implement the code.

First, <a href="/media/googlegeocode.zip">download the file</a> and unzip it.  Place it in /app/controllers/components.  That's the bulk of the work.  Once you have the component added to your components directory, just add it to the components array in your controller and call the getCoords() function like in the code below.

<pre class="brush:php">
class FakeController extends AppController
{

     var $components = array("Googlegeocode");

     /* functions and whatever other code ... */

     function getGeoData()
     {

          $address = $this->data["ModelName"]["address"];
          $coords = NULL;
          if($address)
          {
               $coords = $this->Googlegeocode->getCoords($address);
          }
          $this->set("coords", $coords);

     } // End of function

} // End of class
</pre>

There is more code there in general class setup and comments than there is in actually making the coordinate request.  Note, do not URL encode your address before passing it into the function.  This can have unexpected results as the geocoding component will properly encode the address for you.

There are a couple of other functions in case you need them.  First is a call to retrieve the data set which is returned from Google.

<pre class="brush:php">
// ... code ...
$geodataRecord = 
     $this->Googlegeocode->getGeodataRecord($address);
// ... code ...
</pre>

This will return an array built directly from the XML returned by Google.  From this you can extract all of the information they typically return, including status, address information and geodata as well as several other odds and ends.  There is actually quite a bit of data returned for each address.

Two other useful functions are the lastCoords() and lastGeodataRecord() functions.  They are called as follows:

<pre class="brush:php">
// ... code ...
$coords = $this->Googlegeodata->lastCoords();
$geodataRecord = $this->Googlegeodata->lastGeodataRecord();
// ... code ...
</pre>

Once a record is retrieved, it is stored in memory until a new record is requested.  You can refer to these as needed to recall the latest records retrieved from Google until the script finishes executing.

Though this isn't the typical user experience related post, hopefully this will help you get moving more quickly on your project involving geocoding addresses for use with the Google Maps UI API.  I hope you find my component useful and you use it to make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date><![CDATA[2010-08-31 13:26:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-31 21:26:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-geocoding-with-cakephp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://b2l.me/ang2fx]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[61627ccaa1cf4184310bdcdff822a887]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420113;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:247;}i:1;a:1:{s:2:"id";i:256;}i:2;a:1:{s:2:"id";i:16;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>236</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Google Geocoding with CakePHP | Chris Stead.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/www.chrisstead.com/archives/355?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.74.66.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-02 11:28:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-02 19:28:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Chris Stead, Chris Stead. Chris Stead said: New post: Google Geocoding with CakePHP -- http://bit.ly/9E5GCd [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>User Frustration Tolerance on the Web</title>
		<link>http://www.chrisstead.net/archives/369/user-frustration-tolerance-on-the-web/</link>
		<pubDate>Tue, 07 Sep 2010 16:00:49 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[I have been working for quite a while to devise a method for assessing web sites and the ability to provide two things. First, I want to assess the ability for a user to perform an action they want to perform.  Second I want to assess the ability for the user to complete a business goal while completing their own goals.

Before we start down this particular rabbit hole, there's a bit of a prerequisite for our discussion.  It is important that you understand <a href="http://chrisstead.posterous.com/fittss-law-and-the-steering-law" target="_blank">Fitts' Law and its generalization, the Steering Law</a>.  These are critical to understanding how much time a user will be willing to dedicate to your site the first time they arrive, or after a major overhaul, before abandoning their goals and leaving the site.<!--more-->

So, let's suppose you have users visiting your site, or, better yet, you are performing user testing and want to evaluate how your site is performing with the users you are testing.  It is important to have a realistic expectation regarding what users would really tolerate on the web before they leave so you can evaluate the results of your test accordingly.

Most users have some sort of tolerance level.  By this, I mean most users are only willing to give you a fraction of their day before they get fed up.  Reasonably, some users will have a shorter fuse than others, but all will eventually blow the proverbial gasket and leave your site, never to return.  Let's call this tolerance for pain and frustration 'L.'

L is the amount of time, typically in seconds, that your user is willing to spend time looking over your site and trying to accomplish their goals.  It is becoming common to say that a user will attempt to satisfy a goal and, ultimately, they will attempt to <a href="http://en.wikipedia.org/wiki/Satisficing" target="_blank">satisfice</a> if nothing else seems to work.

When they hit the satisfice point they are reaching their tolerance for frustration.  The satisfice action comes quickly, so we have very little time to fully satisfy the user.  There are actually 3 items which go into the base tolerance before satisficing occurs:

<ol>
<li>The maximum acceptable page load time (p)</li>
<li>The maximum time it takes after page load to locate a satisfactory action to achieve their goal (g)</li>
<li>The Fitts'/Steering time it takes to get to their preferred action item (fs)</li>
</ol>

The maximum acceptable page load time seems to range from one to ten seconds depending on who you talk to or read on the web.  I am opting to take the average and say that the maximum page load time should take around five seconds, though this can vary depending on other factors which are outside the scope of this discussion.

Users, once the site has loaded, have a maximum time they will spend searching for something to satisfy their goals.  The number I keep seeing thrown around is seven seconds, so I am going to accept that as my number for a general baseline for user behavior.

Finally we have Fitts' Law and the Steering Law.  This lends a little complication to the matter as these functions will return varying results.  The simplest case would be a Fitts' law case where the user can move directly to an item on the screen without interruption or interference.  Each person knows how much time it takes them to move from one place to another on the screen and they will, generally, allow for time to move the cursor to a target.

If the screen does other, unexpected things while the user is moving their pointer, like opening and closing ads, displaying inline pop-ups which cover the target or other interferences, the user will get distracted and frustrated.  This is where a Fitts' Law asset can become a Steering Law liability.  A frustrated user is far more likely to leave than a satisfied user.  For each item which interferes with the user's ability to move to their target, their patience will wane.  Reasonably, then, using the variables I defined above, we can calculate the tolerance constant as follows:

L = p + g + fs - (sum of all subsequent change in fs)

Better yet, if we plug in the basic values I collected from around the web, we get this:

L = 5 + 7 + fs - (sum of all subsequent change in fs) = 12 + fs - (sum of all subsequent change in fs)

Moving from one place on the screen to another is a relatively quick motion, so we can see, given there aren't major issues with user-flow interruption, that the average user tolerance is going to be between 12 and 13 seconds for a site from beginning to end.  That's not a very long time, but to a user, it's an eternity.  Don't believe me? Sit and watch the clock for 13 seconds, uninterrupted.  Go on, I'll wait.

Kind of a painful experience, isn't it?  Keep this in mind as you create your site and watch users test it.  During your next test, run a stopwatch. If it takes your tester more than a quarter of a minute to sort everything out and do what they were tasked with, you have some serious issues to consider.

I threw a lot out in one little post, today.  Let it soak for a while and tell me what you think in the comments.  As you work on guiding users through your site and as you test, think about the 13 seconds just watching the clock tick.  Consider your user and their tolerance for frustration and pain.  Keep the journey quick and painless and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date><![CDATA[2010-09-07 08:00:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-07 16:00:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[user-frustration-tolerance-on-the-web]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://b2l.me/ap3kak]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[97c47c3f6b38087957c2e3a39796bfcf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[97c47c3f6b38087957c2e3a39796bfcf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420289;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:211;}i:1;a:1:{s:2:"id";i:443;}i:2;a:1:{s:2:"id";i:329;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>239</wp:comment_id>
			<wp:comment_author><![CDATA[Anticipating User Falloff | Chris Stead.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/429</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-13 08:55:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-13 16:55:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] we discussed last week, users have a predictable tolerance for wait times through waiting for page loading and information seeking behaviors. The value you [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>243</wp:comment_id>
			<wp:comment_author><![CDATA[Anticipating User Action | Chris Stead.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/443</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-21 10:09:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-21 18:09:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] of anticipated user behavior on the web. Just a refresher, the last couple of posts were about user tolerance and anticipating falloff/satisficing These posts may have been a little dense and really [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Anticipating User Falloff</title>
		<link>http://www.chrisstead.net/archives/429/anticipating-user-falloff/</link>
		<pubDate>Mon, 13 Sep 2010 16:45:39 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[As we discussed last week, <a href="http://www.chrisstead.com/archives/369" target="_blank">users have a predictable tolerance</a> for wait times through waiting for page loading and information seeking behaviors.  The value you get when you calculate expected user tolerance can be useful by itself, but it would be better if you could actually predict the rough numbers of users who will fall off early and late in the wait/seek process.

It is reasonable to say that no two people have the same patience for waiting and searching.  Some people will wait and search for an extraordinary amount of time while others get frustrated quickly and give up almost immediately.  To expect that all of your users will hold out until the very last moment of the predicted 13, or so, seconds hardly reflects reality.

Instead, we can say that we have some maximum tolerance, L, which we can compute which the very last holdouts will actually wait for.  Unfortunately, we also know that a majority of users, if they have to wait very long, won't even see your site since they will fall off before the page finishes loading.  This means that the bulk of the users which see your site will be something less than the number of users who actually attempted to load your site.<!--more-->

There were some really smart guys who lived about 100-200 years ago and did lots of math.  The really neat thing is they did a lot of work that I don't have to reproduce or prove since they were smarter, more patient and far more talented than I am.  One of them was named Carl Friedrich Gauss, who some refer to as the Prince of Mathematics.  He was really smart. Newton smart. Possibly smarter than Newton.

What does Gauss have to do with user experience?

Gauss is the guy who figured out how to evaluate (1/(2pi)^.5)e^(-1/2*x^2) when integrated from negative to positive infinity.  Did I just see your eyes glaze over?  It's alright.  That happens to me a lot.

What this really translates to is, Gauss figured out how to work with the statistical standard normal curve.  This probably means a lot more to you, right?  This function happens to be really useful in developing something meaningful regarding users and their falloff over time from initial click through to our tolerance, L.

I spent an entire weekend where I slept little and did math a lot.  During that time, I developed a function, based on the standard normal curve which says something reasonably meaningful about users and how long they are willing to stay on your site and either a) search for what they need and b) not satisfice.  I'll give you the function without justification.  Contact me if you want all the formalities, I have them in a folder, on the ready.

Our function looks something very much like the following:

u(t) = u_0^(1-(t/L)^2)

What this says is that the number of users still on your site, at time t, is equal to the initial users times some falloff function evaluated for t.  The cool thing is, we already know everything that goes into this little gem when we are testing.  We know how many users we started with and we know what L is.  The really interesting bit is, when t>L, u(t) is less than one.  This means that the probability we will have a user after we reach the maximum tolerance is exactly what we expect it to be.

Below is an estimation of what the graph would look like for your analysis:

[caption id="" align="alignnone" width="380" caption="User Falloff Over Time"]<img alt="User Falloff Graph" src="/wp-content/uploads/2010/09/user-falloff.png" title="User Falloff Graph" width="380" height="235" />[/caption]

This may not seem like much of a revelation.  We all know that, as people run out of patience, they leave the site.  What this does is it gives us something we can plug into our calculators and project some sort of quantified result.  What this also means is, if you can produce results which fall beyond the bounds of this graph as you are testing, you know you are outperforming expected results.  You can also use this to compare to the number of people who satisfice during testing.

Probably one of the most important things is comparing the number of users who remain on a site for an expected amount of time to the amount of time needed to produce a conversion.  This offers a real, concrete means to offer up ROI on your efforts to encourage users to remain on your site.

The uses of this modest function are so numerous I can't afford the space here to list them.  I will offer up more insight into this function as well as other, related, functions which can be used for further prediction.  I encourage you to sit and play with this.  See how it compares with your test findings.  Gauge how you are performing against the model.  Improve and test again and, above all else, make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2010-09-13 08:45:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-13 16:45:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anticipating-user-falloff]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[File: /data/app/webapp/functions.php<br />Line: 7<br />Message: Too many connections]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[d2b7a0524c66f0928fbf775f650d138d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[d2b7a0524c66f0928fbf775f650d138d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420241;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:369;}i:1;a:1:{s:2:"id";i:443;}i:2;a:1:{s:2:"id";i:211;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anticipating User Action</title>
		<link>http://www.chrisstead.net/archives/443/anticipating-user-action/</link>
		<pubDate>Tue, 21 Sep 2010 18:09:25 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=443</guid>
		<description></description>
		<content:encoded><![CDATA[Congrats, you've made it to the third part of my math-type exploration of anticipated user behavior on the web.  Just a refresher, the last couple of posts were about <a href="http://www.chrisstead.com/archives/369" target="_blank">user tolerance</a> and <a href="http://www.chrisstead.com/archives/429" target="_blank">anticipating falloff/satisficing</a>  These posts may have been a little dense and really math-heavy, but it's been worth it, right?

I have one last function to look at.  This function will let us sort out how long a certain percent of our users will hang out at a site, trying to accomplish their goals given a random population interacting with a page or site they have never visited before. By having the ability to calculate the output of the user falloff function, we can compare user test results to our falloff curve without plotting the entire curve to show anticipated versus actual results.<!--more-->

We've already talked about the user tolerance constant (L) and our starting number of users (u_0).  These are all the elements we need to figure out at what time (t) we will have a percentage (p) of our users left actively seeking on our site.  The actual number of users remaining is trivial to calculate after you pick a percentage, i.e. p*u_0.

(Reminder: percentages should always be expressed as a decimal between 0 and 1.)

Without further ado, here's the function of the day:

t = L*[ln(1/p)/ln(u_0)]^0.5

There are some interesting features of this function which are a direct result of the <a href="http://www.chrisstead.com/archives/429" target="_blank">falloff/satisficing</a> function we talked about last time.  First, as we get closer to 100% (or p gets closer to 1) t gets closer to 0.  This shows us that, at least at one end, this function must be meaningful since none of our users should have fallen off before the testing or site loading began.

At the other end, we can see that as we get closer to 1% (or p gets closer 0.01) then time is going to approach L, <a href="http://www.chrisstead.com/archives/369" target="_blank">our user tolerance limit</a>.  This means our function is actually behaving the way it should and our results will prove to be reasonably meaningful, regarding our test population.

This function is probably as important, if not more so, for testing than our falloff function because you can actually see how you are performing in your test group against a theoretical control group.  This means, if you take your testing group, collect data and analyze it against standard statistical curves, you should be able to get a reasonable estimate of how your users are measuring up against when visiting your site.

On the other hand, if you are underperforming, you now have a reasonable metric to deduce when things are going wrong.  You can do things like plug in .68 for the percent and see if you are actually capturing the first standard deviation of your users within the allotted time.

In the end, this should all relate back to one question: are my users accomplishing what they want to do before they are getting too frustrated to continue with my website?  If the answer is 'yes,' then pat yourself on the back and then make it even better.  If, on the other hand, your answer is 'no,' it's time to start evaluating how your site is impacting the users who visit it.

Are they suffering from unintended ad-blindness as <a href="http://www.useit.com/alertbox/fancy-formatting.html" target="_blank">the users tested for the US census website</a> were?  Are you suffering from a <a href="http://www.slideshare.net/billwscott/design-anti-patterns-how-to-design-a-poor-web-experience?nocache=7174" target="_blank">hover-and-cover anti-pattern</a> which is causing your users to have to <a href="http://chrisstead.posterous.com/?sort=&search=steering+law" target="_blank">steer</a> all over the page to get to what they need?  Are you not using language that makes sense to your audience?

All of these questions and many more should come to mind to improve your performance against the baseline we've defined.  Just remember, even when you are consistently beating my model you can still improve more.  Surprise and delight your users.  Beat the curve and then improve again.  Think about your users, make your site a delight to use and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date><![CDATA[2010-09-21 10:09:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-21 18:09:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anticipating-user-action]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[Anticipating User Action]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_aioseop_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[I have presented a model for anticipating user action and reaction to a website when considering usability and user experience.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_shortUrl]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://b2l.me/atmx3m]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[a54f5680aa9edf2b8b0782cf9da3f6a3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_sexybookmarks_permaHash]]></wp:meta_key>
			<wp:meta_value><![CDATA[a54f5680aa9edf2b8b0782cf9da3f6a3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551434371;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:429;}i:1;a:1:{s:2:"id";i:369;}i:2;a:1:{s:2:"id";i:854;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web Designers Rejoice: There is Still Room</title>
		<link>http://www.chrisstead.net/archives/454/web-designers-rejoice-there-is-still-room/</link>
		<pubDate>Tue, 28 Sep 2010 17:01:00 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[I'm taking a brief detour and talking about something other than user tolerance and action on your site.  I read a couple of articles, which you've probably seen yourself, and felt a deep need to say something.  Smashing Magazine published <i><a href="http://www.smashingmagazine.com/2010/09/24/does-the-future-of-the-internet-have-room-for-web-designers/" target="_blank">Does The Future Of The Internet Have Room For Web Designers?</a></i> and the rebuttal, <i><a href="http://www.smashingmagazine.com/2010/09/27/i-want-to-be-a-web-designer-when-i-grow-up/" target="_blank">I Want To Be A Web Designer When I Grow Up</a></i>, but something was missing.

Both articles focused on content and how it gets passed around.  The problem is, there is a lot more going than just content on the web.  What both articles overlook is the work of the web developer or web engineer.  No, this isn't an attempt to shoehorn engineers into this discussion.  It's about the fact that they are needed to produce function.

Beyond the world of content is a whole slew of function on the web.  Web apps have become increasingly important in the landscape of the web.  As a matter of fact, you're currently visiting a web app.  Yes, you're seeing content, but you are also interacting with an application which allows me to manage and publish that content for you to see.<!--more-->

Other things which happen on the web include buying insurance, banking, playing games, posting comments, public forums, meeting whiteboards, chat and many other items which are missing from my list.  Web applications are vital to the new web experience.

So, what about the web designers?

Web designers are needed to make all of the extant and constantly emerging applications sensible and enjoyable.  Regardless of the particular language or server structure used to produce the web apps you use every day, one of the primary interfaces is still the browser.  This means what is an application in one sense is a web page in another.  Who designs these pages you see? Web designers.

This link between the design world and the application world has been developing for decades.  Designers are vital in the production of web applications just as much as the engineers are.  The world of applications today isn't the same as it was even in the 1990's.

Users crave satisfaction.

As little as 15 or 20 years ago, to simply have a working application was a feat unto itself.  If you could enter input and get a meaningful result in return, the application was launched.  People, today, expect more.  They want to be able to enter what they need and get the meaningful output they expect, but they also desire rich interaction.  They crave visually stimulating and sensible interfaces.  Users have gotten more design savvy and they won't stand for mediocre if they can have the best.

Regardless of where the content, which is fed from a website, is displayed, neither Facebook nor Google will ever be able to serve the function you provide on your site.  Moreover, they will not give your user the experience they expect from your company.  Only by interacting directly with YOUR site will the user ever find the satisfaction they seek.

Ultimately, the people responsible for bridging the gap between the engineer and the user are designers.  Designers come in various flavors from the jack-of-all-trades to the specialist interaction, user experience and interface designers.  Designers make the user comfortable.  Designers provide the problem-solving expertise which is so crucial to making an interface meaningful and usable.

In the end, to say that the future of the internet has no room for designers would be just as foolish as saying the future of the internet has no place for engineers.  I mean, there are all of these turnkey software packages out there, what do you need an engineer for?

It's foolishness.

Ultimately, engineers and designers are both critical to the web experience.  They have been until now and the need is only expanding.  Even as content is served out to other distribution channels, the home still needs to be somewhere.  Even as content is still king, the sea of applications continues to expand.  Much like Jell-O there is always room for designers.  Go, design and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date><![CDATA[2010-09-28 09:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-28 17:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[web-designers-rejoice-there-is-still-room]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420329;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:292;}i:1;a:1:{s:2:"id";i:233;}i:2;a:1:{s:2:"id";i:263;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>257</wp:comment_id>
			<wp:comment_author><![CDATA[Anna]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[annasiriano@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[199.18.139.147]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-29 10:01:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-29 18:01:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have a question regarding your 12 step website overhaul program, posted back in February. 

I loved all of the tips in the article and I was wondering if you could suggest an appropriate time frame or tips for creating an overall timeline for a website overhaul. 

Particularly, our overhaul will have to be done in-house with two technical writers, one web designers and one web developer whose time is split between us and a systems group. Please email me if you have any tips! Thanks you for your help.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Information Architecture: More than Skin Deep</title>
		<link>http://www.chrisstead.net/archives/466/information-architecture-more-than-skin-deep/</link>
		<pubDate>Fri, 30 Sep 2011 21:46:32 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=466</guid>
		<description></description>
		<content:encoded><![CDATA[Most of what I have seen on the web regarding Information Architecture has been related, primarily, to what the user sees and interacts with directly.  This means, what users see, and how the site is, ultimately, hierarchically constructed.  Very little consideration is given for what is ACTUALLY going on with the site.<!--more-->

In the early days of the web, a website was mostly HTML and associated miscellany.  There were some content management systems and dynamic utilities out there, but they were typically purpose-built and totally proprietary.  One company I worked for had a system that, essentially, took in HTML snippets and stored them in a database as a web page that was 90% constructed, doing the last of the construction for presentation on the fly.  It wasn't graceful, but it served its purpose.

Today websites are web apps and vice versa.  There are fewer and fewer business sites on the web that are old-fashioned HTML.  The company I work for now, has a broad-reaching infrastructure for its web presence which involves various computers and disparate web services.  This is all very important to the experience the end-user is going to have when they visit your site.

Information Architects today need to be cognizant of the systems they will be working with, the limitations of technology already implemented and the latitude they have regarding direction for the site and the user's end interactions.

Let's assume you have a list of items you already account for in your work: page layout, important items both for users and internal, site hierarchy, taxonomy, findability of information, etc.

Here are other items which should be considered:

<strong>Content Management</strong>

What kind of a system is being used?  Is there an e-commerce solution in place? What e-commerce package is being used? Does it integrate with the existing content solution or is it a separate tool?

<strong>Integrated or Decoupled Site/Content System</strong>

Is the site being run on a simple Wordpress/Movable Type/Drupal install where the site management is tightly coupled with the website itself?  Is the website requesting content across the wire from a service on another site/computer/continent? How will this impact speed?  How easy is it to integrate custom features and functions?

<strong>Data Transport</strong>

This is a biggie.  If you have an old-school web project, this is unimportant.  If you are sending data across a wire to a custom tool or application, this becomes VERY important.  How do you want to connect to the data?  Do you want to make a direct remote connection to the database or do you want to send the data as a single package across the wire?  If the data is being sent as a package, what do you want to use? JSON? XML? Serialized string? Something sneaky I don't know about?

These sound like much more engineery/techy/geeky considerations, but they are important in the end.  Perhaps you are pulling information from your company's database, a Twitter feed and pictures from Flickr. All of a sudden, you are working with mixed coupling.  You will need to know this in case something fails.  You are the one they are going to ask when they need an error screen.

Why data transport?  Simple.  You don't need to know how to implement it, but if you work with the engineers and pick a standards-compliant data transport system, you will save them lots of headaches and yourself extra work in the end.  By understanding the way data is being passed across the wire, you can start to understand how to better integrate RSS feeds into a design, present useful information to users and do it in a way that will be quick to implement and easy to maintain.  Ultimately, if you want to invent a better wheel, you'll want to be armed with a damn good reason.

Ultimately, there is a lot of information that needs to be shaped and directed.  In order to best your user, yourself and your company, you need to consider things that are more than skin deep.  By tackling the tough questions about your project early, you can write a more clear and useful specification.  In the end, by peeling back the layers, you help to make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date><![CDATA[2011-09-30 13:46:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-09-30 21:46:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[information-architecture-more-than-skin-deep]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1543834914;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:304;}i:1;a:1:{s:2:"id";i:94;}i:2;a:1:{s:2:"id";i:118;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UX: The Break Room Microwave</title>
		<link>http://www.chrisstead.net/archives/474/ux-the-break-room-microwave/</link>
		<pubDate>Wed, 05 Oct 2011 21:35:10 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=474</guid>
		<description></description>
		<content:encoded><![CDATA[As is typical with the break room at many offices, we have a microwave.  Actually, we have two, but there is one in particular that everyone knows about and avoids.  Everyone but me*, that is.  It is a machine crafted in the forges of bad usability and total misunderstanding of user journey.

The main requirement for a microwave is that one be able to set the time for which their food will receive a nuclear blast, converting last night's roast beef into magma.  Either there is a "time cook" button, or you simply enter the time directly.  The uranium-235 does the rest.<!--more-->

In all seriousness, people expect time and power level entry to exist with a clear designation.  If a microwave has no designation, people often assume it is reasonable to simply begin keying a time.  This microwave is different.

My coworkers avoid the evil microwave because it doesn't do things the way they expect.  If you begin keying time, it sets off "auto cook" mode and cooks food for some pre-designated time in full-minute increments from 1-6.  There is no "time cook" button, only a "power" button.  It appears there is no way to enter the exact time something should cook for.

As it turns out, there IS a way to enter an exact time.  If you press "power" you can freely key in your time.  Yes, by opting to enter your power level, you are free to enter the amount of time to cook your food.

Clearly someone decided it would be efficient to trim the "time cook" button out of the process because it was an "unnecessary" action that make the overall process slower.  What they forgot to take into account is what people actually look for: how to enter the time.

Translation to the rest of the world?

Fewer clicks is just that: fewer clicks.  Just because you took away a couple of clicks in order to get the user to their destination doesn't mean you did them a service.  They may have relied on that waypoint on your site.  Though it cost them an extra click, they knew each click was an important step upon the journey.  You helped build their confidence in your site by marking the path clearly.  If you eliminate a critical sign at a fork in the road, your users may get lost.

If you find your users getting derailed at a certain point on your site, look for the missing "time cook" button.  Take care in guiding your users carefully through your site, adding an extra step if it makes the entire journey clearer.  Users only mind extra steps if they don't lead to clarity. Avoid building the efficient and impractical microwave and make the web a better place.

*I intentionally use the bad microwave. Since nobody knows how to use it, the traffic to that appliance is low. Food for thought.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date><![CDATA[2011-10-05 13:35:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-10-05 21:35:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ux-the-break-room-microwave]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551738070;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:256;}i:1;a:1:{s:2:"id";i:1142;}i:2;a:1:{s:2:"id";i:670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Information Organization for Seeking Behavior in 5 Steps</title>
		<link>http://www.chrisstead.net/archives/487/information-organization-for-seeking-behavior-in-5-steps/</link>
		<pubDate>Wed, 08 Feb 2012 18:00:33 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=487</guid>
		<description></description>
		<content:encoded><![CDATA[Information comes in all shapes and sizes.  Some is simple.  It's copy that goes on a page. It's an image.  It's a sound file. It's a single PDF. It's whatever atomic piece of information you can imagine.  Then there is the molecular level, for instance, whole web pages with mixed content.  Then there is listed information: movie titles, collections of documents, retail products, animals with feathers, types of beer, whatever.

Listed information can get tricky.
<!--more-->
I poked around the web to see how people were describing their lists and presenting them to the world.  In the end I came up with a set of <acronym title="Sort, Transform, Eliminate, Paginate and Search">STEPS</acronym> to help break off bite-sized pieces to digest.  I even came up with a cute little acronym in the process.

Here's how it works: STEPS is Sort, Transform, Eliminate, Paginate and Search.  It goes in that order, even.

<h4>Sort</h4>

The first thing to do with the list is sort it.  Generally you'll want to sort in order of general importance.  Sometimes alphabetically will be better.  Other times a different sorting algorithm may be useful.  Depending on the sheer volume of the information you may be able to do this by hand or, much like the meat in Chicken McNuggets, your information will need to be mechanically separated.  I won't dictate the correct sorting algorithm since it will vary, but it needs to be sorted first.  Sorting will make life easier through the coming steps.

<h4>Transform</h4>

Once you have the basic sorting figured out, you'll need to run a basic transformation on the resulting list.  This transformation usually includes chunking the sorted list into manageable portions, and preparing the set for display.  It is key, at this point, that you have already assessed <a href="http://www.uxbooth.com/blog/personas-putting-the-focus-back-on-the-user/" target="_blank">personas</a> for your project.  The personas you have developed, along with your understanding of business goals will be key in understanding how to effectively transform your information into something your users can use.

<h4>Eliminate</h4>

This is the first presentation step.  Elimination may be done <em title="prior to access">accessum priori</em> or it may be done on the fly.  This depends on your use cases.  Often you will know something about what your user needs before they start digging in, so why not make their lives easier and pitch the stuff they don't want?

<h4>Paginate</h4>

Even after eliminating all of the information your user doesn't need, there may well be a large list left to sift through.  Fortunately they are already sorted!  Pagination helps to trim what the user is looking at and makes each group manageable.  It's easier to skim a short list without getting tired eyes, the same cannot be said for a list hundreds of items long.  Keep the displayed list short.

<h4>Search</h4>

Even after doing all of this, you may still have page after page after page of information the user has to wade through.  Don't forget that users are generally search-oriented.  If they can just type in keywords and get what they want, or at least get close, they will be much happier.  Preparing information for search is at least a post in itself, so I won't talk about it here, but this last step could be the critical piece that makes or breaks your user experience when looking for something.

This is just a skeletal framework you can use to help focus each step along the way when you are organizing long lists of information for your users.  In the end, the way each step works will be defined by the scope of your project, the amount of information, business goals and chosen personas.  The same information could look radically different depending on these factors.  In the end, though, working step-by-step will help to focus efforts and steer you away from analysis paralysis.  Try my 5 STEPS process and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>487</wp:post_id>
		<wp:post_date><![CDATA[2012-02-08 10:00:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-02-08 18:00:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[information-organization-for-seeking-behavior-in-5-steps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1542344181;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:522;}i:1;a:1:{s:2:"id";i:211;}i:2;a:1:{s:2:"id";i:23;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Project Kickoff: Prepare to Deliver the Goods</title>
		<link>http://www.chrisstead.net/archives/514/project-kickoff-prepare-to-deliver-the-goods/</link>
		<pubDate>Fri, 21 Sep 2012 21:09:48 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=514</guid>
		<description></description>
		<content:encoded><![CDATA[We've all been there at some point or another.  A new project is just about to start.  Everyone in the know is bracing for impact and the people who are going to contribute are blissfully unaware of the monster lurking around the corner.

Generally the kickoff goes like this:

"Hey, everyone, our client needs an update to their website.  You know what you need to do, so let's hit it.  Peace out."

Do they know what they need to do?  At a high level, maybe?  Probably not, really.

Stakeholders don't know what's coming.  The client doesn't know what they need.  The design and development units are waiting until the other one is done with "their part."  In the end, everyone scrambles at the 11th hour and the project comes together. Barely.

Let's hit rewind and do this kickoff the right way.  If you are a team lead, figure out what you need.  Sort out who your users are and what business needs are being addressed on your site.  Contact stakeholders early, share what you need and the listen to what they want. Use this to sort out your priorities.  Organize the moving parts, call your team together and give them the rundown.

Once people have their marching orders, collect everyone for happy hour.  This is the first step in a long journey, start it with a cheers instead of a fizzle.  Kick off your projects right and make the web a better place.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 13:09:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-21 21:09:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[project-kickoff-prepare-to-deliver-the-goods]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="company-culture"><![CDATA[Company Culture]]></category>
		<category domain="category" nicename="project-management"><![CDATA[Project Management]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[How to look at a project kickoff and how to get people on board for the project.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[Project Kickoff: Prepare to Deliver the Goods]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551664097;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:263;}i:1;a:1:{s:2:"id";i:611;}i:2;a:1:{s:2:"id";i:1231;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moving Pieces: Organizing for a Website Overhaul</title>
		<link>http://www.chrisstead.net/archives/522/moving-pieces-organizing-for-a-website-overhaul/</link>
		<pubDate>Mon, 24 Sep 2012 17:00:22 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[I've read several different books and articles about web projects and how to make sense of what needs to happen when.  Everyone has their own slant and it flavors how the entire process should go.  Meanwhile they hope the "magic" in another group is happening.

It's really important to have a list of the things you need to accomplish.  I am not going to tell you who does what.  That depends on your team and how you dole things out.  I will tell you that each of these pieces needs to be addressed or you'll have a tough time moving to the next step.

Without anyere's my core list of stuff to check off:

<ol>
<li>Analysis</li>
<ul>
<li>Business and user needs</li>
<li>Content Inventory and analysis</li>
<li>Site analytics (Look at search terms. This is your user talking TO YOU)</li>
<li>Personas</li>
<li>Brand, voice and message</li>
</ul>
<li>Collect moving pieces</li>
<ul>
<li>Curated existing content (text, images, documents, etc.)</li>
<li>New content (Get it early or you'll hate yourself later)</li>
<li>Process functions (search, dynamic functions for displaying content, etc.)</li>
</ul>
<li>Design and prepare</li>
<ul>
<li>Information Architecture (Hierarchy, page layout, workflow, wireframes, etc.)</li>
<li>Build structured documents containing all raw copy for the site</li>
<li>Colors, designs, images, flow, implemented voice and message</li>
<li>Get info about servers, technical needs, etc.</li>
<li>Prepare SEO deployment plan</li>
</ul>
<li>Build</li>
<ul>
<li>Prepare comps using design specs and wireframes</li>
<li>Build templates to house content based on wireframes</li>
<li>Implement design via styles as comps are completed</li>
<li>Edit content to match voice and message and begin inserting into CMS</li>
<li>Prepare SEO: descriptions, titles, friendly URLs, etc.</li>
<li>Prepare 301 redirects for old pages being replaced or moved (I feel this SEO technique is important enough it needs to be stated separately)</li>
<li>Ensure servers are online, technical needs are met and everything is ready for launch</li>
</ul>
<li>Launch</li>
<ul>
<li>Stage site out of the public eye and QA completely</li>
<li>Deploy site (Post-QA)</li>
<li>QA for sanity (All pieces are behaving like they were on staging, nothing is broken)</li>
<li>Celebrate!</li>
</ul>
<li>Postmortem</li>
<ul>
<li>Review analytics and compare to pre-release stats</li>
<li>Inventory new site (include all new copy, new images, etc.)</li>
<li>Review conversions</li>
</ul>
</ol>

Build your core list of needs and lead your team to the promised land.  One project at a time, make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 09:00:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-24 17:00:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moving-pieces-organizing-for-a-website-overhaul]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="company-culture"><![CDATA[Company Culture]]></category>
		<category domain="category" nicename="content-strategy"><![CDATA[Content Strategy]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="project-management"><![CDATA[Project Management]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[A 5-stage approach to preparing for a website update or overhaul and a list of things to worry most about.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[Moving Pieces: Organizing for a Website Overhaul]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1539877659;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:487;}i:1;a:1:{s:2:"id";i:247;}i:2;a:1:{s:2:"id";i:454;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Herding Cats or Looking at Curated Search</title>
		<link>http://www.chrisstead.net/archives/531/herding-cats-or-looking-at-curated-search/</link>
		<pubDate>Fri, 28 Sep 2012 17:00:53 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=531</guid>
		<description></description>
		<content:encoded><![CDATA[You know what makes Google awesome? Their search algorithm is pretty darn smart.  You know what makes DOMZ awesome? Every stinking link on there has been verified by a real, honest-to-goodness human being.  You know what sucks about site search on most websites, even when they're running a Google custom search? The only time a human ever looks at the search is when they are actually using it to find something.

This is where a curated site search comes in.

When I say curated, I mean it in much the same way a museum curator takes care of the displays, carefully selecting the pieces to display and updating things as new events and collections are integrated or moved out of public display.  Think about it, if you went to a site looking for glasses for your cat and did a search saying "Siamese cat glasses," wouldn't it be awesome if, right above all the standard mediocre search results, you got a little bit of content saying "we've got glasses that will look great on your Siamese cat?"

Of course it would.

The benefit of this is that you have a better understanding of what a person is looking for than a computer ever will.  Why? Two reasons, really.  First is because you are a person and, I suspect, you have done searches for things before.  Second, no matter how good the crawler is that indexes your site, you have access to your analytics, which means you know what people are searching for.  (You're running analytics, right?)

An example of how this works can be found on the HP site.  Below is a screencap of what their search looks like if you search for TouchSmart.  (I picked that term because it is their current ad and I knew I would get something good. Color me sneaky.)  You'll note they have a list of search results on the screen, but the very first thing to come up is a link straight to the TouchSmart product information.

<img src="/wp-content/uploads/2012/09/hp-curated-search.png" alt="HP Curated Search Content" class="aligncenter" />

Pretty sweet, right?

Okay, maybe looking at a computer search page doesn't get you all revved up and ready for action, but imagine if that image were your Siamese cat in need of glasses.  Now we're talking turkey, right?

<img src="/wp-content/uploads/2012/09/siamese-glasses-search.png" alt="That cat needs some glasses" class="aligncenter" width="500" height="369" />

This doesn't do anyone any good if it doesn't do anyone any good, right?

Absolutely.

What?

The long and short of it all is, by curating content for commonly searched items on your site, you make the information/product/widget/catglasses more <a href="http://findability.org/archives/cat_findability.php" target="_blank">findable</a>.  This means you are more likely to have conversions from site visitor to customer.  Benefit to your customer: ease of use. Benefit to you: more business. Stick that in your ROI pipe and smoke it, Mr. Executive.

In the end, everyone wins when things are easier to find.  Since so many users are search-centric, you can serve them well by anticipating the searches they are going to perform and give them the info you know they want up front.  This front-loading of work helps to provide a clear signpost for users to do what they were at your site to do: make with the business with you.  In short, if you are running a site search for your users you should consider curated content to provide for common searches and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>531</wp:post_id>
		<wp:post_date><![CDATA[2012-09-28 09:00:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-28 17:00:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[herding-cats-or-looking-at-curated-search]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="content-strategy"><![CDATA[Content Strategy]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[A look at what curated search content and how it affects users and information findability.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551427265;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:26;}i:2;a:1:{s:2:"id";i:166;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plan Your Device Strategy</title>
		<link>http://www.chrisstead.net/archives/554/plan-device-strategy/</link>
		<pubDate>Mon, 01 Oct 2012 17:00:28 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=554</guid>
		<description></description>
		<content:encoded><![CDATA[As mobile gains ever more ground and mobile first continues to be knocked around as the design strategy for the web, I encourage people to look at their use statistics.  Although mobile first is a great strategy if you don't have statistics to draw upon for your site, or your reorganization needs a mobile injection, nothing will serve you better than the statistics regarding what your user does on your site.

Instead of simply adopting an oversimplified "mobile first" strategy, I decided it would be best to figure out what the user is doing in each mobile context.  For the simple sake of reason, I generally say we have three platforms and four positions to deal with.  Either your user is on a small-profile device like a phone or palm-top computing device, they are on a tablet, or they are on a standard computing device.

This gives us something really easy to work with.  There are three devices, two of which have two orientations.  It might seem like this translates to 5 total designs to commit to.  Fortunately, the phone in landscape is just about the same width as the tablet in portrait.  We are left with four design contexts to worry about.  Realistically, though, we can start with just three pieces of the puzzle and extrapolate the intermediate fourth.

My latest project, for which I am leading a team, needs two key items to make sense of the high-priority items on the site: device used and pages accessed.  After a bit of careful fiddling, I uncovered the following chart:

[caption id="" align="aligncenter" width="400"]<img title="Device to Traffic Chart" src="/wp-content/uploads/2012/10/high-traffic-pages.png" alt="Device to Traffic Chart" width="400" height="271" /> Device to Traffic Chart[/caption]

This chart helped me to figure out what our device strategy would be.  Clearly our visitors from mobile devices have much more limited interests than those visiting from a standard computer interface.  Mobile first means we should guess at what should go on a site and what the user will want to do on a smaller device.  By analyzing the data, we can clearly define interactions on mobile devices which may, actually, not be important to highlight on the desktop.

Instead of working with mobile as a pared down version of a complete site, we should aim to understand what a user wants to accomplish in a different context.  This is not a cut and dried rule of thumb but something we can produce through a little bit of careful reflection on what users are doing right now.

For your next project, instead of taking a mobile-first design stance, review your user data and serve users in each platform according to their needs.  Provide clear signposts for your users.  Develop a device strategy and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>554</wp:post_id>
		<wp:post_date><![CDATA[2012-10-01 09:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-01 17:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[plan-device-strategy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="content-strategy"><![CDATA[Content Strategy]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551427255;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:725;}i:1;a:1:{s:2:"id";i:226;}i:2;a:1:{s:2:"id";i:143;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stop Worrying About Your Followers</title>
		<link>http://www.chrisstead.net/archives/575/stop-worrying-followers/</link>
		<pubDate>Fri, 16 Nov 2012 23:05:59 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=575</guid>
		<description></description>
		<content:encoded><![CDATA[Yeah, I said it.  Knock it off.  Stop worrying about how many people are following you on Twitter.  Forget about how many friends you have on Facebook.  Quit fussing over whether someone stopped following you or decided they didn't want to be your "friend."  They don't know you any more than you know them.  It's nothing personal, they just stopped.

Social strategists say that every follower counts.  Each person who is on that magical list is a potential lead waiting to be tapped.  Honestly, that's likely untrue.  Of all the people who have friended, followed, liked, thumbs-upped, uprated, upvoted, kudos-gave or otherwise gave you two seconds of their attention, there is only a small percent which are actually in the market to buy something.

Some of the people liked that little one-liner you rattled off one day when you were feeling smug.  That guy over there thought your opinion matched his own.  Those three women who started following you are actually men and they are just goofing off.

In the end, follower or friend counts are much like the stock market.  If you watch them daily to see whether you're trending up or down, it will make you neurotic.  Trust me, I know a thing or two about being neurotic.  If you really need to keep an eye on things, do a weekly report.  Look at last week's numbers and compare them to the numbers you gathered today.  Was there growth? Was there attrition?  How bad was the attrition?  How good was the growth?

In the end, people are slaves to their whim.  What might engage them today could drive them off tomorrow.  If you are seeing small wiggles in your count, consider it normal human behavior.  If you see large, sweeping sinusoidal trends, maybe there's something to gain from the behavior.

In the end, the follower or friend count is a small part of a much bigger story.  When you start assembling your data, keep that in mind and don't use that single statistic to drive your online behavior.  If you can just do that, you'll help alleviate your own stress and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>575</wp:post_id>
		<wp:post_date><![CDATA[2012-11-16 15:05:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-16 23:05:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stop-worrying-followers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="content-strategy"><![CDATA[Content Strategy]]></category>
		<category domain="post_tag" nicename="facebook"><![CDATA[facebook]]></category>
		<category domain="post_tag" nicename="followers"><![CDATA[followers]]></category>
		<category domain="post_tag" nicename="friends-neuroses"><![CDATA[friends. neuroses]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="post_tag" nicename="stop-that-before-you-go-blind"><![CDATA[stop that before you go blind]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551438495;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:349;}i:1;a:1:{s:2:"id";i:429;}i:2;a:1:{s:2:"id";i:655;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Monetizing the Web</title>
		<link>http://www.chrisstead.net/archives/580/monetizing-web/</link>
		<pubDate>Wed, 16 Jan 2013 18:00:02 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=580</guid>
		<description></description>
		<content:encoded><![CDATA[Today I read an article about Irish newspapers plotting to charge for linking to their content.  We've all heard about this before and people seem to get up in arms about it every single time it is mentioned.  I think this frustration and disgust are misplaced.

See, here's the deal: if you want to make money from people using your site, you have to get them there.

Ultimately, there is a paradigm shift that happened with the web which traditional media is having a hard time wrapping their brains around -- links are gold. They are the currency of the web and the word of mouth in the electronic universe.

At one time, it made sense for media outlets to limit the distribution of their content through other media channels.  It hurt sales and trimmed valuable advertising money from their pockets.  They never said "don't mention our article to people or we'll charge you." That's foolishness. Big media wanted, and still wants, people to know they got the scoop before anyone else.  It keeps them in business.

So why limit linking?  It limits the number of page views and, subsequently, the amount of advertiser money that comes in.

I get it.  They want you to click around the site looking for that one piece of content you heard about.  The problem? News sites pretty much universally stink with regard to user experience and findability.  If it isn't on the front page it may as well have never happened.  This is the heart of their problem, really.  They are spending so much time trying to milk every penny out of someone's pocket they can't see they need some real help.

My message you to, media outlets: Fix your sites.  Make them easier to use.  Put your reader first instead of your pocketbook.  The advertising money will come.  If you want to erect paywalls, fine, but don't kill the one thing which might save you.  Protect your links.  Treat them like someone handed you free money. Encourage people to share. If you don't, I won't be angry, I'll just never know you existed.  Do us all a favor and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>580</wp:post_id>
		<wp:post_date><![CDATA[2013-01-16 10:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-16 18:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[monetizing-web]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="company-culture"><![CDATA[Company Culture]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551664128;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:454;}i:1;a:1:{s:2:"id";i:26;}i:2;a:1:{s:2:"id";i:180;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>We Live in a Biosphere</title>
		<link>http://www.chrisstead.net/archives/602/live-biosphere/</link>
		<pubDate>Thu, 27 Jun 2013 16:46:43 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=602</guid>
		<description></description>
		<content:encoded><![CDATA[You may or may not be aware of this, but when we are interacting with an application, we are entering a biosphere. People always talk about suites of applications as being an ecosystem, but even within the constraints of single app, we are still interacting with a smaller, but equally important, ecosystem.

About three years ago, I wrote a blog about <a title="I Didn't Expect That to Happen" href="http://www.chrisstead.com/archives/233/i-didnt-expect-that-to-happen/" target="_blank">page-behavior taxonomy</a> or, as I generally refer to it now, behavior taxonomy. This taxonomy is really a mental model the user creates based on previous interactions they have had within your page, site or application.  It's really crucial to understand that as you present links, behaviors and interactions, you are training your user.  When you break that interaction model, you are breaking rules the user expecting you to follow.

Consider the biosphere projects scientists construct for the purpose of experimentation.  Everything in that tiny ecosystem must work together properly.  If an element is introduced which changes the ecosystem, it could cause a breakdown of the entire experiment. These small changes are what happens when the biological equivalent of <a title="Luke W on Microinteractions talk" href="http://www.lukew.com/ff/entry.asp?1726" target="_blank">microinteractions</a> are not considered.

The key to considering these mental models is to look at the application as a whole and start developing an expectation of what the user will experience throughout their time in your app or site. If you look at the app as a whole early on, then it becomes clear what each interaction should bring.  Think about how people are going to move about.  What kinds of input are they going to give.  Why are they doing it and how would they expect it to work?

Of course you should expect change, but the if the initial behavior taxonomy is sound, new additions will only serve to enhance the experience.  If, on the other hand, care is not taken to develop the rules to which your app should adhere, you will paint yourself into a corner.  You will make decisions early on which will force your hand later on.  If you choose to break from the model, you will also break your users trust If your app is something that is going to be foisted upon users, they will learn to deal with it and resent you.  If your app is something users interact with by choice, they will leave.

In the end, we are all in this little biosphere together.  Let's live in peace and harmony.  Consider the environment and care for it. Your users will thank you for it. Consider your app's behavior taxonomy and make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>602</wp:post_id>
		<wp:post_date><![CDATA[2013-06-27 08:46:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-27 16:46:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[live-biosphere]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[has_been_twittered]]></wp:meta_key>
			<wp:meta_value><![CDATA[failed]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[twitter_failure_code]]></wp:meta_key>
			<wp:meta_value><![CDATA[410]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[twitter_failure_reason]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551664305;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:304;}i:1;a:1:{s:2:"id";i:127;}i:2;a:1:{s:2:"id";i:964;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Yo dawg, I heard you like accessibility...</title>
		<link>http://www.chrisstead.net/archives/606/yo-dawg-heard-accessibility/</link>
		<pubDate>Thu, 05 Sep 2013 22:33:00 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=606</guid>
		<description></description>
		<content:encoded><![CDATA[So I put accessibility in your menus so your users can use your site even if they are disabled.

Okay, so I suck at yo, dawg jokes. I did, however make a handy little menu script.  It's small. It's functional. It supports accessibility features like roles and keyboard access. It's easy to turn some plain old HTML into a menu without having to know ANY javascript.  Am I a mad genius? Quite possibly, but I'll take what I can get.

So, here's the deal, you can download the alpha release at the following link:

<a href="https://github.com/cmstead/ClickBeetleJS/releases/tag/v0.5-alpha">https://github.com/cmstead/ClickBeetleJS/releases/tag/v0.5-alpha</a>

If you want to actually code and help make it better you can fork the project here:

<a href="https://github.com/cmstead/ClickBeetleJS">https://github.com/cmstead/ClickBeetleJS</a>

Important things you should know:

ClickBeetleJS requires jQuery.
Pull requests won't be accepted without passing tests associated.
All my tests are written with QUnit. Please write yours using the same framework.

I hope this is useful for you.

Help me make the web a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>606</wp:post_id>
		<wp:post_date><![CDATA[2013-09-05 14:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-05 22:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yo-dawg-heard-accessibility]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551427264;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:655;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:614;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>To New Beginnings</title>
		<link>http://www.chrisstead.net/archives/611/to-new-beginnings/</link>
		<pubDate>Fri, 01 May 2015 17:00:13 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=611</guid>
		<description></description>
		<content:encoded><![CDATA[Wow! It's shocking that the last post I wrote here was almost a year and a half ago. I guess it's been busy!

In that time I worked for an education company, got laid off, found work at a startup and wrote a LOT of code. Am I older? Definitely. Am I wiser? I certainly hope so. If anything I gained a lot of insight and found evidence for my suspicions.  User experience is crucial and the only people who can guarantee a good experience are the people who create the software that users touch.

I spent much of the past 10 years trying to figure out what I wanted to be when I grew up.  I went through phases of user experience, accessibility, project management and research.  All the while I was busy writing software.  What I ultimately discovered is I like writing software.  I like creating things.  There's a rush that I don't get anywhere else but there.  That doesn't get me the answer I was necessarily looking for, but I suppose it gave me something I could hold on to.

Another important thing I discovered along the way is there are a lot of people who have a lot to learn (including me) but I discovered something I didn't believe before now: I have something to share.  For as much as I don't know I have been fortunate to learn a lot of lessons and I can share that with people so, maybe... hopefully, they can either grow from what I experienced or, at least, I can help buoy their spirits a little by showing that everyone makes mistakes.

Wisdom is what you get when you don't get what you want.

I didn't come up with that phrase, but it sure sums up what I feel to be true.  Just because things didn't work out the way you originally planned or wanted doesn't mean that things didn't turn out at all. Failure is such a better teacher than success that I just can't imagine why people fear failure so much.  I aim to fail every day. Failing is awesome. Success just means you're done, but when you fail, that means you went from working on something routine to a fascinating new puzzle. What a great opportunity!

I could go on and on like this for pages, talking in circles and rambling about vague pasts and lessons learned, but that isn't what I set out to do.  This post marks the beginning of a new era for me and this blog.  I won't promise that I will never post long diatribes about strange new discoveries I may or may not have uncovered myself.  What I can say is I have a focus today like I never could have imagined when I started writing this blog years ago.

I want to make stuff awesome and make awesome stuff. I want you to do the same.  I still want to make the web a better place, but maybe, somewhere along the way, I, or we, can actually make software better.  Let's toast to new beginnings and new projects.  Here's to all the projects that never quite were and the ones that are yet to come. Let's make software. Let's make it great. Let's make it together.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>611</wp:post_id>
		<wp:post_date><![CDATA[2015-05-01 09:00:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-01 17:00:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[to-new-beginnings]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420185;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1226;}i:1;a:1:{s:2:"id";i:896;}i:2;a:1:{s:2:"id";i:1231;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>490</wp:comment_id>
			<wp:comment_author><![CDATA[Carrie Lewis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[carrieontheweb@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://carrieontheweb.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[23.126.154.236]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-05-06 09:27:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-05-06 17:27:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just want to say....

1. Dig the phrase.
2. Failing is pretty cool and something I just recently learned how to look at differently.
3. Your diatribes are epic, and I miss them. :-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1430933228.014106;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1431966924.7831261;s:7:"message";s:44:"chris changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Callbacks, callbacks, callbacks!</title>
		<link>http://www.chrisstead.net/archives/614/callbacks-callbacks-callbacks/</link>
		<pubDate>Mon, 18 May 2015 17:25:37 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=614</guid>
		<description></description>
		<content:encoded><![CDATA[Waiter,

There's a promise in my spaghetti.

***

So, dig, I like promises.  People I work with and people I talk to think I don't but I really, genuinely do. Promises (in a computer science way) are just plain awesome.  Here's the idea:

Program module: Yo, system, I want to do something and I want it to happen on another thread so I can keep doing stuff.

System: Okay. I'm doing it. Here's an IOU, let me know when you are ready to collect.

Program module: Okay, I need that stuff now.

System: I'm not ready yet. Please hold.

Program module: okay, I'll wait.

System: Okay, I'm done now, here's the stuff you wanted.

Program module: Cool, thanks. Game on!

What happened here?  Basically a promise was issued and the program continued running with an async process continued in the background. When the program was ready for the data, but the data wasn't ready, the promise became a blocking operation. Once the system was done, it delivered what was needed and the block was released.  This is awesome because you don't end up with something that blocks up front. This can be annoying when you need something to appear completely transparent and non-blocking.  Such is the way of the world.

Javascript promises are, let's just say... different. Everyone likes to say "oh they stop callback hell! They are the magic bullet!" Incorrect!

Promises are just syntactic sugar over a callback structure, which basically seems like a big fat lie to me. I don't like the idea that I am "getting rid of callbacks" and really all I am doing is tucking away functions in a place where I have to do a TON of work to get tests around them. I have seen some of the worst code ever written inside of promise callbacks because "hey, it's promise. It's cool, man. You don't need to test that."

*cough* yes you do *cough*

Did you notice how I said "promise callback?" Yep, there it is. Promises and callbacks are still the same. You still pass in callbacks. You still have to handle the asynchronous nature of it all. This is where I climb to the mountaintop and proclaim "the cake is a lie!"

Then there is the q.all argument:

"What if you need to do a bunch of things and then call back? That's like... complicated, man."

It is. This was one the one concession I make... well, I USED to make. Q.all is pretty cool. Don't get me wrong, anything that will bundle up a bunch of async calls and then hang out until they are all done, THEN callback is pretty darn nifty.  The problem is you are still introducing this idea of promises into the mix.  Stuff happens, the spell is woven and magic happens... Magic that is basically untestable.

So, let's stop trying to paint the callback turd with a single layer of abstraction that makes things murkier and more difficult to understand. Promises are magic that have become lingua franca of async spaghetti. Instead, let's have a look at a handy new library borne of Node and easily pulled into the client: <a title="Async on NPM" href="https://www.npmjs.com/package/async" target="_blank">Async</a>

Dear promises, never send to know for whom the bells tolls; it tolls for thee.

Async deals with callbacks differently. Instead of wrapping everything up in a nasty set of promise.then().then().thens, try async.waterfall(). It's like magic:

async.waterfall([
firstOperation,
secondOperation,
thirdOperation
], finishFunction);

Now your code actually says what it is doing. Callback hell is gone. Promises are eliminated. All is right in the world.

But what if I want to do a bunch of stuff that doesn't happen in serial? Parallel. Check it, yo:

async.parallel([
anOperation,
anotherOperation,
yetAnotherOperation
], finishFunction);

It's like magic right?

In closing, all I would ask is, if you are going to write a bunch of async stuff, please give me and everyone else on your team a break. Async is the way to righteousness and the light. Promises are great when you absolutely, positively must have it sometime later, but most work can be done with async. Give it a try and make your code a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date><![CDATA[2015-05-18 09:25:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-18 17:25:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[callbacks-callbacks-callbacks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551431150;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:919;}i:1;a:1:{s:2:"id";i:890;}i:2;a:1:{s:2:"id";i:1082;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>491</wp:comment_id>
			<wp:comment_author><![CDATA[Jake]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jakobharclerode@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.228.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-05-18 13:50:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-05-18 21:50:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[LONG LIVE PROMISES!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1432702406.3678751;s:7:"message";s:44:"chris changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1431985857.148283;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>492</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-05-26 20:53:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-05-27 04:53:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Long live trolling! LOL]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>491</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1432702435.397043;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Everyday Functional Programming in Javascript</title>
		<link>http://www.chrisstead.net/archives/620/everyday-functional-programming-in-javascript/</link>
		<pubDate>Wed, 27 May 2015 22:54:38 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=620</guid>
		<description></description>
		<content:encoded><![CDATA[I gave a talk at the beginning of the year about <a href="http://www.chrisstead.com/presentations/functionaljs/#/1" target="_blank">functional programming</a>. Someone asked "can you do functional programming little by little or do you have to do it all, all the time?"

When I answered, I felt I didn't give them the answer they deserved or that I could have given.  This is my answer. Yes, you can do a little or a lot. You can write functional code little by little and solve things without changing your life and your career.  You can write programs that aren't academic or theoretical. You can write everyday functional code.

So what does everyday functional programming look like?  Unless you work somewhere that you write in Lisp, Clojure, ML, F#, Haskell, etc, then it doesn't look anything like the high-brow academic tutorials you see most often.  You don't talk in monads and exclusively pure functions.  It's not an ivory tower. At best you are a warrior acolyte of the functional cloth.

<strong>State is a thing.</strong>

So, when you are working in functional languages, state is a difficult knot to untie. Since values are immutable and shared state is the work of something unholy and evil, handling things like state machines becomes a chore. Who wants to go to work and think "today is the day I have to tackle the beast. I hate today?"

Not. Me. Thanks.

Sometimes you really need state. You actually need to know what happened and what is coming.  Sometimes you want something that you can mutate and something that is transitory, but still in memory. Hi to all of you Haskellians, yes I know there are other ways of doing that kind of monkey business, but I just don't wanna. It looks a little too much like work and a little too little like fun.

<strong>First class functions are for everyone.</strong>

Now that I got the state stuff out of the way that OO does just so well, let's talk about what functional workflow looks like in my happy little world. Arguably the thing I feel differentiates functional programming from programming that isn't is the beautiful higher order function.

I mean, it's magic right? Higher order functions, I mean look at this:
<pre class="language:javascript">    
    function add(a, b){ return a + b; }

    function addTheseNumbers(numberArray){
         return numberArray.reduce(add, 0);
    }

</pre>
That's what I am talking about. Functions that take functions as arguments. It's all kinds of awesome, right?

Okay, in all seriousness, the real awesome comes when you start blending pure functions in with your stateful code and moving all of that stateless logic into something that makes more sense for what you are trying to accomplish. Let's have a look at one of my all time favorite constructs. It's what makes my world go 'round: either.

Watch this.
<pre class="language:javascript">    
    //What life was like before
    function doStuff(someData){
        var someProperty;

        if(!!someData){
            if(!!someData.someSubData){
                someProperty = someData.someSubData.someProperty;
            }
        } else {
            someProperty = 'default value';
        }
        //What the crap is this???
    }

    //What life is like now
    function doStuff(someData){
        var defaultData = {
                someSubData:{ someProperty: 'defaultValue }
            },
            someProperty = either(defaultData, someData).someProperty;
        //Hooray! Now we can set a default
    }

</pre>
All of this because, honestly, who needs all the conditionals? Do you care about the conditional logic or do you just care about the data? Personally, I think conditional logic is the devil. I mean, honestly, the worst bugs and the most  difficult mess comes from all of these horrible, horrible conditionals. Let's cut to the chase and just make it right.

Here's something even more amazing, ready for this? ARE YOU READY? Yeah, you're ready.
<pre class="language:javascript">    //I mean, it MIGHT be an array or it might just be null. Who knows, right?
    function doFunctionalStuff(myArrayMaybe){
        return either([], myArrayMaybe).filter(somePredicate)
                                       .map(transformStuff)
                                       .reduce(reducerFunction);
    }

</pre>
I mean, DUDE, you can skip all of the worrying. If something null happens, you just pretend it never existed and everything turns out just fine. With just one new function, all of a sudden you get  all of the functional goodness that Javascript has to offer.

What does either look like?
<pre class="language:javascript">    function either(defaultValue, maybeValue){
        return !!maybeValue ? maybeValue : defaultValue;
    }

</pre>
That's it. It's the gift that keeps on giving.

At the end of the day, what I am really getting at is this: everyday functional programming is all about cutting to the core of what you want to do and eliminating the conditions, unnecessary shared state and error prone code so you can keep your sanity. It's not about all pure functions all the time. It's not always about monads and currying. It's about the little things that make a big difference so you can do your best work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>620</wp:post_id>
		<wp:post_date><![CDATA[2015-05-27 14:54:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-27 22:54:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[everyday-functional-programming-in-javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551475344;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1109;}i:1;a:1:{s:2:"id";i:1035;}i:2;a:1:{s:2:"id";i:992;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>493</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Kent]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mkent@events.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.228.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-05-27 15:05:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-05-27 23:05:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice article!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1432767913.0774381;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1433053466.7479689;s:7:"message";s:44:"chris changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Browser-side Isomorphic Javascript</title>
		<link>http://www.chrisstead.net/archives/644/browser-side-isomorphism/</link>
		<pubDate>Wed, 03 Jun 2015 17:00:18 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=644</guid>
		<description></description>
		<content:encoded><![CDATA[With the advent of Node, there has been discussion of isomorphic Javascript.  The general idea behind this is code written for server-side purposes can also be used for UI purposes. The problem with this notion is, it doesn't account for browser UI/middleware considerations in the browser.

As client-side development progresses and software as a service (SaaS) and single-page applications (SPAs) become more common, UI developers continue to program based on user interactions with the view layer and the underlying logic gets woven into the UI code, littering data logic with DOM related code, which tightly couples the UI code to the data code, creating complicated, unmanageable software.

What ends up happening is code gets duplicated to serve the same purpose, and then the code gets out of sync. Bugs creep in and pretty soon the software starts getting cracks in the facade. Even frameworks that are intended to avoid this kind of behavior, like Angular, are built in a way that allows for divergent code.  Let's have a look at a snipped of code that could diverge quite quickly, in Angular.

<pre class="language:html">

<!-- This is in the view somewhere -->
<input type="text" id="weird-id" ng-required="true" ng-pattern="^abc\d{3,5}$" />

</pre>

<pre class="language:javascript">

//This is data validation somewhere before submission
function validateId(value){
    return value.match(/^abc\d{3,5}$/) !== null;
}

</pre>

Obviously there was some cutting and pasting that went on here.

What happens when the requirements are changed? Will this developer remember that the regex needs to be changed in two locations? Will this developer even still be working for the same company?

Even if this is remembered once, it is almost guaranteed to be forgotten about.  This is especially heinous because there are clearly two different concerns being served here.  One place the UI is handling input validation so the user can get immediate feedback, the other is likely to be related to handling validation before data is sent to a service somewhere.

It is not obvious even from this simple example that <acronym title="Don't Repeat Yourself">DRY</acronym> could be applied here. Of course it can, but the solution is not completely obvious.  Since this is not a post about Angular validation, I will leave the Angular-specific details as an exercise for the reader.  Instead, let's take a look at a more general solution.

Obviously the script handling the validation is pretty general so we're probably safe to start there. Let's keep it. That means all we really need is validation for the UI. Let's have a look at something that would give us the behavior we want:

<pre class="language:javascript">
function attachIdValidator(element){
    element.addEventListener('change', function(event){
        var inputValue = element.value,
            validValue = validateId(inputValue),
            elementHasError = element.classList.contains('error');

        if(!validValue && !elementHasError) {
            element.classList.add('error');
        } else if(validValue) {
            element.classList.remove('error');
        }
    });
}
</pre>

Now our element has the same validation attached that our outgoing data will use to ensure everything is on the up and up. Honestly, though, this is a fine first pass, but you and I both know this isn't the only validator you are going to use to handle your user inputs. Why don't we do a little more cleanup and write something we can really get some mileage out of.

<pre class="language:javascript">
function setErrorState(element, validInput){
    if(!validInput && element.classList.contains('error'){
        element.classList.add('error');
    } else if(validInput){
        element.classList.remove('error');
    }
}

function attachValidator(element, validator){
    element.addEventListener('change', function(event){
        var inputValue = element.value,
            validValue = validator(inputValue);

        setErrorState(element, validValue);
    });
}

//Applying our new logic would look like this:
attachValidator(document.getElementById('weird-id'), validateId);

</pre>

Now, that's what I call DRY code. Now we have taken one piece of logic, isolated it and applied it in the places we need it. Sure it took a little extra code to get us there, but you can see the difference it makes.  Now if someone comes along later and says "gosh, it would be great if the ID values could start with efg instead of abc," anyone who is currently working with the code can go and update the validation logic and it will update the requirements everywhere.

What's even better is, now we have a UI validator that we can apply any kind of validation logic and not need to continue writing and rewriting UI logic to handle all of that mess. Extra special bonus is this entire thing is written in vanilla Javascript, so it's extra small, tight and as fast as we could make it.

When you do this in your code, go ahead and pat yourself on the back. You deserve it.

In the end, what people are really talking about when they say isomorphism, what they really mean is "don't repeat yourself." When that's the goal, then isomorphism doesn't have to be limited to client/server applications. Take the lesson and run with it. Make your code better and your users (and your boss) happier. Let's use isomorphic code to make the world a better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>644</wp:post_id>
		<wp:post_date><![CDATA[2015-06-03 09:00:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-03 17:00:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[browser-side-isomorphism]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1542295135;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1004;}i:1;a:1:{s:2:"id";i:683;}i:2;a:1:{s:2:"id";i:907;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>(Not) Another JS Testing How-To</title>
		<link>http://www.chrisstead.net/archives/655/not-another-js-testing-how-to/</link>
		<pubDate>Wed, 10 Jun 2015 23:10:26 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=655</guid>
		<description></description>
		<content:encoded><![CDATA[There are lots of posts about how to write your first unit test in Jasmine or Mocha, and many of them draw directly from the Jasmine how to. Let's pretend, for a moment, that you are a developer who is already familiar with unit testing and what you really, REALLY need is a way to actually get things started without having to read a whole host of how-tos, setup documentation etc, when all you really want to do is get to unit testing.

First, let's get the Grunt versus Gulp conversation out of the way. I say neither! Though task runners can make CI much easier, this post is about getting a quick start into actually doing unit testing. By setting up a good, solid base configuration, moving to a task runner can be as simple as just applying the configuration you have with the runner you choose. Perhaps you like Tup...

Anyway, now that we have all that out of the way, let's talk tooling:

When we are done, this is the toolset you will have for your testing needs:
<ul>
	<li>Node and NPM</li>
	<li>Jasmine</li>
	<li>PhantomJS</li>
	<li>Karma</li>
</ul>

The biggest hurdle you have to cover to get everything up and running is to get Node.js up and running.  For most reading this article, all you have to do is visit the <a href="https://nodejs.org/" target="_blank">Node.js website</a> and click install. You will get the right binary and you will be off and running.

Once Node.js is installed, it is all downhill. I created a Github project that you can use to quickly get started with unit testing on just about any platform. You can either <a href="https://github.com/cmstead/jsTestDemo/archive/v1.0.0.zip">download the release</a>, or follow the directions below:

<pre class="language:shell">
git clone https://github.com/cmstead/jsTestDemo.git
</pre>

Once you've copied this repo one way or another, setup is really simple. You will need to install Karma and Phantomjs globally, so I created a handy one-time use script you can run. After the global installs are finished, you can run the project specific installer and you'll be ready to rock and roll. Open a console wherever you cloned the repository and run the following commands:

<pre class="language:shell">
#This does your one-time setup
npm run-script globalinstaller

#This is your project-specific setup
npm install
</pre>

No fuss, no muss. You're welcome. ; )

You'll see lots of packages stream by in the console. Once everything installs, you're ready to start testing. It's not exactly exciting bedtime reading, but I definitely recommend looking at the Jasmine <a href="http://jasmine.github.io/2.0/introduction.html" target="_blank">website</a>. Their documentation is written as a set of unit tests for the framework, which is novel, but it makes things a little hard to figure out on first read.

Let's have a look at a (barely) annotated first unit test:

<pre src="language:javascript">

describe('testObject', function () {

    var testObject;

    //test setup
    beforeEach(function () {
        testObject = {
            foo: 'bar',
            baz: 'quux'
        };
    });
	
    //test teardown
    afterEach(function () {
        testObject = null;
    });

    //A single unit test
    it('should be an object', function () {
        //The equivalence of an assertiion
        expect(typeof testObject).toBe('object');
    });
});

</pre>

When you start writing unit tests for your code, be sure to review the Karma configuration file in the spec folder.  Most settings can be left exactly as they are, but the paths should be updated to match your project structure.  I've included the code below so you can see the lines which need to be updated:

<pre class="language:javascript">
files: [
            //Uncomment the following line and change the directory
            //to match your project structure.
            //'../scripts/**/*.js', //change me
            './**/*.spec.js'
        ],

        preprocessors: {
            //Change this to match your project directory structure
            '../scripts/**/*.js': ['coverage'] //change me too
        }
</pre>

Although this isn't the snappiest blog post I have written, I have gone through this process so many times I have created templates for different kinds of projects just to save time and simplify the process of setting up unit tests, linting, ES6 transpilation, code coverage, etc.

With so many different configuration options, limited documentation and roadblocks I have encountered as I have gotten systems set up, I wanted to put something together that might help save someone else a little pain and suffering. If you have feared unit testing in Javascript because of setup troubles, consider this your personalized invitation. Unit test your code and make the web a better place!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>655</wp:post_id>
		<wp:post_date><![CDATA[2015-06-10 15:10:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-10 23:10:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[not-another-js-testing-how-to]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551431175;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1128;}i:1;a:1:{s:2:"id";i:1217;}i:2;a:1:{s:2:"id";i:907;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Don&#039;t Talk About My ObjectMother That Way</title>
		<link>http://www.chrisstead.net/archives/670/dont-talk-about-my-objectmother-that-way/</link>
		<pubDate>Wed, 17 Jun 2015 17:00:41 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=670</guid>
		<description></description>
		<content:encoded><![CDATA[When last we met, we talked about <a href="http://www.chrisstead.com/archives/655/not-another-js-testing-how-to/" target="_blank">setting up unit testing for Javascript</a>. I'm sure anyone reading this blog is at least aware of the idea of software design patterns.  There are all of these known challenges with canned solutions. If the solution isn't ready out of the box, it is with just a little bit of tweaking. Something you might not be aware of is there are unit testing design patterns too. 

Er... What?

I know, most people think of unit testing as either something they tolerate because it's required or, at best, a list of tiny little functions that guarantee that a particular behavior matches the expected business requirement. Where is there room for design patterns?

Many patterns come in the form of best practices, but there is one that is at the top of my list of all time favorites.  <a href="http://martinfowler.com/bliki/ObjectMother.html" target="_blank">The ObjectMother pattern</a> is a design pattern tailor made for unit testing.  Technically you could use ObjectMother in your everyday programming as a factory or something like that, but today it's all about testing.

Let's start by looking at a unit test for two different functions that require data from the same contract. I'm just going to hand-wave past what the functions do, because it doesn't really matter right now. Right? Right.

<pre class="language:javascript">
describe('dataModule', function(){

    describe('firstFunction', function(){

        var myTestData;

        beforeEach(function(){
            myTestData = {
                records: [ { required: true }, { required: true}, { required: false } ]
            };
        });

        it('should return the number of required records', function(){
            expect(dataModule.firstFunction(myTestData)).toBe(2);
        });

    });

    describe('secondFunction', function(){

        var myTestData;

        beforeEach(function(){
            myTestData = {
                records: [ { id: 1 }, { id: 2 }, { id: 3 } ]
            };
        });

        it('should return an array of record ids', function(){
            var result = dataModule.secondFunction(myTestData);
            expect(JSON.stringify(result)).toBe(JSON.stringify([ 1, 2, 3 ]);
        });
    }

});
</pre>

That is a LOT of typing for two little tests. It's especially bad since the two different objects are so similar. Now, we could combine the two object setup blocks into a single beforeEach at the top, but what if this same data object is necessary in another test in another file? What if, worse than that, there are several modules that might interact with this data, each capturing data for a particular purpose which could be unrelated to the data module we tested here?

The almighty DRY principle would tell us this is inherently flawed.  There is a code smell and that smell is one of the big reasons I hear people hate writing unit tests. What if we could actually DRY out our unit tests in a sane, maintainable way?

Enter the ObjectMother pattern.

Here's what the mother of this object might look like:

<pre class="language:javascript">
function testDataMother(){
    return {
        records: [
            { id: 1, required: true },
            { id: 2, required: true },
            { id: 3, required: false }
        ],
        otherProperty1: 'foo',
        otherProperty2: 'bar'
    };
}
</pre>

With this defined, our test code becomes much simpler to write, read and maintain. If we use our new object mother, here's what our tests become:

<pre class="language:javascript">
describe('dataModule', function(){

    var myTestData;

    beforeEach(function(){
        myTestData = testDataMother();
    });

    describe('firstFunction', function(){

        it('should return the number of required records', function(){
            expect(dataModule.firstFunction(myTestData)).toBe(2);
        });

    });

    describe('secondFunction', function(){

        it('should return an array of record ids', function(){
            var result = dataModule.secondFunction(myTestData);
            expect(JSON.stringify(result)).toBe(JSON.stringify([ 1, 2, 3 ]);
        });
    }

});
</pre>

It's like magic, right? We just eliminated 10 lines of code we were using in our original test file and now we are able to focus on the problem, testing our functions. What's even better, we have now centralized our data example so any other tests can use it too and we only have to modify it in one place to expand our tests.  If the contract were, heaven forbid, to change, we can change our data in our mother file to match the new contract and then identify any breakages, update functionality and guarantee function and data parity.  This is a HUGE win.

For small sets of tests, and relatively simple data structures, this is perfectly acceptable.  What happens when you have nested data structures and complex logic to interact with it? Now you have data interdependencies and our simple functions aren't going to be sufficient.

This calls for other, well known, patterns. We can draw upon the Factory and Dependency Injection patterns to make this better. We can employ initializing functions and initial condition objects to define a more robust interface.

Since these requirements arose as I was working through unit testing scenarios in my day to day life, I created a library, <a href="https://github.com/cmstead/DataMother.js/releases" target="_blank">DataMother.js.</a> DataMother allows you to isolate layers of objects and register them with an injection system.  At test time, you can use DataMother to handle your data requirements much like we did above which actually made unit testing with data so easy, I actually started looking forward to it.

Weird, right?

Anyway, whether you use the naive method outlined earlier or a more robust solution like DataMother.js, use the ObjectMother pattern in your testing and bring the joy to unit testing data-driven functions that you have in the rest of your programming life. Unit tests and data can be friends!

<strong>Blog Post Notes:</strong>

The ObjectMother pattern was first discussed (as far as I know) in 2006 by Martin Fowler.

The links below are assembled from the links in the post:

<ul>
<li><a href="http://www.chrisstead.com/archives/655/not-another-js-testing-how-to/" target="_blank">(Not) Another JS Testing How To</a></li>
<li><a href="http://martinfowler.com/bliki/ObjectMother.html" target="_blank">Martin Fowler, ObjectMother</a></li>
<li><a href="https://github.com/cmstead/DataMother.js/releases" target="_blank">DataMother.js -- Release package download</a></li>
<li><a href="https://github.com/cmstead/DataMother.js" target="_blank">DataMother.js API documentation and Github project</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>670</wp:post_id>
		<wp:post_date><![CDATA[2015-06-17 09:00:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-17 17:00:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dont-talk-about-my-objectmother-that-way]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1542494803;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:1106;}i:2;a:1:{s:2:"id";i:655;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What Makes a Program Stand Up</title>
		<link>http://www.chrisstead.net/archives/683/what-makes-a-program-stand-up/</link>
		<pubDate>Wed, 24 Jun 2015 17:00:16 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=683</guid>
		<description></description>
		<content:encoded><![CDATA[Over the last year I have interviewed a lot of Javascript developers and I discovered something: many people working in Javascript don't really understand what programming really means. What I am saying by this is, people can write code and make stuff happen in the DOM, but they don't really understand why. Scratching just below jQuery reveals that most of a program is still essentially magic for people who promote themselves as developers.

If we look at professionals who regularly practice in other fields, even the most junior practitioner has a foundation understanding of what drives the profession.  Lawyers fresh from the Bar understand law. Medical doctors, even in their residency, already have the foundation knowledge they need to diagnose and treat ailments. The most junior of architects have the physics, materials and design knowledge to understand what makes a building stand up.

Javascript developers, even at the most junior level, should understand what makes a program stand up.

<h3 id="history">History -- Turing Completeness and Lambda Calculus</h3>

Let's hop in our wayback machine and go back about 80 years.  There was a guy named Alan Turing. He is (<a href="http://www.imdb.com/title/tt2084970/" target="_blank">finally</a>) known by the general public as the man who helped crack the Enigma machine through the use of computing and mathematics. Before the second world war (~1936), he developed the idea of a computing device which could, in theory, emulate any other computing device. This device is called the <a href="https://en.wikipedia.org/wiki/Turing_machine" target="_blank">Turing Machine</a>. The Turing Machine is important because it, largely, defines what we know as the foundation of modern computing.

With the advent of the Turing Machine came the concept of Turing completeness.  Essentially, any computing system that could emulate a Turing Machine could be called <a href="https://en.wikipedia.org/wiki/Turing_completeness" target="_blank">Turing complete</a>. Turing completeness is a key ingredient in the development of modern programming. Though Alan Turing was working with tapes and those who followed used punch cards, programming as we understand it today began to take form in the early 20th century.

Around the same time as the development of the turing machine (1936-1937), another mathematician by the name of Alonzo Church developed a new method of describing computing function and behavior, called <a href="https://en.wikipedia.org/wiki/Lambda_calculus" target="_blank">Lambda Calculus (&lambda;-calculus)</a>. Incidentally Turing and Church developed these computing ideas separate from one another. Lambda calculus described a foundation for what we know as functions in programming and, more specifically, functional programming. &lambda;-calculus is relatively inscrutable for the uninitiated, but a good example of what it looks like is the following:

&lambda;.x.x => (&lambda;.x x) = x;

This particular example draws upon Lisp notation to provide a little clarity. Below are the same functions in Clojure and Javascript:

<pre class="language:raw">
;This is a standard Clojure identity function expressed with a variable
(identity x) ;returns x
</pre>

<pre class="language:javascript">
function identity(value){
    return value;
}

identity(x); //returns x
</pre>

In the great tradition of 1, 2, skip a few, 100, I'm going to bypass the invention of Lisp, C, C++, ML, OCaml, Haskell, Python, Java, Pascal, Basic, COBOL, etc. Though all of these languages are important in their own right, they are all informed by the same underlying principles.

If we come back to the modern day, Turing completeness and Lambda calculus underpin all of the things we know about good programming and reliable software. Turing completeness gives us the notion of branches and flow control in our favorite general purpose programming language, Javascript.

<h3 id="conditionals">Conditionals and Branches</h3>

A computing system can be said to be Turing complete if it can emulate a Turing Machine. Although our modern computers are limited in memory and we, as people, are limited by time, a modern programming language can generally be considered Turing complete because it contains conditional operations and it is capable of accessing arbitrary amount of memory locations.  In other words, because Javascript, much like other modern languages, has if statements and can store and retrieve arbitrary data in memory, we can consider it Turing complete.

Another way of looking at this is Javascript is a Turing complete computing system because you can write code like this:

<pre class="language:javascript">
function myFunction(maybeArray){
    var myArray = maybeArray === null ? [] : maybeArray;

    return myArray;
}

myFunction([1, 2, 3, 4]); //returns [1, 2, 3, 4]
myFunction(null); //returns []
</pre>

Let's be honest, this is a really trivial function, but there is a lot of history that goes into it. We declared a function which was stored in memory.  Inside of that function we test a passed value with a conditional. When the conditional is satisfied, we perform one assignment operation. If the conditional is not satisfied, we perform a different assignment operation. After the assignment is complete, we return the result.  For such a small, simple function, there is a lot happening.  Consider what would happen if conditionals (programmatic branching) didn't exist. How would we ever do this? All of our programs would look like this:

<pre class="language:raw">
doAction1
doAction2
doAction3
doAction4
</pre>

This program is really useful if, and only if, you ever only need to do just those four things in succession. If one action fails, the program would continue running and disaster could occur. For instance, suppose that was the program for a robot on an assembly line and a part came through oriented incorrectly. That part could translate into a completely ruined product. Whoops.

The idea of conditionals and the way they impact programming can be summed up by a joke about engineers. An engineer is going to the store for his wife. She told him "buy a loaf of bread and if they have eggs, buy 12."

The engineer returned with a dozen loaves of bread.

The engineer's wife said "why do you have so much bread?"

The engineer replied "they had eggs!"

Branching, as far as I am concerned, is the most important concept to pave the way for any modern computing. All other elements of modern computing would not exist without it. Branching, however, is necessary, but not sufficient to define modern programming.

<h3 id="reusability">Reusability -- Reusable Logic, Objects and Functions</h3>

The other core element of modern computing without regard to the implementation details, is logic reuse. We like to say code reuse, but what we really mean to say is, "I want to define some logical behavior and then just refer to it elsewhere."

Logic reuse comes in several forms, but the ones best recognized are functions and objects. We can claim that there is third type of reuse which comes in the form of modules or namespaces, but can't we squint a little bit and say those are just special cases of objects?

In Javascript we get the benefits of our forebears because we get all of the object/class goodness that comes with heavily object oriented languages like Java and C++, but we also get all of the functional wonderment that comes from languages like Lisp and Haskell.

Object logic reuse could look a little like this:

<pre class="language:javascript">
//ES6 format
class MyObject{
    constructor(){
        this.foo = 'bar';
    }

    setFoo(value){
        this.foo = value;
    }

    getFoo(){
        return this.foo;
    }
}

//ES5.1 format
function MyObject(){
    this.foo = 'bar';
}

MyObject.prototype = {
    setFoo: function(value){
        this.foo = value;
    },

    getFoo: function(){
        return this.foo;
    }
};

//Instantiating is the same either way
var myNewObject = new MyObject();
</pre>

The functional paradigm in Javascript looks like this:

<pre class="language:javascript">
//A higher-order function
function fooer(userFoo, someBar){
    userFoo.bind(null, someBar);
}

//A standard function
function myFoo(a, b){
    return a + ' foo ' + b;
}

//Partial application with a higher-order function
appliedFoo = fooer(myFoo, 'bar');

//Use of a partially applied function with another higher-order function -- map
fooedArray = ['baz', 'quux'].map(appliedFoo);

//Resulting array: ['bar foo baz', 'bar foo quux']
</pre>

You'll note we are already doing some relatively advanced operations, and the code is rather brief. This brevity is due to the nature of logic-block, or more correctly algorithm, reuse and abstraction from the deepest building blocks in a computer software system.  As we get further from the computer hardware, we get more power with fewer keystrokes.  The language becomes more like English and less like bits.

<h3 id="looping">Recursion + Conditionals => Looping</h3>

The next piece of the modern language puzzle is recursion. Recursion blended with branches is, in my estimation, the easiest way to break down looping structures into the base elements to add visibility.  Recursion on its own is not simple, but it is key to understanding why loops work they way they do.  Here's a really basic recursive algorithm for adding values:

<pre class="language:javascript">
function add(valueArray, initialValue){
    var base = typeof initialValue === 'number' ? initialValue : 0,
        value = valueArray.length === 0 ? 0 : valueArray.pop(),
        sum = base + value;

    if(valueArray.length === 0){
        return sum;
    }

    return add(valueArray, sum);
}

add([1, 2, 3, 4]); //returns 10
</pre>

You'll note we did not use a standard looping structure for this. This is a special type of recursive function called a tail recursive function.  What this means is the call back to the original function happens as the very last statement in the function.  This behavior is very similar to the way a while loop works.  Each iteration checks the return condition and the loop exits if the condition is met.  If the condition is not met, the loop continues.

The problem we encounter with algorithms like this is you can easily fill all available memory with a large enough array of values, which can cause all kinds of problems.  This is because Javascript does not support tail-recursion optimization.  In other words, you could write this recursion any way you please and it will perform essentially identically.  Due to the growth nature of recursion, looping constructs become significant.  We could rewrite this loop with a standard while in the following way and not crash a browser, server or any other device you might be running your code on.

<pre class="language:javascript">
function add(valueArray){
    var sum = 0;

    while(valueArray.length > 0){
        sum += valueArray.pop();
    }

    return sum;
}
</pre>

You'll note that, while this will perform the operation more efficiently than our recursion, we have now tightly coupled our addition logic to our exit logic. This tight coupling is what, ultimately, interferes with the innate understanding of the loop and precisely when it will exit and allow the function to return our sum.  It is equally important to note that this is the preferred way to handle explicit looping in Javascript.

We do have an alternate methodology which abstracts away the condition altogether which reintroduces the concepts we get from Church's &lambda;-calculus.  If we select an appropriate higher-order function, we can extricate our addition logic and abstract away the express syntax for looping, leaving the real intent, alone.

<pre class="language:javascript">
function adder(a, b){
    return a + b;
}

//Using the higher-order function reduce, we can apply addition across all values
//Once we perform our reduce we can eliminate the explicit condition and loop
//from our system altogether
function add(valueArray){
    return valueArray.reduce(adder, 0);
}

add([1, 2, 3, 4]); //Returns 10
</pre>

Although this is not what any mathematician would ever call a formal proof, we can see immediately that the functional aspects of Javascript introduce branches in such a way that we can guarantee Turing completeness in much the same way as the imperative logic could.

<h3>Conclusion</h3>

Much like any other profession, programming has a storied history and the groundwork for what we use today takes advantage of some very important foundational concepts.  Even though we have been abstracted away from the hardware and we are no longer using punch cards, all of the groundwork laid by Turing and Church as well as many others who followed define physics, materials and design knowledge we employ today when we apply experience to new problems across many industries.

What makes a program stand up is not just understanding each of these concepts in a vacuum, but how they work together to create new solutions to existing problems. We have to understand and evaluate the interrelation of the core components of what makes a program work, and apply them in a way that makes software not only functional, but maintainable and clear in intent.

Simply knowing there are conditionals, loops and code reuse is possible does not, by itself, make the professional programmer skilled. It is understanding the interrelation of the elements in a program that allows a professional programmer to skillfully design and execute software that will solve problems and provide those professionals who follow to understand the choices that were made and enhance solutions as real world problems continue to change and grow.

<h3>Blog Post Notes</h3>

Related links:

<ul>
<li><a href="http://www.imdb.com/title/tt2084970/" target="_blank">The Imitation Game (Movie)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Turing_machine" target="_blank">Turing Machine</a></li>
<li><a href="https://en.wikipedia.org/wiki/Turing_completeness" target="_blank">Turing Completeness</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lambda_calculus" target="_blank">Lambda Calculus (&lambda;-calculus)</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>683</wp:post_id>
		<wp:post_date><![CDATA[2015-06-24 09:00:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-24 17:00:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-makes-a-program-stand-up]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551428687;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:1091;}i:2;a:1:{s:2:"id";i:705;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: Inheritance</title>
		<link>http://www.chrisstead.net/archives/705/mainstay-monday-inheritance/</link>
		<pubDate>Mon, 22 Jun 2015 17:00:50 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=705</guid>
		<description></description>
		<content:encoded><![CDATA[This is the first in a new series I am trying out on my blog.  Every Monday I want to provide a post about some foundational element of programming and how it relates to Javascript development. What better place to start than inheritance?

Object inheritance is one of the one of the least understood foundation Javascript topics I can think of. Even if a developer is comfortable with prototypal behavior and instantiating prototypal objects, handling inheritance is a layer which is more obscured in the Javascript than classically designed, OO languages.

Let's discuss the object prototype.  To start with a simplified definition, an object prototype is a set of properties associated with an object that defines the foundation functionality an instance of the object will have.  In other words, anything you put on an object prototype will define what that object will be when you perform a 'new' operation.

Let's take a look:

<pre class="language:javascript">
//This is an object setup in ES5
function Fooer(){}

Fooer.prototype = {
    foo: function(value){
       return 'bar';
    }
};

var myFooer = new Fooer();

console.log(myFooer.foo()); // 'bar'
</pre>

This is about as simple as it gets. We define a function attached to the prototype, let's call it a method to keep parity with classical OO languages, and when we get a new instance, the method is attached to the object we get back. Once you are familiar and comfortable with this syntax, it's easy to do and easy to understand.  The pitfall we have here is it's a little convoluted.  ECMAScript 6 (ES6) introduces a new, more classical notation, though the underlying behavior is still the same as it ever was.

<pre class="language:javascript">
//ES6 classes look like this
class Fooer{
    foo(){
        return 'bar';
    }
}

let myFooer = new Fooer();

console.log(myFooer.foo); // 'bar'
</pre>

The code is a little shorter and, hopefully a little more declarative of intent, but the end result is identical.  Now, in classical languages, there is a concept of object hierarchy.  OO languages provide a clear construct for how this is handled with a special keyword.  Let's call this inheritance keyword 'extends.' Let's pretend our classical language uses this 'extends' keyword and create a child object with it.

<pre class="language:javascript">
class Greeter extends Fooer{
    greet(name){
        console.log('Hello, ' + name + '.');
    },

    fooGreet(){
        this.greet(this.foo());
    }
}

let myGreeter = new Greeter();

myGreeter.greet('Chris'); // log: Hello, Chris.

console.log(myGreeter.foo()); // log: bar

myGreeter.fooGreet(); // log: Hello, bar.
</pre>

You'll note that we just got the parent properties for free.  Extra bonus, SURPRISE, that's ES6 syntax. It's nice and easy.  Most of us are still working in ES5 and in ES5, the times are hard.  Let's have a look at what inheritance looks like when you don't have all the handy dandy syntactic sugar.

<pre class="language:javascript">
function Greeter(){}

Greeter.prototype = Object.create(Fooer.prototype);

Greeter.prototype.greet = function(name){
    console.log('Hello, '  + name + '.');
}

Greeter.prototype.fooGreet = function(){
    this.greet(this.foo());
}

Greeter.prototype.constructor = Greeter;

var myGreeter = new Greeter();

myGreeter.greet('Chris'); // log: Hello, Chris.

console.log(myGreeter.foo()); // log: bar

myGreeter.fooGreet(); // log: Hello, bar.
</pre>

This is a lot more verbose than our friendly ES6 syntax, but it's pretty clear the result is the same.  We end up with an object that performs a new operation and directly inherits properties from Fooer.  This verbosity along with the hoops you have to jump through makes it pretty obvious why people don't introduce object inheritance in a beginning discussion of Javascript.

Regardless of the obscurity, we can try this and see inheritance really works and it adheres to the kinds of expectations we would bring from languages like Java, C#, PHP, etc.

<pre class="language:javascript">
var testGreeter = new Greeter();

console.log(testGreeter instanceof Greeter); // true
console.log(testGreeter instanceof Fooer); // true
</pre>

By adding object inheritance to our arsenal, we can look back to our computer science forefathers and apply the knowledge they shared in books like the Gang of Four Design Patterns book.  Concepts like inheritable DTOs become usable in Node and in the browser and we can begin to normalize our coding practices and use sane conventions in our profession to help us focus on the task at hand: solving new problems.

On top of all of this, we can see deeper into what is really happening with prototypes. When we understand how prototypes handle object properties and provide a link to the parent object, we can better understand how to leverage the finer nuances of the language for a more powerful programming experience.

<h3>Blog Notes</h3>

For an abstraction layer to handle inheritance, please see my <strong><a href="http://bit.ly/1LnWdFO" target="_blank">gist</a></strong>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>705</wp:post_id>
		<wp:post_date><![CDATA[2015-06-22 09:00:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-22 17:00:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-inheritance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551431167;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1015;}i:1;a:1:{s:2:"id";i:1030;}i:2;a:1:{s:2:"id";i:1;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Markdown: Content Isn&#039;t Just For Web</title>
		<link>http://www.chrisstead.net/archives/725/markdown-content-isnt-just-for-web/</link>
		<pubDate>Wed, 01 Jul 2015 17:00:42 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=725</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of my friends and I have the same conversation once or twice a month: How do you deal with content that could be displayed in any number of different devices?

I know, this sounds like chilling lunchtime conversation, but this is what happens when you get a group of programmers together over lunch on the regular. Nonetheless, there is value in this discussion. We don't all work on the web and we all have to deal with content from the same source.

<strong>But, HTML is a known spec.</strong>

True, however, the next time you talk to a mobile developer, suggest to them that they process your HTML (and CSS and Javascript and other garbage text) and display it as a part of their native environment. After they laugh long and hearty at you, they are likely to tell you it will never happen.

A friend of mine wrote <a href="http://eoghain.github.io/display-agnostic-content/" target="_blank">about the general nature of display agnostic content</a>, and concludes that with the current state of technologies, Markdown is likely the best option for safe cross-platform content.  I agree that this is likely true.

First, Markdown is easy to produce. No special editor is even necessary to create a Markdown document since the average person could learn all of the key features in a few minutes. Moreover, for technical users, some key players have adopted a specific dialect known as Github Flavored Markdown (GFM) and there is wide support for it, so converting to and from GFM has become a rather trivial task.

Second, Markdown does not allow for external documents to declare display properties. This means that the display management is left entirely up to the application that is rendering it. Since the user can't do things like create CSS to make all of the text green and rendered with Comic Sans, the application level control is more sane and normalized. Normalization is a good thing.

Third, Markdown is, at its core, just plain text. Plain text follows rules and standards that can be set outside the scope of your application or organization. If you store the text document in UTF-8 or UTF-16 format, it will always be the same. Everywhere. All of a sudden, you can reason about your document in all kinds of useful ways. You know precisely how big it is. You know exactly how fast it will render. You know, without question, what the format and markers will be.

<strong>That's a really, REALLY big win.</strong>

I'm going to sneak a fourth point into my three-point list: Markdown is safe for just about any text format or serialization strategy you can throw at it, because it's just text.

Markdown in JSON? It's a string
Markdown in SOAP? It's a string
Markdown in XML? IT'S A STRING

There are plenty of people out there still using XML. (Don't laugh, they are out there.) Imagine a world where CDATA just goes away. I mean, capturing XML, parsing it, dealing with CDATA protected strings, making sure everything didn't get completely borked in the process is a pain in the tuchus. I've been there and trust me, it stinks.

Of course this leads us to the inevitable discussion of how we process Markdown. If you are not on the web and you're relying on any number of different languages to parse and manage Markdown, use <a href="https://github.com/hoedown/hoedown" target="_blank">Hoedown</a>. Yes, it's called Hoedown, <em>seriously</em>. Hoedown is a standalone, no libraries needed markdown parser built in C.

It is likely, though, that you are using web technologies to process your Markdown (or you wouldn't be reading a blog by a JS developer), so I have a special gift for you too: <a href="https://github.com/chjj/marked" target="_blank">Marked</a>. Marked takes Markdown strings and turns them into standard HTML and it's easy. Here's what it looks like when you used marked:

<pre class="language:javascript">
let myMarkdown = '**This** is some __markdown__.',
    output = marked(myMarkdown);

console.log(output); // <p><em>This</em> is some <strong>markdown</strong>.</p>
</pre>

This is great if you already have Markdown and you just need to display it on the web, but what about the output from your favorite WYSIWYG editor? As it turns out, there is a library for that too. <a href="https://github.com/domchristie/to-markdown" target="_blank">To-markdown</a> is a script that will take whatever garbage-formatted HTML comes out of the back end of your HTML editor and turn it into crystal clear Markdown.  Here's what it looks like:

<pre class="language:javsacript">
let myHTML = "<p><em>This</em> is some <strong>markdown</strong>.</p>",
    output = toMarkdown(myHTML); //It's so much like Marked it hurts

console.log(output); // **This** is some __markdown__.
</pre>

To sum up, if you are working in a multi-platform environment, which is really REALLY common, make friends with your mobile and desktop developers and provide them platform-agnostic content in the form of Markdown. It's easy to work with, it's popular, it's plain text and it's easy to serialize.

With the solid support of two well-vetted libraries like Marked and To-markdown, there is practically no barrier to entry, so stop saving HTML to the database, and make your content easy to work with. If you drop in the conversion method into the standard content flow in your app, management will just look around one day and notice that everything is a little better and they won't know why. Who can argue with 'better,' really?

<h3>Blog Post Notes</h3>

<ul>
<li><a href="http://eoghain.github.io/display-agnostic-content/" target="_blank">Display Agnostic Content by Rob Booth</a></li>
<li><a href="https://github.com/hoedown/hoedown" target="_blank">Hoedown -- A C-Based Markdown Parser</a></li>
<li><a href="https://github.com/chjj/marked" target="_blank">Marked -- A Javascript Markdown parser</a></li>
<li><a href="https://github.com/domchristie/to-markdown" target="_blank">To-markdown -- A Javascript HTML to Markdown conversion library</a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>725</wp:post_id>
		<wp:post_date><![CDATA[2015-07-01 09:00:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-01 17:00:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[markdown-content-isnt-just-for-web]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420258;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:112;}i:1;a:1:{s:2:"id";i:233;}i:2;a:1:{s:2:"id";i:276;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>555</wp:comment_id>
			<wp:comment_author><![CDATA[Gabriel Zimmermann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gabrielemanuel@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[190.193.48.23]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-15 15:13:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-15 23:13:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post Chris! Just what I've been looking for.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1437002017.531518;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1437247398.3132119;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mainstay Monday: Lexical Scoping</title>
		<link>http://www.chrisstead.net/archives/735/mainstay-monday-lexical-scoping/</link>
		<pubDate>Mon, 29 Jun 2015 08:00:50 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=735</guid>
		<description></description>
		<content:encoded><![CDATA[Edit: I incorrectly stated that Javascript has dynamic scoping. It actually uses a mix of lexical scoping and contextual binding. Dynamic scoping is significantly different than contextual binding. This post has been updated to reflect correct information.

Eight-ish years ago, I wrote a blog post about the importance of programmatic scope. At the time I could have told you roughly what scope was, but I don't think I could have explained how scope in Javascript actually worked. I could explain that some variables were accessible in different parts of the application and I could point at things and give a vague, hand-wavy kind of explanation as to how it all related.  Only understanding that much served me well enough for a while, but when push came to shove, not understanding scope at a deeper level started to make development in Javascript difficult and unreliable.

Perhaps the most important thing to understand is what scope is. Variables are available to different sections of code based on how they are defined. Simply put, there is a lookup table that is provided at each layer of the code and this table contains all of the variable references a line of code may access based on where it lives in the source file or at execution time. Below is a visual demonstration of how this works in your code.

<pre class="language:javascript">
function myOuterFunction(){
    var foo = 'bar';

    function myInnerFunction(){
        var baz = 'quux';

        //foo is available from the outer function, here
        console.log(foo);

        //Baz is only available here
        console.log(baz);
    }

    myInnerFunction();

    //foo is available here too
    console.log(foo);

    //baz from the inner function is NOT available here
    console.log(baz);
}

myOuterFunction();

/*
* Output:
*
* bar
* quux
* bar
* undefined
*
*/
</pre>

In order to write programs which are stable and predictable, it is really important to have a firm grasp on variable scoping and what this means in the context of the code you write. As it turns out, there are actually two major types of scoping. The first kind of scoping is <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping" target="_blank">lexical scope</a>. The second type of scope is <del datetime="2015-07-03T04:33:01+00:00"><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping" target="_blank">dynamic scope</a></del> actually contextual binding.

As it turns out Javascript actually uses a combination of each of these. This blended approach to scope is, in my opinion, one of the largest sources of confusion for debugging and editing code in Javascript today.  This post will focus on lexical scope, so we can get a firm grasp on, in my opinion, the simpler of the two scoping methodologies. I will cover the following lexically bound scope scenarios:

<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#global-scope">Global Scope</a></li>
<li><a href="#function-scope">Function Scope</a></li>
<li><a href="#block-scope">Block Scope</a></li>
</ul>

<h3 id="overview">Lexical Scope Overview</h3>

Lexical scope is, in the simplest terms, association of variables in the program based solely on the way they are introduced in the source code. In other words, lexical scope will always follow the same rules when executing based solely on how you wrote the source code. Execution context has no bearing, so though inspection of the code alone, you can reason about which variables are available where.

The first example in the post is an explanation of how lexical scope looks when writing functions. Each variable is made available precisely where you would expect it based on the structure of the code. With the next three scenarios you will see how each of the lexically bound scopes work and how to apply them.

<h3 id="global-scope">Global Scope</h3>

When people say "don't use global variables," what they really mean is don't bind variables to the global scope. Globally scoped variables are available in every context and, when modified, can introduce all kinds of bugs and problems into your code.  However, with ES6, we can <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" target="_blank">define constants</a> which are safe for global use.  Let's take a look at a good globally scoped value:

<pre class="language:javascript">
//This is NOT an arbitrary single-letter variable.
//https://en.wikipedia.org/wiki/E_(mathematical_constant)
const e = 2.7183;

//We can compute continuous interest growth, now
function continuousGrowth(principle, rate, time){
    return principle * Math.pow(e, rate * time);
}
</pre>

Global scope is typically reserved for constants and namespaces.  Other items that are globally scoped are built-in objects and functions that are part of the core Javascript language.  Although the global scope is a valid scoping target, it is best to take great care when using it.

<h3 id="function-scope">Function Scope</h3>

In Javascript, up to this point, function scope has been the primary scope used for defining, assigning and maintaining variables. Function scope is a relatively safe place to define variables that will be used locally for work to be done.

The interesting point about function-scoped variables is, they are defined within a function but any functions that are defined below that function level also have access to the variables as well. There are caveats, but that is a discussion for another day.  Let's take a look at function-level scoping.

<pre class="language:javascript">
var parrot = (function(){
    'use strict';

    var handyVar = 'variable scoped to an IIFE';

    function say(value){
        var prefix = 'Polly wants a ';
        console.log(prefix + value + '.');
    }

    function sayHandyVar(){
        say(handyVar);
    }

    return {
        say: say,
        sayHandyVar: sayHandyVar
    }
})(); //Take that, Crockford

parrot.say('cracker'); // Polly wants a cracker.
parrot.sayHandyVar(); // Polly wants a variable scoped to an IIFE.
parrot.say(handyVar); // Polly wants a undefined.
</pre>

I feel the last call to parrot.say was completely unsurprising. HandyVar is scoped within the IIFE and is not accessible from outside the function.  The item that is slightly more interesting is sayHandyVar. We access handyVar from sayHandyVar by referencing it directly. This is the nature of function-scoped variables.

By using function scoping, we can guarantee that our variables will remain unmolested by outside functions. This kind of data hiding gives us certain guarantees that our programs will behave more reliably and predictably as we develop. Due to this added stability, we can write larger, more complext functions without worry that we are impacting something we might not see until a bug shows up in production.

<h3 id="block-scope">Block Scope</h3>

Block scope is old hat for anyone who has worked in other languages like C++, Java or C#. If you have a conditional or loop structure and you define a variable within that block of code, the variable is only available within that block.

Block scoping was introduced with ES6, and is defined with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" target="_blank">let keyword</a>. Theoretically, you could run around and replace all of your var declarations with let declarations and your program would work the same as it ever did... Theoretically.

Since var declarations only support function scoping, you might encounter some strange issues if vars were used inside of blocks and then referenced elsewhere in the function.  This is due to variable hoisting.  Basically, if you declare a variable with var, the declaration will be auto-hoisted to the top of your function. Let will not be hoisted. Let's take a look.

<pre class="language:javascript">
function blockScoper(){
    console.log(myOuterVar);

    for(let i = 0; i < 3; i++){
        console.log(i);
    }

    let myOuterVar = 'Function scope';

    console.log(myOuterVar);
    console.log(i);
}

blockScoper();

/*
* Output:
*
* undefined
* 0
* 1
* 2
* Function scope
* undefined
*/
</pre>

Wait, what?? So much craziness happening here. The variable myOuterVariable is not hoisted at all. It lives only below the for loop. Not only that, but i only lives within the for loop. This means you get a much more strict isolation of variables you define.

Coming from a Javascript background, this might not sound so great. We have all become so used to being loose with our variable declarations, that let might feel restrictive. As it turns out, var isn't going away (though I wouldn't miss it) and let is giving us a way to isolate our variables in a clean, predictable way. This kind of scope isolation allows us to use counting variables without fear of program retribution. Take a look at this:

<pre class="language:javascript">
function looper(value){
    let lesserValues = [],
        squaredValues = [];

    for(let i = 0; i < value; i++){
        lesserValues.push(i);
    }

    for(let i = 0; i < value; i++){
        squaredValues.push(i * i);
    }

    console.log(lesserValues.toString());
    console.log(squaredValues.toString());
}

looper(5);

/*
* Output:
*
* 0, 1, 2, 3, 4
* 0, 1, 4, 9, 16
*/
</pre>

We were actually able to redeclare i for each loop, safely, and then manipulate it without worrying about whether we were going to affect the output. This opens a whole new world of opportunities to isolate variables and keep our programs tight, maintainable and predictable. I love predictable programs.

<h3>Finally (or TL;DR)</h3>

This covers the foundation for how lexical scope is handled in Javascript. There are three main lexical scopes a programmer can work in, global, function and block.

Global scoping makes your value available to the entire program without regard to safety or data security. The global scope should be reserved for constants, namespaces and core language functions and objects.

Function scoping makes your variables available only to the local function and all child scopes. When using the var keyword, variable declarations will be hoisted to the top of the function, though the assignment will still occur at the declaration line at runtime.

Finally, block scoping, which is new in ES6, gives us a way to manage variable scopes with block level granularity so you can protect your data and guarantee consistent function execution.

As it was said in the beginning, both lexical scoping and <del datetime="2015-07-03T04:33:01+00:00">dynamic</del> contextual binding are used in Javascript. We've managed to make it through the lexical scoping, so next time we chat, we'll take a look at <del datetime="2015-07-03T04:33:01+00:00">dynamic</del> contextual binding. Until then, think about how you are scoping your variables and bring a little sanity back into your job.

<h3>Blog Post Notes</h3>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)" target="_blank">Variable Scope</a></li>
<li><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping" target="_blank">Lexical Scope</a></li>
<li><del datetime="2015-07-03T04:33:01+00:00"><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping" target="_blank">Dynamic Scope</a></del></li>
<li><a href="https://en.wikipedia.org/wiki/E_(mathematical_constant)" target="_blank">Euler's/Napier's Constant</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" target="_blank">ES6 Let Reference - MDN</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" target="_blank">ES6 ConstReference - MDN</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>735</wp:post_id>
		<wp:post_date><![CDATA[2015-06-29 00:00:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-29 08:00:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-lexical-scoping]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551428750;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:752;}i:1;a:1:{s:2:"id";i:1;}i:2;a:1:{s:2:"id";i:1133;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>535</wp:comment_id>
			<wp:comment_author><![CDATA[Jake]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jakobharclerode@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.254.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-01 13:51:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-01 21:51:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You forgot about my favorite, execution context =D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1435787514.706691;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>536</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.211.7.190]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-01 14:12:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-01 22:12:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Execution context is part of dynamic scoping which will come next Monday. ; )]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>535</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1435788728.5987251;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>537</wp:comment_id>
			<wp:comment_author><![CDATA[Jake]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jakobharclerode@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.254.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-01 14:25:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-01 22:25:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[PS I hope you know what Jake this is. Hail and Code!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1435789530.5993831;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mainstay Monday: Contextual Scope</title>
		<link>http://www.chrisstead.net/archives/752/mainstay-monday-contextual-binding/</link>
		<pubDate>Mon, 06 Jul 2015 17:00:54 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=752</guid>
		<description></description>
		<content:encoded><![CDATA[Last week we kicked off a discussion of scope in source code. <a href="http://www.chrisstead.com/archives/735/mainstay-monday-lexical-scoping/" target="_blank">We talked about lexical scope</a> and how that impacts the way variables are accessed. There is another element of scoping called contextual binding, which is what gives people the most trouble.

Contextual binding is the scoping of variables based on the execution context of a particular function at the time of execution. This is least visible when dealing with the functional aspects of Javascript and most visible when interacting with objects.  Let's take a look at a little bit of Java to start.

<pre class="language:java">
class Thingy{

    protected String someVar;

    public Thingy(String aVar){
        //I am using this for clarity. This is not idiomatic Java.
        this.someVar = aVar;
    }

    public void printVar(){
        System.out.println(this.someVar);
    }

}

//Begin ceremonial main class
class Main{

    public void main(String[] args){
        Thingy myInstance = new Thingy("Hello!");
        myInstance.printVar(); //Hello!
    }

}
</pre>

Although there are a few things here and there that might not seem familiar to the average Javascript developer, I'm sure everyone can largely follow along with what is happening here. We're creating an object that takes a string in its constructor and then prints it to System.out when printVar is called.

Let's take a look at the equivalent code in Javascript.  I'm going to keep this old-school so we can talk about what is happening here without trying to remember all that new-fangled ES6 syntax. (I originally wrote this with a class)

<pre class="language:javascript">
function Thingy(aVar){
    this.someVar = aVar;
}

Thingy.prototype.printVar = function printVar(){
    console.log(this.someVar);
};

var myInstance = new Thingy('Hello!');
myInstance.printVar(); //Hello!
</pre>

So far, no surprises. Handy thing, that. We did essentially the same thing: we created an object Thingy, instantiated it and then called myInstance.printVar.  Everything worked out just as we expected it. Suppose, on the other hand, we were to do something like, hand our function off as a delegate to another function or object. Let's take a look at what that produces:

<pre class="language:javascript">
function AnotherThingy(delegate){
    this.delegate = delegate;
}

AnotherThingy.prototype.doStuff = function doStuff(){
    delegate();
}

var myOtherInstance = new AnotherThingy(myInstance.printvar);
myOtherInstance.doStuff(); //undefined
</pre>

I'm sorry, what?

We defined printVar inside myInstance and pointed it at this.someVar. It seems like it shouldn't return undefined when we call it. This is a product of contextual binding. Although the original context inside our object Thingy provides a value someVar, once the function is passed to another function as a delegate, the context changes.  This NEW contextual binding doesn't provide the same variables as the original, so this.someVar doesn't mean what it once did.

This behavior is really difficult for people who are new to Javascript. They expect, much like Java, that the original object context is bound up with the functions from the same context. What we can't do with Java, however, is break a function from its object context and produce a delegate like we are doing here.

Fortunately, Javascript has a way to provide some guarantees! Don't fret, young padawan, we have the bind function.  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank">Bind</a> is a function that is defined on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype" target="_blank">Function.prototype</a>, and allows us to guarantee that a function will execute within a specific context.

Here's what using bind does for us:

<pre class="language:javascript">
var myLastInstance = new AnotherThingy(myInstance.printVar.bind(myInstance));
myLastInstance.doStuff(); //Hello!
</pre>

Hooray!

With simple examples like this it's easy to think that all contextual binding is obvious and simple. I wish it were true.  Contextual binding, however, can get a little tricky as functions start getting passed around and you start editing not only your own code, but others' code too.  The important thing to see is that contextual binding is a good place to look when you start coming up against disappearing variables and suddenly undefined values.

By combining lexical scoping and contextual binding, you can get your variable management under control and start writing safe, stable, internally consistent code. You'll impress your coworkers, be better at sports, your teeth will be whiter and your car will get an extra 5 miles to the gallon. Well, you code will be more stable, so there is that.  Watch your scope and context and your code will thank you.

<h3>Blog Post Notes</h3>

<ul>
<li><a href="http://www.chrisstead.com/archives/735/mainstay-monday-lexical-scoping/" target="_blank">Lexical Scope Post</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank">Function.prototype.bind</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype" target="_blank">Function.prototype</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>752</wp:post_id>
		<wp:post_date><![CDATA[2015-07-06 09:00:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-06 17:00:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-contextual-binding]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551439591;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:735;}i:1;a:1:{s:2:"id";i:1;}i:2;a:1:{s:2:"id";i:1114;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Eliminating Switch Statements with Hashmaps</title>
		<link>http://www.chrisstead.net/archives/759/eliminating-switch-statements-with-hashmaps/</link>
		<pubDate>Wed, 08 Jul 2015 17:00:58 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=759</guid>
		<description></description>
		<content:encoded><![CDATA[It has been a really, really long time since I created a switch statement. I'm not saying there is no place for switch statements in programming, I'm just saying, I haven't had a reason to use one in a long time. Even though I haven't written a switch in a long time, I have seen them popping up in code examples at work, online and other places a lot lately.

After seeing several different uses, I started asking "what is the programmer really trying to say with these?" Most of the examples I have seen look like the following:

<pre class="language:javascript">
function sendError(message){
    notification.error(message);
}

function doStuff(){
    //Code doing some stuff that might have an error

    if(errorCode !== undefined){
        switch(errorCode){
            case 123:
                sendError('some error message');
                break;
            case 234:
                sendError('some other error message');
                break;
            // more cases here
            // ...
            // finally
            default:
                sendError('An unexpected error occurred');
                break;
        }
    }
}
</pre>

This has a very particular code smell that I haven't encountered a name for yet.  I'm going to call it conditional obsession. In this particular case, the programmer has opted for conditional logic to emulate a well-known and commonly used data structure.  Reducing this kind of conditional overhead is akin to using a stack to eliminate recursion.

Switch statements are intended to be a way to simplify multiple conditionals in a more readable way. Since this code is not really, actually handling a set of conditionals, the switch statement has become little more than an extravagant replacement for a hashmap.

For those of you in Javascript land who aren't familiar with hashmaps, they are a very close relative to the object literal we have all come to know and love. They are so close, in fact, that you can substitute an object literal in for a hashmap at any point in order to maintain an idiomatic look and feel to your code.

Let's take a look at what a data structure containing our error messages would look like:

<pre class="language:javascript">
var errors = {
    123: 'some error message',
    234: 'some other error message',
    345: 'an error message from some other place in the local code',
    // Just add your error message here.
};
</pre>

Hey, that makes a lot more sense to me. I can look at this and, in a glance I can immediately tell you what our hashmap contains and what the relation means.  This, of course, still doesn't satisfy one thing that a switch statement can do: default behaviors.

Fortunately, we can build a quick, painless mechanism to handle default values and keep all of the readability we have started here.

<pre class="language:javascript">
function getErrorMessage(errorCode){
    let message = errors[errorCode];
    return message !== undefined ? message : 'An unexpected error occurred.';
}
</pre>

Now we have reduced our switch statement down to what we really meant to say: find my error message in this set of keys; if a message can't be found, then provide a default value instead. This leaves us with a single data structure and one conditional that handles the case we were really interested in: when the error code is unknown.

We will need to make one more modification to our original code to really clean it up and give us the clarity we are looking for:

<pre class="language:javascript">
function sendError(errorCode){
    let message = getErrorMessage(errorCode);
    notification.error(message);
}
</pre>

Now sendError doesn't require every function to perform some preprocessing to capture the error message it needs to send.  This reduces the complexity of our code every place an error code switch statement might have existed and allows us to centralize our error messaging and let our core functionality do what it is intended to do.

Here's our final, refactored code:

<pre class="language:javascript">
var errors = {
    123: 'some error message',
    234: 'some other error message',
    345: 'an error message from some other place in the local code',
    // Just add your error message here.
};

function getErrorMessage(errorCode){
    let message = errors[errorCode];
    return message !== undefined ? message : 'An unexpected error occurred.';
}

function sendError(errorCode){
    let message = getErrorMessage(errorCode);
    notification.error(message);
}

function doStuff(){
    //Code doing some stuff that might have an error

    if(errorCode !== undefined){
        sendError(errorCode);
    }
}
</pre>

Depending on the size and complexity of your code, this refactoring provides the perfect opportunity to abstract all of your error codes out into a centralized configuration file and then provide an error service that will allow you to simply capture an error code and then send it up through the stack and abstract your error messaging away from your core code altogether.

Switch statements, along with other conditional statements, should be used when an action should be taken only when the condition is satisfied. When conditionals are used to replicate core language data structures, it is often preferable to fall back to the core data structure and reduce the complexity of your code. Hashmaps are faster and more intuitive than a switch statement will ever be, so think about your data, refactor your code, then take a couple minutes to marvel at how your code will say what you really meant to say.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>759</wp:post_id>
		<wp:post_date><![CDATA[2015-07-08 09:00:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-08 17:00:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[eliminating-switch-statements-with-hashmaps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551421575;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1106;}i:1;a:1:{s:2:"id";i:806;}i:2;a:1:{s:2:"id";i:933;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>571</wp:comment_id>
			<wp:comment_author><![CDATA[Code Smells &#8211; Conditional Obsession]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/806/code-smells-conditional-obsession/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-29 08:03:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-29 16:03:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] a post quite a long time ago about code smells and what they mean. A couple weeks ago, I discussed eliminating switch statements using hashmaps. In that post, I introduced a new code smell that I want to discuss in a little more depth &#8211; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438191487.7973731;s:5:"event";s:12:"status-trash";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438625442.3980269;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438185806.878737;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438625434.2780211;s:5:"event";s:17:"status-unapproved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mainstay Monday: Managing Type Coercion</title>
		<link>http://www.chrisstead.net/archives/766/mainstay-monday-managing-type-coercion/</link>
		<pubDate>Mon, 13 Jul 2015 17:00:11 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=766</guid>
		<description></description>
		<content:encoded><![CDATA[If you are new to programming and, especially, to a dynamically typed language like Javascript you are likely not familiar with <a href="https://en.wikipedia.org/wiki/Type_conversion" target="_blank">type coercion</a>.  The best way to think about type coercion is, when dealing with two values of different types, the two variables will be normalized to a single variable type for the sake of comparison or other common interaction. The important thing to understand with type coercion is the <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)" target="_blank">language interpreter</a> or <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation" target="_blank">just in time compiler (JIT)</a> will guess what the type is that you meant to work with and do the "right thing" with it.

Let's take a look at what type coercion looks like in Javascript.

<pre class="language:javascript">
//Equality
5 == '5'; //true -- presumably '5' is converted to a number
'5' == 5; //also true -- presumably 5 is converted to a string
true == '5'; //true -- 1 is converted to boolean true
true == 10; //true -- 10 -> boolean

true == 'foo'; //false -- string doesn't coerce
false == 'foo'; //false -- as you can see, 'foo' isn't true or false

//Concatenation (or not)
console.log("The answer is " + 55); //55 is converted to a string and concatenated
1 + '2'; //12 -- 1 is converted to a string
5 - '1'; //4 -- '1' is converted to a number

//Inequality
1 < '2'; //true -- '2' is converted to a number
'3' > 2; //true -- '3' is converted to a number
1 < 'foo'; //false
1 > 'foo'; //false

//Arithmetic
5 + 2; //7 -- although under the covers this is actually 7.0
10 + 8.123; //18.123 -- 10 is immediately converted to a floating point number
0x0F + 3; //18 -- Hexidecimal number is converted directly to number type

//Other oddities
1 == true && -1 == true; //true, and
null == false; //true
'abc'.indexOf('e'); //-1, NOT null, so
'abc'.indexOf('e') == true; //true, but we wanted
'abc'.indexOf('e') >= 0;
</pre>

As you can see, there isn't a particularly hard and fast rule that one type is always converted to another. More importantly, you can see that the most common cases are strings to and from numbers and vice versa. Numbers coerce to booleans, but strings don't. For concatenation numbers coerce to strings. For equality it's unclear which direction the coercion goes and for inequality, strings are coerced to numbers as long as they convert cleanly.

Type coercion is intended to be a convenience feature in Javascript so new programmers don't need to understand value types deeply enough to perform <a href="https://en.wikipedia.org/wiki/Typecasting" target="_blank">typecasting</a>. Unfortunately the confusion that comes with type coercion mitigates any benefit even the beginner programmer would gain from it, since it is relatively unpredictable.

<h3>Managing Expectations</h3>

Since type coercion is unpredictable, we should manage values ourselves and try to be as explicit as possible so we always get results back that we expect. We don't want addition to concatenate our members if one is accidentally a string. We don't want to coerce boolean values to numbers or the other way around since the only number that evaluates to false is 0 and there are many times we get values which mean something failed, but the coercion would make them true.

We, basically, don't want the language to guess what we mean because it is likely to guess wrong. Let's have a look at some of the things we can do to help improve the reliability of our applications and manage the type coercion that happens with our values throughout our source code.

First, let's take a look at triple-equals (===). Performing a value conversion at comparison time has two pitfalls. The lesser of the two is, it's slow. It's not slow in the way that an O(n^4) algorithm is slow, but it is slower than comparing values directly without conversion.  Let's take a look:

<pre class="language:javascript">
1 == '1'; //true -- We saw this above.
true == 'true'; //false -- a string cannot convert directly to a boolean
-1 == true; //false
1 == true; //true -- true and 1 cross-convert to be equivalent

//Let's normalize.
1 === '1'; //false -- a number is never equal to a string
true === 'true'; //false -- a boolean is never equal to a string
-1 === true; //false -- a boolean is never equal to a number
1 === true; //false -- same as above
</pre>

We can see how eliminating coercion from our comparison operations, we get a normalized, type-safe experience while programming. This provides guarantees we otherwise could never get. If the code is changed, potentially in an unstable way, issues will start to emerge that will give us more immediate insight into what is happening.

Let's have a look at another method for handling type differences: typecasting. Typecasting is something that is very common in strongly typed languages, but is often overlooked in dynamically typed languages like Javascript because it is not immediately obvious why it could be valuable.  Let's compare some of the common ways people manage type differences and how typecasting can help normalize your code and eliminate hacks to get around a common problem.

<pre class="language:javascript">
//Numbers
1*'4' + 1; //5 -- This feels like a hack
+'4' + 1; //5 -- This looks like a mistake

//Typecasting to numbers instead
Number('4') + 1; //5

//Booleans
!'foo'; //false -- strange feeling, but it works
!!'foo'; //true -- Gross. It's hacky and I'm just as guilty as anyone of doing this
!!''; //false -- What does not-not empty string even really mean?

//Typecasting to booleans instead
Boolean('foo'); //true
!Boolean('foo'); //false
Boolean(''); //false

//Strings; Yes, I have seen this example in the wild
'' + 1234; //'1234' -- This relies on that weird coercion we were talking about

//Typecasting to strings instead
String(1234); //'1234'
</pre>

Typecasting might take a few more keystrokes than one of the hack methods, but it does two things for us that other methods don't provide. First, typecasting is declarative of intent. By using Boolean or Number, you know precisely what you should be expecting. You will also, get a highly normalized, safe value back. The second thing typecasting offers is a 100% guaranteed type safe expression every time. This means that every comparison, computation, concatenation, etc, will produce a predictable result. Predictability is stability.

Before we finish up, let's take a look at a couple of other built-in functions that are useful for handling common conversion cases. These functions are specifically for managing number and string outputs.  These three functions are parseFloat, parseInt and toString.

ParseFloat takes a single value parameter. ParseInt takes two mandatory values, the value to parse and a radix. A radix is the base the original number is in, which is important for handling things like binary, octal and hexadecimal strings.  ToString is a function that exists on the prototype for just about every object in the Javascript ecosystem.  Let's take a look at what 

<pre class="language: javascript">
parseFloat('123.45'); //123.45
parseFloat('0xFF'); //0 -- x and F are not valid numbers in decimal floating point
parseFloat('0107'); //107 -- Octal string is resolved as a decimal

parseInt('1234', 10); //1234 -- base 10 numbering; the most common output
parseInt('0xFF', 16); //255 -- Hexadecimal string
parseInt('0107', 8); //71 -- Octal string
parseInt('101', 2); //5 -- Binary string

['a', 'b', 'c'].toString(); //'a, b, c'
1234.toString(); //'1234'
</pre>

What is happening in Javascript is this, there are language features, i.e. type coercion, that were introduced to make it friendly for people who might not be strong programmers, or may not be programmers at all. Now that Javascript has taken hold as the language of choice for many different applications and we begin solving real problems with focus on real programming, this kind of low-entry-barrier kind of behavior is not preferable.

Like many other high-level, application type programming languages, Javascript has means to handle types with grace and stability.  The concept of a type-safe comparison, i.e. triple-equals (===), gives us type guarantees for a variety of conditional cases. Typecasting allows us to explicitly declare the manner in which we intend to use a value, affording us stability when operating with unexpected type variances. Finally, build-in conversion functions and methods allow us to convert a value, store it and use it in a predictable way. This conversion gives us guarantees around the type of a variable as we develop.

The important take-away here is using type coercion is, at best, an unstable way to write programs which could introduce bugs that are difficult to identify and, at worst, a hack that makes code obscure and difficult to maintain. Instead of using type coercion, prefer stable, predictable methods for guaranteeing type and maintain type safety in your programs.

<h3>Blog Post Notes</h3>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Type_conversion" target="_blank">Type Conversion</a></li>
<li><a href="https://en.wikipedia.org/wiki/Interpreter_(computing)" target="_blank">Language Interpreter</a></li>
<li><a href="https://en.wikipedia.org/wiki/Just-in-time_compilation" target="_blank">Just In Time Compilation</a></li>
<li><a href="https://en.wikipedia.org/wiki/Typecasting" target="_blank">Typecasting</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date><![CDATA[2015-07-13 09:00:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-13 17:00:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-managing-type-coercion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551439592;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1187;}i:1;a:1:{s:2:"id";i:1119;}i:2;a:1:{s:2:"id";i:1109;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dependency Injection Without A Framework (Or Pain)</title>
		<link>http://www.chrisstead.net/archives/776/dependency-injection-without-a-framework-or-pain/</link>
		<pubDate>Wed, 15 Jul 2015 17:00:39 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=776</guid>
		<description></description>
		<content:encoded><![CDATA[If you've come from one of those big name, big OO frameworks, you are probably used to the idea of an Inversion of Control (IoC) container and dependency injection. If you have worked with Angular, you're probably familiar with their dependency injection system. That's all great, but what if you aren't one of those people?

As it turns out, dependency injection (DI) just isn't that hard to wrap your head around. When you talk to someone who has worked with one of the big DI systems like AutoFac or Spring, it can sound like DI is an enormous deal and could take years of practice and experience to get comfortable with. Here's a little secret: there's no magic. It's not hard.

First, let's talk about what DI is; it's injecting stuff into your environment that you depend on. Dependency. Injection. That's it.

You're welcome.

Seriously, though, let's have a little look at what DI looks like in a very hand-wavy kind of way with a class in ES6.

<pre class="language:javascript">
class Widget{

    constructor(componentFactory, widgetizer){
        this.componentFactory = componentFactory;
        this.widgetizer = wigetizer;

        this.context = {};
    }

    build(){
        let processedContext = this.widgetizer.processContext(context);
        //Here we do some stuff, maybe
        return this.componentFactory.create(processedContext);
    }

    setContextValue(key, value){
        this.context[key] = value;
    }

}
</pre>

Obviously we know nothing about compontentFactory or widgetizer, but that's alright. All we really care about is that we know widgetizer has a method that processes a context and componentFactory has a create method that takes a processed context. The black boxes that are these objects really doesn't matter at this point in the application. All that matters is the API.

Most of the time when people see this kind of implementation, they construct each of the dependencies one of two ways. Either they instantiate the objects inside of their class or they instantiate their objects as they construct their class. To this I say 'gross.' The practice is so bad I can't bring myself to give an example.

Instead, here's how we are going to do this. We're going to use the factory pattern and create objects as we need them. Once we have a factory, we can build new widgets without breaking a sweat. Here's what that would look like.

<pre class="language:javascript">
var widgetFactory = (function(){
    var componentFactory = new ComponentFactory(),
        widgetizer = new Widgetizer();

    function build(){
        return new Widget(componentFactory, widgetizer);
    }

    return {
        build: build
    };
})();

//Somewhere in the code
let myWidget = widgetFactory.build();
</pre>

The code is so simple it practically writes itself. What's even better, if you are writing unit tests (you should be <a href="https://www.youtube.com/watch?v=iwUR0kOVNs8" target="_blank">testing all the f**king time</a>) then the setup for your tests becomes so easy even a junior Wordpress developer could figure it out. Here's a little Jasmine for flavor:

<pre class="language:javascript">
describe('Widget', function(){
    var testWidget;

    beforeEach(function(){
        var componentFactory = { build: function(){ return {}; } },
            widgetizer = { processContext: function(){ return {}; } };

        testWidget = new Widget(componentFactory, widgetizer);
    });
});
</pre>

Your unit test setup is seriously only 8 lines of executable code. Let me repeat that... EIGHT LINES. Since the instantiation of your dependencies is completely disconnected from the instantiation of your object, you can easily swap them out for testing, or replacement with a new, better version, or... whatever. There is no need to hunt down every place you instantiated your dependencies because, if they have dependencies of their own, you can just build factories for them, too.

Now, I will say that all of the factories of factories of factories is going to get a little heavy and become a burden on your immortal soul, but that's okay. I have another trick up my sleeve for you. Let's create a registry and automatically handle factories out of a central object. Automatic factory... AutoFac... hmm.

Public Service Announcement: Before we start into the next part, I want to make this clear -- If you aren't using a framework, you're building one.

Anyway, let's build our registry.

<pre class="language:javascript">
//This quick hack is probably not safe for production code.
//Always understand and test code before you use it.
var objectRegistry = (function(){
    let registrations = {};

    function register(key, definition, dependencies){
        if(registrations[key] !== undefined){
            throw new Error(`${key} already exists in object registry.`);
        }

        registrations[key] = {
            definition: definition,
            dependencies: dependencies
        };
    }

    function build(key){
        let dependencyInstances = [null], //Trust me, you need this
            definition = registration[key].definition,
            dependencyList = registration[key].dependencies
            dependencyLength = dependencyList.length;

        for(let i = 0; i < dependencyLength; i++){
            let dependencyInstance = build(dependencyList[i]);
            dependencyInstances.push(dependencyInstance);
        }

        return new (definition.bind.apply(definition, dependencyInstances));
    }

    return {
        register: register,
        build: build
    };

})();
</pre>

Creating a whole registry system really wasn't so bad. A little bit of recursion and line of slightly tricky Javascript later, you have a registry and object factory all set. Let's take a look at what our registration and instantiation code would look like now.

<pre class="language:javascript">
objectRegistry.register('ComponentFactory', ComponentFactory, []);
objectRegistry.register('Widgetizer', Widgetizer, []);
objectRegistry.register('Widget', Widget, ['ComponentFactory', 'Widgetizer']);

//You want a widget? You got a widget.
let myWidget = objectRegistry.build('Widget');
</pre>

A little recap, dependency injection is nothing more than providing your object with instances of the dependencies it needs. If your system is simple and your dependency tree is flat, you can easily get away with a factory to manage your dependency needs. If your system is more complex, you may need to create a registry to handle your components and the dependency tree. For better or worse, your dependencies are going to be complicated at that point anyway so avoid the pain.

The moral of this story is simple: never manage your dependencies along side the code that depends on them. Use factories to make your life better. If you take care of your dependencies, they will take care of you, so manage them wisely and profit.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>776</wp:post_id>
		<wp:post_date><![CDATA[2015-07-15 09:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-15 17:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dependency-injection-without-a-framework-or-pain]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551439599;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:867;}i:1;a:1:{s:2:"id";i:1238;}i:2;a:1:{s:2:"id";i:1128;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: Solving Problems With Recursion</title>
		<link>http://www.chrisstead.net/archives/783/mainstay-monday-solving-problems-with-recursion/</link>
		<pubDate>Mon, 20 Jul 2015 16:00:53 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=783</guid>
		<description></description>
		<content:encoded><![CDATA[If you have been writing Javascript for any amount of time, you're sure to be familiar with standard loop structures. For and while blocks are part and parcel of the modern programming experience.  On the other hand, if you haven't done a data structures and algorithms course, you may not be familiar with the term recursion. Recursion is another methodology for handling repeated behavior, but it is useful for a completely different set of problems.

Before we start looking at the kinds of problems recursion is useful for handling, let's discuss what it is. Recursion is the process of calling a function from within that same function to perform the operation again.  Typically this is done with some reduction, modification or subset of the original data.  A great, and simple example of a recursive algorithm is the Greatest Common Devisor (GCD) algorithm.

In order to understand what we are looking at with recursion, let's first take a look at an iterative solution to our GCD problem.  Euclid would tell us this is the most inelegant solution he'd ever seen to solve this problem, but he's not here, so we can do what we want.

<pre class="language:javascript">
function gcd(a, b){
    //Let's not modify our original vars
    let _a = a,
        _b = b,
        temp;

    while(_b !== 0){
        temp = _a;
        _a = _b;
        _b = temp % _b;
    }

    return Math.abs(_a);
}
</pre>

This function will find the GCD every time, but there is a lot of variable manipulation. With the variables being swapped around so much, it becomes difficult to follow what this function is really doing.  Nonetheless, there are benefits to writing out GCD function this way that we will discuss in a moment.  Now, let's take a look at the recursive GCD function.

<pre class="language:javascript">
function gcd(a, b){
    return b !== 0 ? gcd(b, a%b) : a;
}
</pre>

This second function actually accomplishes the same task as the original, but in a single line of executable code! Clearly recursion can provide a simpler, terser way of framing certain kinds of problems.  In this case, we solve one step of the problem and then let the recursion do it over and over until we get an answer. This shorter syntax comes with a cost: memory.

Our while loop, though a little harder to read, takes up, effectively, a constant amount of memory and processing cycles. When you enter the function, variables are declared, memory is allocated and then the loop works within the constraints of the variables we define. Our recursive function operates differently.

Let's add an array into our first function and watch what happens when we push values into it while we are computing everything.  This will give us some insight into what is happening in memory as our recursion is working.

<pre class="language:javascript">
function gcd(a, b){
    let memory = [a, b],
        _a = a,
        _b = b,
        temp;

    console.log(memory);

    while(memory.length > 0){
        
        if(_b !== 0){
            temp = _a;
            _a = _b;
            _b = temp % _b;
            memory.push(_b);
            console.log(memory);
        } else {
            memory.pop();
            console.log(memory);
        }
    }
    return _a;
}

gcd(150, 985);

// [ 150, 985 ]
// [ 150, 985, 150 ]
// [ 150, 985, 150, 85 ]
// [ 150, 985, 150, 85, 65 ]
// [ 150, 985, 150, 85, 65, 20 ]
// [ 150, 985, 150, 85, 65, 20, 5 ]
// [ 150, 985, 150, 85, 65, 20, 5, 0 ]
// [ 150, 985, 150, 85, 65, 20, 5 ]
// [ 150, 985, 150, 85, 65, 20 ]
// [ 150, 985, 150, 85, 65 ]
// [ 150, 985, 150, 85 ]
// [ 150, 985, 150 ]
// [ 150, 985 ]
// [ 150 ]
// []
// 5
</pre>

This is just a rough approximation, but you can see how more and more memory gets allocated to handle the recursion. We can generally consider this kind of behavior in our programs bad. As the algorithm finishes up, we can see the memory allocation is 8 integers.

The size of an integer lives somewhere between 2 and 8 bytes, so let's call it 4 bytes and meet in the middle.  This means that just the storage for the numbers we were computing took up 32 bytes. That may not seem like a lot, but considering our original algorithm took about 12 bytes, this is a pretty substantial overhead.

Fear not! All is not lost.

Okay, so recursion may not be the most efficient kid on the block, but sometimes it actually, really makes sense. Suppose we had a tree that you really, REALLY need to search and find something. You could write an iterative solution to search the tree, but that involves trickery we don't have time for in this post.  Instead, let's suppose the tree is several layers deep and each layer contains several intermediate nodes.  Here's what our algorithm might look like:

<pre class="language:javascript">
// A predicate function is a function which tests a value and returns true or false
function searchTree(rootNode, predicate){
    let children = Boolean(rootNode.children) ? rootNode.children : [],
        childCount = children.length,
        found = predicate(rootNode) ? rootNode : null;

    for(let i = 0; i < childCount && found !== null; i++){
        if(predicate(children[i])){
            found = children[i];
        } else {
            found = searchTree(children[i], predicate); // Recursion!
        }
    }

    return found;
}
</pre>

As you can see, we search the tree one edge at a time. We travel from node to node, moving up and down the levels until we find the element we want. If a matching element doesn't exist in the tree, then we return null and accept our fate.

Wrapping this all up, there are always many ways to skin the proverbial cat and with each solution, there is a cost and a benefit. Recursion is an excellent way to solve some particularly tricky problems, but it comes with a cost, specifically memory and efficiency. Even with the drawbacks, sometimes it just makes more sense to use recursion and reduce the problem down to something more manageable.

We can consider looping to be a lightweight, electric chainsaw. It will cut just about anything you put in front of it, but it can make a mess.  By that same notion, recursion is a scalpel. It's not the right tool for every job, but when it's handled with care, it can perform delicate surgery and remove warts from some of the trickiest problems in your code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>783</wp:post_id>
		<wp:post_date><![CDATA[2015-07-20 08:00:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-20 16:00:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-solving-problems-with-recursion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413713;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:841;}i:1;a:1:{s:2:"id";i:683;}i:2;a:1:{s:2:"id";i:939;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>574</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.228.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-03 13:02:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-03 21:02:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Whoops! You're right. I forgot to pass the predicate through. I've updated the example to work correctly. Thanks for catching that.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438635748.6988299;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[jetpack]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>573</wp:comment_id>
			<wp:comment_author><![CDATA[Patrick Radius]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[info@notoyota.nl]]></wp:comment_author_email>
			<wp:comment_author_url>https://plus.google.com/+PatrickRadius</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.46.200.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-03 11:52:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-03 19:52:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In the searchTree example, wouldn't 'predicate' be 'undefined' when called recursively like that? I think that would throw an error...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438631576.5570209;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438635560.975843;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>576</wp:comment_id>
			<wp:comment_author><![CDATA[Mainstay Monday: SOLID &#8211; Liskov Substitution Principle]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/833/mainstay-monday-solid-liskov-substitution-principle/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-10 08:06:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-10 16:06:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] is a recursive algorithm, which we discussed a couple weeks ago. As you can see, it has two return states, either the [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439222785.943768;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439230535.612885;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>577</wp:comment_id>
			<wp:comment_author><![CDATA[All in the Family: Filter, Map, Reduce, Recur]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/841/all-in-the-family-filter-map-reduce-recur/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-12 08:13:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-12 16:13:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] yourself. Anyway, if you really want to do this functionally, you would pull out our good friend, recursion. Recursion is a more mathematical means for looping over a set of values, and dates back to some of [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439402902.341491;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439395992.9272611;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Contracts for Better Code</title>
		<link>http://www.chrisstead.net/archives/790/contracts-for-better-code/</link>
		<pubDate>Wed, 22 Jul 2015 16:00:44 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=790</guid>
		<description></description>
		<content:encoded><![CDATA[With programming languages which have a greater draw for classically trained computer science types, there is a common discussion of contracts and data expectations. Contracts are so inherent in the code that it's hard to see a declaration without one. Type systems emerge from the idea of contracts and every function, constructor and return path comes with an expectation that is defined and declared in the code.

Javascript, being dynamically typed and a little loose with the morals, attempts to sidestep contracts altogether. Function arguments are little more than a strong suggestion to the programmer, and every function returns something even if that something is merely the undefined type.  Contracts are just not something we do.

Here's an example of exactly how squirrely Javascript can really be.

<pre class="language:javascript">
function addBasic(a, b){
    return a + b;
}

function addArguments(){
    let a = arguments[0],
        b = arguments[1];

    return a + b;
}

function addSuggestion(a, b){
    let _a = Boolean(a) ? a : 0,
        _b = Boolean(b) ? b : 0;

    return _a + _b;
}
</pre>

Obviously each of these functions does essentially the same thing, but in the last example a and b are nothing more than a suggestion of how you could use the function. You could run addSuggestion() and get 0 or you could run addSuggestion(1, 2) and get 3. There's no requirement that you actually adhere to the contract at all.

<em>You are doing it wrong.</em>

There, I said it. Mucking about with all of these bits and pieces that may or may not exist and allowing programmers to play fast and loose with your carefully constructed function is just plain wrong. I makes me want to take a shower.  It's like the midnight movie on the horror channel: gross.

Rule number one of contract club: You ALWAYS talk about contract club.

If someone created a contract in their function they are setting expectations. If you don't play by the rules someone set in the function, you should not expect the function to work properly. It's just that simple. The contract is there to save you from yourself.

At this point, I think I should mention, I understand that Javascript doesn't support function overloading, so you can't create optional variations on a function and the loose requirements around the contract are there so you can get something akin to overloaded functions.

To this I say hogwash!

Actually that's not true. Optional arguments are good, however it is better if we use them in a safe way. Overloaded functions, even in languages that allow them, can get dangerous.  It's preferable to write code that says what it means and does what it says.  Let's take a look.

<pre class="language:javascript">
function buildBasicUrl(hostname){
	return 'http://' + hostname;
}

function buildBasicPathUrl(hostname, path){
	return buildBasicUrl(hostname) + path;
}

function buildProtocolSpecificUrl(hostname, path, protocol){
	return protocol + '://' + hostname + path;
}

function buildPortSpecificUrl(hostname, path, protocol, port){
	return protocol + '://' + hostname + ':' + port + path;
}

function buildUrl(hostname, path, protocol, port){
	let url = '';
	
	if(Boolean(port)){
		url = buildPortSpecificUrl(hostname, path, protocol, port);
	} else if(Boolean(protocol)){
		url = buildProtocolSpecificUrl(hostname, path, protocol);
	} else if(Boolean(path)){
		url = buildBasicPathUrl(hostname, path);
	} else {
		url = buildBasicUrl(hostname);
	}
	
	return url;
}
</pre>

That may not be the most beautiful code I've written, but it illustrates the importance of what I am saying. Here we can see that there is a function, buildUrl, which takes four parameters. Hostname is required, but all of the rest are optional.  Once we get to the specific implementations of what we are actually doing, the contract becomes a firm handshake and it's backed by the interpreter threatening to throw an error if something goes wrong.  Mind you, the interpreter is going to just concatenate a whole bunch of undefined values, but that's beside the point.  You won't get what you want if you don't meet the contract.

So, there is another side to the contract that is also illustrated here. Regardless of what happens, you can guarantee you will always, ALWAYS get a string back when you run buildUrl. This is the promise made by the person who wrote the code before you came along. So, on the one hand, you must meet the requirements of the contract in order for the function to properly execute. On the other hand, you are allowed righteous indignation when you expect a string and you get a boolean or something else.

Return types are contracts.

When you, as the developer, write a function and claim you are returning a specific type, understand that the next person will hunt you down with hungry dogs if you promise a string, but sometimes return an object.  What is returned is really, REALLY important.  People rely on it.  Imagine if this happened:

<pre class="language:javascript">
/*
 * I solemnly swear I always return an array.
 */

function listify(a, b, c, d){
	let finalArray = [a, b, c, d];
	
	if(finalArray.contains('foo')){
		finalArray = null; //This will totally never happen
	}
	
	return finalArray;
}

function removeVowels(value){
	return value.replace(/[aeiou]/gi, '');
}

let myListNoVowels = listify('foo', 'bar', 'baz', 'quux').map(removeVowels);

//BANG! BOOM! EXPLOSIONS! GUNFIRE! STACKTRACE!!!!
</pre>

I mean, that was downright malicious. Who goes around saying they are returning an array and then they return null. That's seriously sadistic. What's worse is, if listify was buried somewhere in a library and all you had was the crummy documentation they wrote, you would never be able to figure out what you are doing wrong to cause listify to return null.

I dunno, it just blows up sometimes.

The short version of this post goes a little like this: When you write a function, you are writing a contract.  That is a contract you are required to honor and you can, almost always, expect the programmer who uses your function to adhere to that contract.

The longer sum-up goes more like this: A contract is a guarantee. The guarantee that is given states expectations for what the user will do and it provides assurances about what the user will get in return. Contracts revolve around data, and everything is data. This means that regardless of what you are writing or what you expect, in Javascript, you should always say what you mean and do what you say.

By providing a strong contract for the user to rely on, you are making the world a little better place to live in. You are giving guarantees when so many programmers around you might not. Best of all, when you write a good data contract in your functions you can come back after a year of looking at something completely unrelated and get back up to speed almost instantly on what goes in and what comes out.  Doesn't that sound like better code? It does to me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>790</wp:post_id>
		<wp:post_date><![CDATA[2015-07-22 08:00:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-22 16:00:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[contracts-for-better-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_description]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551762378;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1109;}i:1;a:1:{s:2:"id";i:1119;}i:2;a:1:{s:2:"id";i:1187;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>575</wp:comment_id>
			<wp:comment_author><![CDATA[Mainstay Monday: SOLID &#8211; Open/Closed Principle]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/813/mainstay-monday-solid-openclosed-principle/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-08 09:49:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-08 17:49:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] with this principle. Something else that might help us along the way is the discussion we had about contracts a little while [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439056166.834662;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439059381.621577;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mainstay Monday: SOLID - Single Responsibility Principle</title>
		<link>http://www.chrisstead.net/archives/795/mainstay-monday-solid-single-responsibility/</link>
		<pubDate>Mon, 27 Jul 2015 16:00:58 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=795</guid>
		<description></description>
		<content:encoded><![CDATA[This post is part of a series on the <a href="http://www.chrisstead.com/archives/category/design-patterns/solid/" target="_blank">SOLID programming principles</a>.

Starting this post and for the following four Mainstay Monday posts, I am going to go through the SOLID principles as put forth by Bob "Uncle Bob" Martin and Michael Feathers. SOLID is a foundational set of principles to allow programmers to evaluate their code by and refactor to in order to reduce bugs and increase stability. Originally SOLID was presented as a tool for object oriented design (OOD), but I contend that many of the principles apply to the functional paradigm as well.

The first principle of SOLID is the Single Responsibility Principle. As the name states, single responsibility is a heuristic we can use to evaluate whether code we wrote is trying to accomplish too many different tasks.  When code does too many things at once it allows bugs to creep in undetected. Following is a function that, at first glance, looks pretty small and innocuous, but actually tries to accomplish several different tasks at once.

<pre class="language:javascript">
function returnAdder(){
	
	let latestSum = 0;
	
	return function addStuff(a, b){
		if(typeof a !== 'number' || typeof b !== 'number' || isNaN(a + b)){
			throw new Error('Something isn\'t a number, yo');
		}
		
		latestSum = a + b;
		
		return latestSum;
	}

}
</pre>

Just as a brief review of what is happening here, we have a state variable captured in a closure, called latestSum. The returned function does a little validation, a little arithmetic and a little state modification. For 4 lines of executable code, that's actually quite a bit going on.

Let's do some refactoring and tease apart each of the different actions we're performing and create separate functions for each.  This may not immediately seem like the best way to go about things, but it will make our issues a little more transparent. Here's a new, refactored function that does the same job.

<pre class="language:javascript">
function returnComplexAdder(){

	let latestSum = 0;

	function storeLatestSum(sum){
		latestSum = sum;
	}
	
	function validateArguments(a, b){
		let aIsValid = typeof a === 'number' && !isNaN(a),
		    bIsValid = typeof b === 'number' && !isNaN(b);
			
		return aIsValid && bIsValid;
	}

	function add(a, b){
		return a + b;
	}
	
	return function composedAdder(a, b){
		if(!validateArguments(a, b)){
			throw new Error(`Either ${a} or ${b} is not a valid number.`);
		}

		storeLatestSum(add(a, b));
		return latestSum;
	}
	
}
</pre>

Composed adder is a little cleaner now. Each of the things it used to handle directly have been abstracted away and then reintroduced as function calls.  Now our function is a little less explicit about the discrete steps needed to accomplish the work, and our adder function can be considered more of an execution layer which merely combines the steps needed to fully process our request.

As it turns out, however, a big mess of functions like this can turn ugly in a heartbeat.  Beyond the obvious trend toward one or more pyramids of doom, we are handling a memory state in a rather sub-optimal way. When state and functions that modify that state live closely together it can sometimes be helpful to collect the entire block of data and functions into an object which manages its own state.

When we create a class around this concept of an adder with a persistent memory, we can make nearly a one-to-one conversion from a functional form to an instantiable object. Let's refactor and take a look at the resulting object.

<pre class="language:javascript">
class memAdder{
	constructor(){
		// Since the world can access this and we haven't done anything yet
		// we want to use a non-number falsey value that accurately describes
		// the current state of our object.
		this.latestResult = null;
	}
	
	storeLatestResult(result){
		this.latestResult = result;
	}
	
	validateArguments(a, b){
		let aIsValid = typeof a === 'number' && !isNaN(a),
		    bIsValid = typeof b === 'number' && !isNaN(b);
		
		return aIsValid && bIsValid;
	}
	
	add(a, b){
		a + b;
	}
	
	computeAndStore(a, b){
		if(this.validateArguments(a, b)){
			throw new Error(`Either ${a} or ${b} is not a valid number.`);
		}
		
		this.storeLatestResult(this.add(a, b));
		return this.latestResult;
	}
}
</pre>

Aha! Once we have made the transition to an object oriented paradigm, it becomes clear that we are still, in fact, not adhering to the single responsibility principle.  Our object, memAdder, is still doing all of the same things our original function was doing.  This is why our function looked so messy, we kept all the clutter!

As people who know me understand, I am a proponent of "everyday functional programming." This means that doing things in a purely functional way in theory sounds wonderful, but sometimes objects happen.  The beautiful thing that can happen, however, is sometimes we start looking at a big, ugly object and then functions happen.

Let's use a modified strategy/factory pattern returning functions instead of objects to abstract away all of our validation and computation logic and leave the object managing the thing objects manage best: state.  When we do this, we can fall back to our preferred pure functional approach for the grunt work, which will be selected and managed at runtime based on user need, meanwhile we have an object that can compose functions on the fly and maintain a running memory of the latest computation peformed.

<pre class="language:javascript">
//IIFE ALL THE THINGS!
let arithmeticValidatorFactory = (function(){
	
	function numberValidator(a, b){
		let aIsValid = typeof a === 'number' && !isNaN(a),
		    bIsValid = typeof b === 'number' && !isNaN(b);
		
		return aIsValid && bIsValid;
	}
	
	function getValidator(key){
		let validators = {
			default: numberValidator
		};
		
		return Boolean(validators[key]) ? validators[key] : validators['default'];  
	}
	
	return {
		get: getValidator
	};
	
})();

//IIFEs keep the global space clean and happy
let arithmeticFunctionFactory = (function(){
	
	function zeroFunction(){
		return 0;
	}
	
	function add(a, b){
		return a + b;
	}
	
	function getFunction(key){
		let arithmeticFns = {
			addition: add,
			default: zeroFunction
		};
		
		return Boolean(arithmeticFns[key]) ? arithmeticFns[key] : arithmeticFns[default];
	}
	
	return {
		get: getFunction
	};
	
});

class memComputor{
	constructor(method, validator){
		this.compute = method;
		this.validator = validator;
		this.latestResult = null;
	}
	
	setLatestResult(result){
		this.latestResult = result;
	}
	
	computeAndStore(a, b){
		if(!this.validator(a, b)){
			throw new Error(`Either ${a} or ${b} is not an acceptable argument.`);
		}
		
		this.setLatestResult(this.compute(a, b));
		return this.latestResult;
	}
}
</pre>

As we can see, the new object memComputor has been reduced to a single responsibility. Hooray! That's what we set out to do. memComputor is instantiated with a computation method and a validator, so it contains no computation or validation logic of its own. ComputeAndStore does exactly that. It takes the desired functionality, composes it on the fly, fails the attempt if it is invalid, otherwise the computation is performed and the output is stored and returned.

Meanwhile on the factory front, we have all of our actions lined up. We declare the methodology we need, receive functions and we have a pair of pure functions that are reliable, bug-free, or as close as we can make them, and ready for injection into our state-management object.

It seems like a lot of code to, ultimately, do a simple addition problem. If the goal were addition, I would agree. Ultimately, however, what we really built here was the foundation for a system to manage expensive actions that we might want to perform once and then reference again and again, like the union or intersection of a large list of data, perhaps.

To sum up everything we've gone over, the Single Responsibility Principle is a heuristic tool for evaluating whether a block of code, object-oriented or functional, is performing the correct actions to accomplish a single goal or if the code is taking on too much and should be refactored to solve the problem in a more granular way.

With many programming problems, identifying the right granularity can be difficult, but by using some of the well known and battle tested tools and solutions like the single responsibility principle. By adding SOLID principles to your arsenal of tools, your programming will get better and your ability to solve even greater and more complex problems will become a question of breaking them down into the right pieces.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>795</wp:post_id>
		<wp:post_date><![CDATA[2015-07-27 08:00:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-27 16:00:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-solid-single-responsibility]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<category domain="category" nicename="solid"><![CDATA[SOLID]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413700;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:813;}i:1;a:1:{s:2:"id";i:854;}i:2;a:1:{s:2:"id";i:867;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>565</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[malonemike@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.226.98.250]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-27 09:52:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-27 17:52:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article! Keep them coming]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438031203.4385769;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438019550.7104671;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>567</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.209.207.136]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-27 13:12:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-27 21:12:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>565</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438031524.9150989;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>568</wp:comment_id>
			<wp:comment_author><![CDATA[Dom]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bondifrench@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[59.100.233.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-27 15:32:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-27 23:32:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good article, however I am surprised you haven't abstracted further your `numberValidator` function, this: `aIsValid = typeof a === 'number' &amp;&amp; !isNaN(a)`  is repetitive and could be applied to any number of arguments your `computeAndStore` function accepts.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438053375.3351419;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438039923.5092809;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>569</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-27 19:16:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-28 03:16:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dom I understand where you are coming from and I considered it. Ultimately I decided that wasn't important to the core idea of isolation responsibilities, so I decided to avoid confusing the point. Thanks for the feedback!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>568</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438053369.1845059;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>572</wp:comment_id>
			<wp:comment_author><![CDATA[Mainstay Monday: SOLID Open/Closed Principle]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/813/mainstay-monday-solid-openclosed-principle/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-03 08:01:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-03 16:01:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] week we discussed the concept of single responsibility in programming. Continuing the process of discussing SOLID principles, let&#8217;s take a look at [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438617693.0719571;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438625416.1751151;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>578</wp:comment_id>
			<wp:comment_author><![CDATA[Mainstay Monday: Interface Segregation Principle]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/854/mainstay-monday-interface-segregation-principle/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-17 08:12:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-17 16:12:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Interface Segregation Principle is a close relative to the Single Responsibility Principle. The idea behind interface segregation is your API should use several small functions or methods to [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439827964.4247169;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439833452.8415489;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Code Smells - Conditional Obsession</title>
		<link>http://www.chrisstead.net/archives/806/code-smells-conditional-obsession/</link>
		<pubDate>Wed, 29 Jul 2015 16:00:29 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=806</guid>
		<description></description>
		<content:encoded><![CDATA[Jeff Atwood of Stack Exchange and Coding Horror fame wrote a post quite a long time ago about <a href="http://blog.codinghorror.com/code-smells/" target="_blank">code smells</a> and what they mean. A couple weeks ago, I discussed <a href="http://www.chrisstead.com/archives/759/eliminating-switch-statements-with-hashmaps/" target="_blank">eliminating switch statements using hashmaps</a>. In that post, I introduced a new code smell that I want to discuss in a little more depth - conditional obsession.

Conditional obsession is when a programmer introduces more conditional logic than would ever be necessary to solve a particular problem. Sometimes conditional obsession comes in the form of a conditional structure taking the place of a common data structure, such as switches and hashmaps, while other times, it is just overwrought code that grew block by block until it became so unmanageable that developers are now afraid to even touch it.

Following is a dramatization of the kind of code I am talking about. This has been taken from real code I have encountered in the wild, but the variable names have been changed to protect the innocent.

<pre class="language:javascript">
function initCriteriaAssets() {
    var $this = this,
        dataAssets = null,
        coreData = $this.$scope.coreData,
        criteria = $this.$scope.criteria;

    if (coreData && criteria) {
        dataAssets = coreData.criteriaAssets;
        if (criteria.length > 0 && dataAssets.length > 0) {
            var count = 0,
                callback = function (data) {
                    count--;
                    if (data) {
                        for (var i in dataAssets) {
                            if (dataAssets[i].assetId === data.id) {
                                for (var j in criteria) {
                                    if (criteria[j].criteriaId === dataAssets[i].criteriaId) {
                                        criteria[j].asset = data;

                                        if (data.metaData.recordId) {
                                            criteria[j].showDialog = false;
                                        }
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    if (count === 0) {
                        $this.setDataTemplate();
                    }
                };
            for (var k in dataAssets) {
                if (typeof dataAssets[k].assetId !== "undefined") {
                    count++;
                    $this.$dataModel.initById(dataAssets[k].assetId, callback);
                }
            }
        } else {
            $this.setDataTemplate();
        }
    }
}
</pre>

It's a little like the Twilight Zone movie where Dan Aykroyd says, "do you want to see something really scary," isn't it?

Clearly there are more smells at work here than conditional obsession, but you can see that this programmer was clearly testing every possible situation under the sun. Even with the original variable names in place, I would defy you to explain to me what this code actually does.  This code is so incomprehensible I'm not going to even attempt to restructure it in a single blog.  This could take anywhere from a day to a full sprint to unravel and clean up, depending on how pathological the problem is.

I have reached a point in my programming life where I view conditional blocks as a code smell. Sometimes they are necessary, but, often, they are just a bug magnet. The more conditions you attempt to satisfy, the more likely you are to get one of them wrong.  The deeper in a code block your condition is, the more likely it is to only occasionally surface, making it extremely difficult to diagnose.

No good code smell exists without some sort of remedy. Conditional obsession is no different.  Let's have a look at different ways we can fix up our code and make it easier on ourselves and nicer for the next programmer who has to take over what we have written.

<h3>Refactoring 1 - Reduce nesting depth</h3>

If you have your conditions nested two or more layers deep, consider refactoring your logic to handle the cases at a single layer, instead.  This will reduce the number of cases where your code becomes unreachable except for a very specific, difficult-to-identify edge case.  Let's take a look at an example.

<pre class="language:javascript">
function myFunction(myList, aValue){
    let defaultValue = 'defaultStr',
        newList = [];
    
    if (myList.length > 0) {
        if (aValue !== null) {
            newList = myList.map(value => value + aValue);
        } else {
            newList = myList.map(value => value + defaultValue);
        }
    } else if (aValue !== null) {
        newList.push(aValue);
    } else {
        newList.push(defaultValue);
    }
    
    return newList;
}
</pre>

<strong>Now let's apply refactoring 1.</strong>

<pre class="language:javascript">
function refactoredFunction1(myList, aValue){
    let defaultValue = 'defaultStr',
        newList = [];
    
    if (myList.length > 0 && aValue !== null) {
        newList = myList.map(value => value + aValue);
    } else if (myList.length > 0) {
        newList = myList.map(value => value + defaultValue);
    } else if (aValue !== null) {
        newList.push(aValue);
    } else {
        newList.push(defaultValue);
    }
    
    return newList;
}
</pre>

Even with just the first refactoring, we get code that is easier to reason about.  It's not perfect, and it's not DRY, but it's a step in the right direction.  Now that we have applied the refactoring, we can identify what some of the conditionals we had in our original code were really trying to accomplish.

<h3>Refactoring 2 - Factor conditionals</h3>

Factoring conditionals is a lot like factoring in algebra.  Suppose we had the following expression from Algebra 1:

5x + 10

We know that a simple factorization would look like the following:

5(x + 2)

Clearly the second expression describes the outcome of the first expression directly.  The main difference is, we now know that we are simply dealing in a linear expression, x + 2, which is being multiplied by 5.

The same can be done with conditional statements to help clarify meaning and help us to reduce complexity in our applications.  We can factor out common conditionals and separate our logical concerns, simplifying what we must digest to improve our program's readability and/or maintainability.

<pre class="language:javascript">
function conditionalFactoredFunction(myList, aValue){
    let defaultValue = 'defaultStr',
        newList = [],
        postfix = '';
    
    // aValue comparison to null is a common factor
    // Our conditionals continually switched between aValue and defaultValue
    if (aValue === null) {
        postfix = defaultValue;
    } else {
        postfix = aValue;
    }
    
    // Since we are always setting postfix to a sane value
    // we don't need to perform any conditional assessments here
    if (myList.length > 0) {
        newList = myList.map(value => value + postfix);
    } else {
        newList.push(postfix);
    }
    
    return newList;
}
</pre>

Now that we've performed our conditional factorization, it becomes trivial to finish the function cleanup. We are doing a lot of variable manipulation here. This kind of juggling leads to small, difficult to spot bugs, so let's just get rid of all the unnecessary assignments.

<pre class="language:javascript">
function finalRefactoring(myList, aValue){
    let postfix = aValue !== null ? aValue : 'defaultStr',
        newList = [];
	
	if(myList.length > 0){
		newList = myList.map(value => value + postfix);
	} else {
		newList.push(postfix);
	}
    
    return newList;
}
</pre>

By identifying the conditional obsession code smell, we were able to take a function that was small, but still difficult to read and reduce complexity while improving readability. We trimmed about 33% of the bulk from the code and cut closer to the real goal the original code was trying to accomplish.

A nose for code smells is generally developed over time and with practice, but once you learn to identify distinct smells, you can become a code sommelier and make quick, accurate assessments of code that could use the careful work that refactoring provides. While you code, watch out for conditional obsession and work to reduce the complexity of your application.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>806</wp:post_id>
		<wp:post_date><![CDATA[2015-07-29 08:00:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-29 16:00:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code-smells-conditional-obsession]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551421567;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:759;}i:1;a:1:{s:2:"id";i:820;}i:2;a:1:{s:2:"id";i:683;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: SOLID - Open/Closed Principle</title>
		<link>http://www.chrisstead.net/archives/813/mainstay-monday-solid-openclosed-principle/</link>
		<pubDate>Mon, 03 Aug 2015 16:00:45 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=813</guid>
		<description></description>
		<content:encoded><![CDATA[This post is part of a series on the <a href="http://www.chrisstead.com/archives/category/design-patterns/solid/" target="_blank">SOLID programming principles</a>.

Last week we discussed the concept of <a href="http://www.chrisstead.com/archives/795/mainstay-monday-solid-single-responsibility/" target="_blank">single responsibility</a> in programming. Continuing the process of discussing SOLID principles, let's take a look at the Open/Closed Principle. The name of the principle isn't quite enough to declare what it intends -- open to extension, closed to modification -- so we'll need to figure out how this applies to our daily life.

What does it really mean to be open to extension or closed to modification? Clearly, we can't strictly enforce that someone can't come along and change our code, so there has to be a certain amount of self control that comes along with this principle. Something else that might help us along the way is the discussion we had about <a href="http://www.chrisstead.com/archives/790/contracts-for-better-code/" target="_blank">contracts</a> a little while ago.

Uncle Bob Martin states, in his <a href="http://www.objectmentor.com/resources/articles/ocp.pdf" target="_blank">article on the open closed principle</a>, that when requirements change, it is incorrect to modify working code to manage new, or updated requirements, but rather, the existing code should be extended to support the updates. There is an assumption here that the code satisfies a single responsibility to the original requirement. When new requirements arise, an extension to the original functionality should be created instead of modifying the original code. Let's take a look at a functional approach to this.

<pre class="language:javascript">
// Original requirement: Validation, must be a string

// Important note: contract states value can be type any, return type is boolean
function isString(value){
    return typeof value === 'string';
}

// New requirement: Validation, must be a short string -- 10 chars or less

// We adhere to the contract here, value {any}, return {boolean}
function isShortString(value){
    // We are extending the original function with a new criterion 
    // by calling the original function and then adding a new
    // predicate upon return
    return isString(value) && value.length <= 10;
}
</pre>

In this example, isShortString is clearly an extension of the requirements that were defined in the original isString function. Both functions accept any kind of value and return a boolean, so they adhere to the contract, and isShortString is intentionally built off the assumption that isString will always perform the necessary check for for the basic string type before any further checks happen. This means that isShortString will, effectively, act as isString for any strings that are naturally shorter than the constraint.

Since SOLID was originally developed as a tool for people working in Object Oriented Programming (OOP) we can't overlook the original intent. If we want to apply this principle in an OO context, we need something to work with as a foundation.  Let's pick something easy that everyone can relate to from their grade-school years.  Let's have a look at a basic rectangle object, which defines the shape and has a function for getting the area and the perimeter.

<pre class="language:javascript">
class Rectangle{
    constructor(height, width){
        this.height = height;
        this.width = width;
    }
    
    getArea(){
        return this.height * this.width;
    }
    
    getPerimeter(){
        return this.height * 2 + this.width * 2;
    }
}
</pre>

For as unexciting as this is, rectangles have a special form we all know and love: squares.  Suppose we created a rectangle class and we're using it throughout our code.  One day the product owner says we need certain sections of the code to only support squares.  We could, theoretically, modify this code to handle rectangles and their regular form, squares, but that violates the single responsibility and open/closed principles.  This is a perfect opportunity to subclass and extend our original object.

<pre class="language:javascript">
class Square extends Rectangle{
    constructor(height, width){
        this.checkSize(height, width);
        super(height, width);
    }
    
    checkSize(height, width){
        if(height !== width){
            throw new Error('Height and width must be equal.');
        }
    }
}
</pre>

What makes our square class interesting is, the only addition to the original class we made is a check to make sure the height and width are equal. Rectangle does everything we need without modification, aside from add an assurance that business requirements are met. Another item of note is, we ensured the original contract was enforced so anything using the Rectangle class would be able to use the Square class without modification.

When we take time to carefully extend existing functionality there is a little bit of magic that happens - we end up writing less code! If we had created a rectangle and then created a square, independent of the rectangle definition, we would have created duplicate code.  If, for some reason, we needed to add something to Rectangle, we would have to go track down Square and add it there too. I don't know about you, but I hate doing double duty.

<strong>Being a good programmer is a combination of being diligent and lazy</strong>

By front-loading the effort of good, well-written code, you get the benefit of doing less work later when things change. I will trade ease of upkeep for a little work now any day. I have seen code bases that weren't crafted carefully and, as a result, required a tremendous amount of work to make even minor changes. In the foolishness of my youth, I might have even created code like that.

Coming back around to something Uncle Bob wrote in his article, expecting that all code will be closed to modification is generally unreasonable.  Sometimes things change in a way that the original code no longer works as desired at all. Due to the nature of changing business requirements, it's important to keep in mind that closure should be applied carefully and appropriately.

Since this is about Javascript, it's easy to point to view-related code.  Views can change on a whim and whole swaths of code may be rendered obsolete. This kind of sweeping change makes it important to clearly separate and define your business rules from the way information is presented to the user. Business rules seldom change. If someone wanted to write an accounting app, the view layer could change to enable easier entry. Common accounting principles like GAP are safe, and wise, to consider set in stone.

The Open/Closed Principle is designed as a tool to support good programming practice. By following the ideas presented, it becomes much easier to write an application that supports business rules and allows developers to safely and correctly enhance behavior as the business continues to grow and change over time. Consider your code as you write and ask yourself if you can define you work in extensible pieces which can support good development in the future without over-developing now.

<h4>Blog Post Notes<h4>

<ul>
<li><a href="http://www.chrisstead.com/archives/795/mainstay-monday-solid-single-responsibility/" target="_blank">Single Responsibility Principle</a></li>
<li><a href="http://www.chrisstead.com/archives/790/contracts-for-better-code/" target="_blank">Contracts</a></li>
<li>Robert C. "Uncle Bob" Martin - <a href="http://www.objectmentor.com/resources/articles/ocp.pdf" target="_blank">Open/Closed Principle</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>813</wp:post_id>
		<wp:post_date><![CDATA[2015-08-03 08:00:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-03 16:00:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-solid-openclosed-principle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<category domain="category" nicename="solid"><![CDATA[SOLID]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413694;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:833;}i:1;a:1:{s:2:"id";i:795;}i:2;a:1:{s:2:"id";i:867;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Refactoring with Boolean Algebra and De Morgan&#039;s Laws</title>
		<link>http://www.chrisstead.net/archives/820/refactoring-with-boolean-algebra-and-de-morgans-laws/</link>
		<pubDate>Wed, 05 Aug 2015 16:00:38 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=820</guid>
		<description></description>
		<content:encoded><![CDATA[Many junior and mid-level programmers working today have opted to skip a university education and, instead, have either gone through an Associate's program or a coding bootcamp.  Some programmers started their career out of college without a formal background in CS, getting degrees in physics, biology, chemistry or even liberal arts like journalism or design. Although these developers may be quite effective, there are many topics that are core to the standard Computer Science curriculum which developers without a formal CS education may not have been exposed to.

Today we start leveling the playing field. Dear reader, if you are programming, guess what, You're doing math! Are you surprised? Don't be. All of the logic that is key making programs work came out of mathematics.<sup>1</sup> We've all written some sort of condition statement at one point or another or we wouldn't be here, but could we do it better?

<strong>We can rebuild him. We have the technology.</strong>

Boolean algebra is the field of mathematics that provides us with the conditional logic we all know and use every day. In order to really understand, at a deeper level, what we are doing, it is important to really get a grasp on managing conditions using the rules uncovered by mathematicians who came before.  At the end of this post, we will look at De Morgan's laws and how they can be used to transform blocks of code with a couple of simple rules.

Before we dive into the bag of tricks, let's get a little bit of vocabulary and syntax out of the way.

Vocab:

<ul>
<li>Predicate expression - An expression that evaluates to either true or false</li>
<li>Tautology - An expression that always evaluates to true</li>
<li>Apenantology - An expression that always evaluates to false<sup>2</sup></li>
</ul>

Syntax:

<ul>
<li>&& - Logical and</li>
<li>|| - Logical or</li>
<li>! - Logical not</li>
<li><=> - Logical equivalence, technically means "can be replaced by"</li>
</ul>

Okay, now that we have that out of the way, let's talk predicates. The other day I was working through some older code which had been touched by several people. In this code was a conditional statement that looked roughly like this:

<pre class="language:javascript">
if((Boolean(valueList) && (externalValue && (dataValueA || dataValueB))) || (Boolean(valueList) && !externalValue)){
    //Functionality went here.
}
</pre>

This isn't the worst conditional I have ever seen, but it's pretty hard to read. It's not entirely clear what all of the condition states are, or why. Something I knew for sure, was there was a common factor here. Let's look all the way back to grade-school algebra at the distributive property.  We know this is true:

<pre class="language:default">
5 * (3 + 7) <=> 15 + 35 <=> 50
</pre>

The distributive property holds for Boolean algebra as well. Let's look at some boolean variables we'll call P, Q and R.<sup>3</sup> I won't present a formal proof for any of the claims I am going to make, mainly because that's not what this post is about, and they are already written and available on the web with a simple search on Google. Let's have a look at the distributive property for predicates.

<pre class="language:default">
P && (Q || R) <=> (P && Q) || (P && Q)

// Similarly

P || (Q && R) <=> (P || Q) && (P || R);
</pre>

Going back to our original problem, I could use the distributive law to pull one of the variables completely out of the predicate expression and simplify what I was looking at immediately.  Let's take a look at our new conditional.

<pre class="language:javascript">
if(Boolean(valueList) && ((externalValue && (dataValueA || dataValueB))) || !externalValue){
    //Functionality went here.
}
</pre>

That's already a lot easier to look at and we've barely even started. I see another value in the mix I really want to simplify, but somehow it just doesn't seem like it will be as easy as pulling out our valueList.  Let's do some distribution again and see where that leaves us.

<pre class="language:javascript">
if(Boolean(valueList) && ((!externalValue || externalValue) && (!externalValue || (dataValueA || dataValueB)))){
    //Functionality went here.
}
</pre>

Well, that's just about as ugly as it was when we started, except for one thing. We introduced the concept of a tautology in the vocab.  We actually have one right here.  Let's take a moment and look at a symbolic representation, first.

<pre class="language:default">
P || !P <=> true // Always true. Try it out.
P && P <=> true // I feel like this speaks for itself.
</pre>

This means we can do a little bit of trickery and get rid of some stuff.  Let's take a look at the tautology in our code.

<pre class="language:javascript">
(!externalValue || externalValue) //AHA! Always true!

//So this means we can reduce like so

(true && (!externalValue || (dataValueA || dataValueB)))

//We don't need to leave the true in there.

(!externalValue || (dataValueA || dataValueB))
</pre>

With this refactoring we are left with a much simpler expression to evaluate. Before presenting the reduced predicate expression, let's take a look at one other rule in Boolean Algebra, associativity.  When all operators are the same, you can freely associate any set of values.  Here's what it looks like:

<pre class="language:default">
P && Q && R <=> (P && Q) && R <=> P && (Q && R)

//Also

P || Q || R <=> (P || Q) || R <=> P || (Q || R)
</pre>

With all of that put together, we get a final reduced result which relies on just one instance of each variable.  This is, as far as I can see, about as far as the train goes.  Here's our final conditional statement:

<pre class="language:javascript">
if(Boolean(valueList) && (!externalValue || dataValueA || dataValueB)){
    //Functionality went here.
}
</pre>

This isn't where the story for Boolean Algebra ends.  I introduced a new word, created using some Greek roots, apenantology. This is as useful for evaluating conditional statements as our buddy, the tautology.  Apenantology is the state where something always evaluates to false.<sup>4</sup>  Let's have a look at a symbolic example.

<pre class="language:default">
P && !P <=> false //Always false. Try plugging in values.
!P || !P <=> false //Always false, unsurprisingly
</pre>

Here's where it gets interesting. Where a tautology can be removed from a predicate expression, an apenantology can either be eliminated, or it will actually define the entire expression.  Here's how it works:

<pre class="language:default">
//Apenantology in an or condition
P && !P || (Q && R) //This can be simplified to
false || (Q && R) //Since this is an or expression, we can remove the false
Q && R //These are the only variables that matter.

//Apenantology in an and condition
P && !P && (Q && R) //Reducing
false && (Q && R) //Because the first value is false, the expression is false
false
</pre>

Let's take our predicate expression from when we did our second distribution.  Let's replace the or with and and see what we get instead.

<pre class="language:default">
//Here was our original expression:
((!externalValue || externalValue) && (!externalValue || (dataValueA || dataValueB)))

//I'm going to modify it a bit.
((!externalValue && externalValue) && (!externalValue && (dataValueA || dataValueB)))
(!externalValue && externalValue) //Apenantology

//Now let's simplify.
(false && (!externalValue && (dataValueA || dataValueB))) //Whoops! false && (P && Q)
false  //Anything inside the conditional block would never run. This is dead code.
</pre>

What about De Morgan's laws?

De Morgan's laws are named for the mathematician Augustus De Morgan. He discovered two very useful little rules that can be applied with assurance to any logical statements and guarantee equivalence and maintain truth values.

De Morgan's laws are actually pretty simple, but they give us some tools that can help to either simplify an expression or identify an expression that would give us the negation of the original expression. When I was learning these rules I kind of liked to think of them as the either/or rules. There are two and they look like this:

<pre class="language:default">
!(P && Q) <=> !P || !Q
!(P || Q) <=> !P && !Q
</pre>

For something that was named for a mathematician, these seem like a couple of really simple rules.  As it turns out, these can be really useful when working with conditional logic to either reverse or simplify a conditional block. For an example, let's take a look at a conditional reversal using one of De Morgan's laws

<pre class="language:javascript">
//This is a conditional statement we want to reverse
if(valueA || valueB){
    //Do one thing
} else {
    //Do another
}

//Reverse order
if(!(valueA || valueB)){
    //Do another
} else {
    //Do one thing
}

//Distribute

if(!valueA && !valueB){
    //Do another
} else {
    //Do one thing
}
</pre>

Whoa. That was kind of a drink from the proverbial firehose. For someone who is seeing this material for the first time, all of this math and its relation with code might seem a little dense. I wouldn't worry too much about getting it all at once. The important thing is to start looking at your code and identifying places where it seems like simplification should be doable. The more complicated your conditional statements are, the more likely a bug is lurking in the dark.

I would recommend you start getting your feet wet with the concept of tautologies. By simply recognizing where an idea is repeated and removing the repetition, your conditional blocks will become clearer and more precise.  After you have applied tautologies comfortably to your code, try playing with the distributive and associative laws. These three ideas will clean most of the garbage out of complex, messy conditionals.

Once the foundation work is comfortably in your arsenal, come back and start playing with the ideas around identifying apenantologies and flipping conditionals around to identify the best order for your conditions to be presented in.  Sometimes reordering conditions is all you need to make your code clean, clear and the best it can be. These principles of logic lay the foundation for what is crucial to make a program do all the things you ever wanted, so use them and make your code shine.

<h4>Blog Post Notes</h4>

<ol>
<li>Technically the logical paradigm came from a combination of Mathematics and Philosophy. A guy by the name of Bertrand Russell worked with mathematicians early in the 20th century to create a formal language which could be used to describe mathematics work that was being done. He and several important mathematicians helped to make formal proofs work in a predictable, and readable way. Thanks, forebears! Without you, computing might not be where it is today.</li>

<li>Apenantology is a neologism I am introducing here in order to accurately describe a situation which is diametrically opposed to a tautology. Tautology is built from the greek roots tautos, meaning identical, and logos meaning word. I constructed apenantology from apenanti, meaning opposite and logos meaning word.</li>

<li>This naming is common for mathematics and it makes it easier to read the expressions we are tinkering with. Most logical expressions are written using P, Q, R, S and occasionally T. When more than five variables are involved, I personally start to worry about complexity.</li>

<li>A rough proof is <a href="https://gist.github.com/cmstead/1ab28f1e30f9d6d43218" target="_blank">provided as a gist</a> for those curious as to whether apenantologies are supportable mathematically.</li>
</ol>

<ul>
<li><a href="https://gist.github.com/cmstead/1ab28f1e30f9d6d43218" target="_blank">Proof that apenantologies are always false</a> (largely a mechanical proof)</li>
<li><a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws" target="_blank">De Morgan's Laws</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>820</wp:post_id>
		<wp:post_date><![CDATA[2015-08-05 08:00:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-05 16:00:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[refactoring-with-boolean-algebra-and-de-morgans-laws]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551444018;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:896;}i:1;a:1:{s:2:"id";i:1142;}i:2;a:1:{s:2:"id";i:766;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: SOLID - Liskov Substitution Principle</title>
		<link>http://www.chrisstead.net/archives/833/mainstay-monday-solid-liskov-substitution-principle/</link>
		<pubDate>Mon, 10 Aug 2015 16:00:39 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=833</guid>
		<description></description>
		<content:encoded><![CDATA[This post is part of a series on the <a href="http://www.chrisstead.com/archives/category/design-patterns/solid/" target="_blank">SOLID programming principles</a>.

We've reached middle and, possibly, one of the more subtle principles in SOLID. Up to now we have dealt in ideas that either prescribe a way to separate and clean up your code, or provide rules for ways to maintain consistency in behavior while adding new functionality. Liskov substitution offers a means to guarantee expectations for developers are met when things change over time.

Arguably this is one of the most difficult principles to apply to functional programming since subclassing doesn't exist, method overriding is meaningless, however there are still some examples that we can look at to identify similarities.  Let's take a look at a function called deref, which dereferences an object value or returns null if the reference does not exist.

<pre class="language:javascript">
function validateObject(dataObj){
    return typeof dataObj === 'object' && dataObj !== null;
}

function validateToken(token){
    return token !== '' && token !== undefined;
}

function deref(baseObj, ref){
    let refTokens = ref.split('.'),
        token = refTokens.shift(),
        result = validateToken(token) && validateObject(baseObj) ? baseObj[token] : baseObj;
    
    result = result === undefined ? null : result;
    
    return Boolean(refTokens.length) ? deref(result, refTokens.join('.')) : result;
}
</pre>

This is a <a href="http://www.chrisstead.com/archives/783/mainstay-monday-solving-problems-with-recursion/" target="_blank">recursive algorithm</a>, which we discussed a couple weeks ago. As you can see, it has two return states, either the current result or the result from the next call on the stack. We'll assume that the key string passed in won't be long enough to overflow the stack.

Now, suppose we wanted to take our current deref implementation and extend it to return a default value if the reference we want doesn't exist.  We could, theoretically, add something else to this implementation, but that would violate Open/Closed at the very least.  Instead, let's create a wrapper function that extends the contract.

When we extend the contract for the function, we need to make sure that we don't break functionality for older code that is only using deref.  This means, the new argument must be managed in an optional way. In classical OO languages, we could use method overloading to accomplish this, and it purely functional languages, we would have pattern matching, but Javascript lives in two worlds, so we're going to handle this our own way.

<pre class="language:javascript">
function derefWithDefault(baseObj, ref, defaultValue){
    let result = deref(baseObj, ref),
        sanitizedDefault = defaultValue === undefined ? null : defaultValue;
    
    return result === null ? sanitizedDefault : result;
}
</pre>

It only took a couple extra lines of code and we've now created a new function that will give us some very powerful added functionality. What's better with this implementation is, we have maintained the original code, keeping our old functionality insulated from the new behavior.  This means any new code that is written can call our new pseudo-subclassed function just as it would have the old function, and get predictable behavior, and we can revisit old code in time and refactor to the new behavior with nothing more than a function name change. Code stability is the name of this game.

Now, let's have a look at an object oriented approach. Suppose we have a pet class, and we are describing pets which can do the trick "speak."  It's pretty safe to assume we're really talking about parrots and dogs, but we'll assume there are a whole large class of animals that could be pets and do the trick called "speak."  Let's have a look at our base class:

<pre class="language:javascript">
class Pet{
    constructor(){
        this.phrase = 'Hello, world.';
    }

    speak(){
        console.log(this.phrase);
    }
}

var genericPet = new Pet();
genericPet.speak(); // Hello, world.
</pre>

Obviously our base pet is some sort of program or computer.  Perhaps it's a highly-evolved <a href="http://www.ibtimes.co.uk/lego-robot-controlled-by-artificial-worm-brain-developed-by-openworm-project-1485174" target="_blank">open worm</a> or a Tamagotchi. At any rate, our pet isn't very interesting, but it's easy to extend and that's what we're going to do.

Let's make our pet a dog.  Dogs can speak, so we're okay there. Let's add another trick, too. Dogs can roll over.  Well, mine won't because they are stubborn, but you can teach a dog to roll over, so let's use that trick. Here's what our dog would look like:

<pre class="language:javascript">
class Dog extends Pet{
    constructor(){
        super();
        this.phrase = 'Woof!';
    }
    
    rollOver(){
        console.log('I rolled over, where\'s my treat?');
    }
}

var myDog = new Dog();

myDog.speak(); // Woof!
myDog.rollOver(); // I rolled over, where's my treat?
</pre>

If we look at this code, it's pretty clear that anywhere something is looking for a generic Pet instance, you could pass in Dog and it would be acceptable. It is critical to understand that we intentionally did not change speak.  Suppose we were to create another pet that would only speak if you gave it a cracker and it didn't do any other tricks.  This would definitely be a picky pet.  Let's go ahead and call it just that:

<pre class="language:javascript">
class PickyPet extends Pet{
    constructor(){
        super();
        this.phrase = "Thanks for the cracker.";
    }
    
    speak(cracker){
        if(cracker !== 'cracker'){
            throw new Error ('No cracker, no speak.');
        }
        
        super.speak();
    }
}

var myPickyPet = new PickyPet();
myPickyPet.speak('cracker'); // Thanks for the cracker.
myPickyPet.speak(); // Throws error with message "No cracker, no speak."
</pre>

As it turns out this is such a well-known violation of Liskov Substitution that my code editor highlighted the new speak method and informed me that it was an invalid extension of the base class. Obviously, anything expecting a conforming instance of Pet would have a problem with our new subclass. As it turns out, Javascript doesn't care about this violation until runtime and by then, it's too late.

There are more subtle violations that could also happen, but it's hard to list them all. Suppose speak did take an argument, but threw no error for any kind of type violation; this kind of code is still a violation since our new picky pet does throw an error. Other kinds of problems can be type mismatches, variations on what is returned by the method or function, removal of functionality that is critical for the parent class to work properly and so on.

Liskov Substitution is a fairly subtle principle which is meant to protect the deepest, most core parts of your program. I have a friend who claims that every other SOLID principle flows forth from Liskov and I would generally tend to agree, though that's a discussion for another day. Ultimately, if you adhere to the Liskov Substitution principle, your code is more likely to behave well under a broad set of conditions and remain stable even as you enhance you program over time. Think about Liskov Substitution as you work and you will write better code and craft better software.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>833</wp:post_id>
		<wp:post_date><![CDATA[2015-08-10 08:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-10 16:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-solid-liskov-substitution-principle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<category domain="category" nicename="solid"><![CDATA[SOLID]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413731;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:795;}i:1;a:1:{s:2:"id";i:867;}i:2;a:1:{s:2:"id";i:854;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>All in the Family: Filter, Map, Reduce, Recur</title>
		<link>http://www.chrisstead.net/archives/841/all-in-the-family-filter-map-reduce-recur/</link>
		<pubDate>Wed, 12 Aug 2015 16:00:38 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=841</guid>
		<description></description>
		<content:encoded><![CDATA[In programming it is becoming more common to see functional patterns.  Filter, map and reduce are all discussed openly in programming circles that live far away from Lisp, Haskell, ML and other functional languages. It is common, in Javascript especially, to see these functions being misunderstood and misused. My goal is to uncover the relation between these functions and provide a really deep understanding of what is going on when these common functions are use correctly.

By the end of this post, I hope you will see the relationship filter, map, reduce and recursion all come together in a harmonious way, allowing the programmer to transform data without loops and without brutish, heavy handed data manipulations. This journey will be part technical understanding and part new-age enlightenment. Don't worry if everything doesn't make sense on the first pass. This is a deep dive into the world of functional programming and a departure from the imperative methods people commonly use.

Let's start off with reduce.  Reduce is a function that, as you might have guessed, reduces a list of values.  As a side note, in my little corner of the world, I think of arrays as lists and I will refer to them as such throughout this post.<sup>1</sup> A common example of reduce is adding numbers.  An adder is a simple function to implement and allows for a very simple explanation. Here's what it might look like:

<pre class="language:javascript">
function add(a, b){
    return a + b;
}

var myResult = [1, 2, 3, 4].reduce(add, 0);
console.log(myResult); // 10
</pre>

I want to dig under the surface of this behavior and understand what is really going on with reduce.  Let's take a look at a way to implement reduce. The first implementation is just going to use a standard loop. Here's what it might look like:

<pre class="language:javascript">
function loopReduce(valueList, reduction, initialValue){
    var index = 0,
        result = initialValue !== undefined ? initialValue : valueList[0];
    
    index += result !== initialValue ? 1 : 0;
    
    while(valueList[index] !== undefined){
        result = reduction(result, valueList[index]);
        index++;
    }
    
    return result;
}
</pre>

It's not elegant, but it gets the job done. We loop over everything in the list and apply a reduction.  You can create an add function and a list of numbers and try it for yourself. Anyway, if you really want to do this functionally, you would pull out our good friend, <a href="http://www.chrisstead.com/archives/783/mainstay-monday-solving-problems-with-recursion/" target="_blank">recursion</a>. Recursion is a more mathematical means for looping over a set of values, and dates back to some of the earliest prototypes for computing back in the 1930's.

Before we go any further, I want to introduce a few short functions that will make everything a lot more functional. In our loop-based function would have gotten little utility out of these, but moving forward these are going to be very important.

<pre class="language:javascript">
function first(valueList){
    return valueList[0];
}

function rest(valueList){
    return valueList.slice(1);
}

function isUndefined(value){
    return value === undefined;
}
</pre>

In the next function we are going to use recursion to handle the looping so the body of the function only needs to be concerned with a single step in the process of reducing our list. Now that we have those out of the way, let's crack open a functional version of reduce and see what we can find. Let's have a look.

<pre class="language:javascript">
function recursiveReduce(valueList, reduction, initialValue){
    var _a = isUndefined(initialValue) ? initialValue : first(valueList),
        _b = isUndefined(initialValue) ? first(rest(valueList)) : first(valueList),
        remainderList = isUndefined(initialValue) ? rest(rest(valueList)) : rest(valueList);
    
    return remainderList.length > 0 ?
           recursiveReduce(remainderList, reduction, reduction(_a, _b)) :
           reduction(_a, _b);
}
</pre>

If this is your first time digging into the world of functional programming and using functions like first and rest, you might want to stop and absorb all of this for a moment. Reduce is a rather complex transformation function that requires keeping a fair amount in your head, so this is a lot to absorb. Another challenge we encounter in Javascript is the lack of pattern matching which would simplify this function significantly. Nontheless, that's a pretty heavy change from where we started at the beginning of the post and we still have more of this mountain to climb.

For sufficiently small lists of values, this reduction technique will work fine, but as the list gets too big, our reduce function will begin to slow down and fail. This is because recursion in Javascript is not tail-optimized, so each call goes on the stack which will eventually overflow. This overflow is the primary reason why many imperative modern languages discourage recursive algorithms.

Clojure introduces an idea that helps us to remedy this issue.  It is possible to use recursion inefficiently in Clojure and fill the stack, however, by using the recur function and calling it at the end of your function, you get the tail optimization you are looking for.  Similarly, the <a href="https://github.com/cmstead/JFP" target="_blank">JFP library</a> offers a recur function that allows for tail-optimized recursion.<sup>2</sup>  Let's rewrite our function using the JFP recur function.

<pre class="language:javascript">
function recurReduce(recur, valueList, reduction, initialValue){
    var _a = !isUndefined(initialValue) ? initialValue : first(valueList),
        _b = isUndefined(initialValue) ? first(rest(valueList)) : first(valueList),
        remainderList = isUndefined(initialValue) ? rest(rest(valueList)) : rest(valueList);
    
    return remainderList.length > 0 ?
           recur(remainderList, reduction, reduction(_a, _b)) :
           reduction(_a, _b);
}

function reduce(valueList, reduction, initialValue){
    return j.recur(recurReduce, valueList, reduction, initialValue);
}
</pre>

Phew! That was a long walk to get to a really efficient and effective reduce function.  It's elegant, declarative, and it uses tail-optimized recursion so we can really say we are operating in a functional way from the ground up. What's even cooler is, now we can see that even recursion can actually be looked at from a different angle and managed as a function instead just a concept. However, the title of this post mentions filter and map as well. Fortunately, we don't have to take the same long walk to get to those functions. We already have nearly everything we need already: looping, function application, even data copying!

Let's start with filter.  Anyone who has used filter correctly understands the power you hold when you start manipulating lists of elements and stripping elements down to the bare bones, leaving only the data you need.  It generally looks a little like this:

<pre class="language:javascript">
[1, 2, 3, 4, 5, 6, 7].filter(value => value % 2 === 0); // [2, 4, 6]
</pre>

If we peel back the skin and look at what is happening in filter, we can either look at it as another recursion. This means that filter is a function of recursion, just like reduce.  Here's an idea of what that would look like:

<pre class="language:javascript">
function recurFilter(recur, valueList, filterFn, initialSet){
    var sanitizedSet = isUndefined(initialSet) ? [] : initialSet,
        testValue = first(valueList),
        remainderList = rest(valueList);
    
    if(filterFn(testValue)){
        sanitizedSet.push(testValue);
    }
    
    return remainderList.length ? recur(remainderList, filterFn, sanitizedSet) : sanitizedSet;
}

function filter(valueList, filterFn){
    j.recur(recurFilter, valueList, filterFn, []);
}
</pre>

This is a lot like our implementation of reduce.  The problem is it's actually so much like reduce we are actually duplicating code. Duplicate code is a bad thing when you already have a function that will do what you need. Let's rewrite our filter function as a function of reduce.

<pre class="language:javascript">
function filterer(filterFn, newList, value){
    if(filterFn(value)){
        newList.push(value);
    }
    
    return newList;
}

function filter(valueList, filterFn){
    return reduce(valueList, filterer.bind(null, filterFn), []);
}
</pre>

If we think of filter as a function of reduce, then, all of a sudden, almost all of the logic goes away.  Our original function was so close to reduce that they could have been separated at birth. The only thing we really need to make filter unique is a wrapper function to evaluate our predicate and capture the values that pass. Filter is a reduction function.  In much the same way, map is also a reduction function.  Here's an implementation skipping all of the intermediate steps and drawing from what we know about filter:

<pre class="language:javascript">
function mapper(mapFn, newList, value){
    newList.push(mapFn(value));
    return newList;
}

function map(valueList, mapFn){
    return reduce(valueList, mapper.bind(null, mapFn), []);
}
</pre>

That's it! Map and filter are clearly little more than a wrapper around the reduce function.  With the relation to reduce, we can say that filter and map are functions of reduce.  We have essentially built a family tree of filter and map, which we can see are cousins related to the same reductive heir.  This relationship could not work the other way around since only reduce has the flexibility to transform lists in a variety of ways, all while maintaining function purity.  So, now when people talk about the filter-map-reduce pattern, we know that they are really talking about the reduce-reduce=reduce pattern.

Why is this important?

When I first starting learning functional programming. I had a really hard time separating myself from the idea that filter, map and reduce were really any different than a wrapper over forEach. I thought of them as highly specialized looping functions that did a little bit of extra work under the covers to add some power to the language.

This idea that these functions are wrappers over a loop is a common misconception made by many people coming from the imperative world into functional programming. It is common to see these functions called with function arguments with side effects, treating them as nothing more than a looping structure.

By breaking down the barrier between the programmer and high-performance recursion, it becomes obvious that traditional loops are not really part of the game at all. Any looping that might be done is used simply to access values within a list.  This data access is what's really important.  As it turns out, the order in which the elements are accessed is really unimportant as long as the output list adheres to the same order as the input list.

This break from conventional thinking, and seeing these functions which perform operations on a list as functions of reduce, helps us to understand what is really happening: we are actually transforming the data into something new! The reason the original data is unmodified is not an operation of the language and data mutability, it is the way immutability could exist at all.

When you return to looking at the code you are writing, and use map or filter again, it will be as if you are seeing beyond the curtain into the way the cogs and wheels are really working together. You may, like me, wonder why tail-optimized recursion is not core to the language. Things will make sense in a new way, and instead of writing programs which work, by brute force, to capture and strong-arm data into a form the user can make sense of, you will allow the data to glide effortlessly through transformations and become something the user can enjoy.

<h4>Blog Post Notes</h4>

<ol>
<li>As it turns out, arrays in Javascript are more closely related to vectors in languages like Clojure. This distinction can be discussed at length elsewhere, but it is important to note.  Ultimately, arrays and vectors have extra memory access features which give them a performance boost when data is accessed at places other than the head or the tail. Lists must be access sequentially.  I prefer the term list when dealing with arrays in Javascript because many of the functions we use to process arrays come directly from list processing, and do not benefit from the vector characteristics.</li>

<li>The tail optimization that JFP uses is a generic form of the trampolining method. Each pass of the recursive function finishes and returns. Within the recur function is a while loop which reduces the recursion into a high-performing loop structure. This allows a central recur function to capture the return and either execute the next step or exit, depending on the state of the recursion.</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date><![CDATA[2015-08-12 08:00:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-12 16:00:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[all-in-the-family-filter-map-reduce-recur]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551424163;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1109;}i:1;a:1:{s:2:"id";i:620;}i:2;a:1:{s:2:"id";i:939;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: SOLID - Interface Segregation Principle</title>
		<link>http://www.chrisstead.net/archives/854/mainstay-monday-interface-segregation-principle/</link>
		<pubDate>Mon, 17 Aug 2015 16:00:13 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=854</guid>
		<description></description>
		<content:encoded><![CDATA[This post is part of a series on the <a href="http://www.chrisstead.com/archives/category/design-patterns/solid/" target="_blank">SOLID programming principles</a>.

The Interface Segregation Principle is a close relative to the <a href="http://www.chrisstead.com/archives/795/mainstay-monday-solid-single-responsibility/" target="_blank">Single Responsibility Principle</a>. The idea behind interface segregation is your API should use several small functions or methods to accomplish tasks instead of one large function.  The traditional definition states you should use many client-specific interfaces instead of one general purpose interface.

Since Javascript doesn't have support for abstract classes or interfaces, we are going to focus on the functional application of interface segregation. Let's start off supposing your program is going to deal with a few different cases for objects which will be handed around and managed.  You know that your are going to potentially receive objects, which you want the keys from, arrays which you want just the strings out of and you will be receiving a JSON string from the user through some request or input.  Here's the way a single function looks when we try to manage all of these cases:

<pre class="language:javascript">
function doIt(myObj, isArray, isUserSpecified){
    if (!isArray, !isUserSpecified) {
        return Object.keys(myObj);
    } else if (isArray){
        return myObj.filter(value => typeof value === 'string');
    } else {
        try {
            return JSON.parse(myObj);
        } catch (error) {
            return [];
        }
    }
}
</pre>

Obviously this fails single responsibility, but there is more going on here. This function receives two different boolean values and changes the way it behaves based on configuration values. This is a dangerous path to walk and I strongly suggest people avoid it. The other problem that we have here is practically every executable line returns a value. This whole function is a setup for danger.

Note, I have actually seen functions like this. This kind of practice is easy to find in the wild, especially when looking at the code written by novice developers. There is also a variation on this function which handles the creation of booleans inside the function.  The code, when rewritten looks like this.

<pre class="language:javascript">
function doItAlternate(myObj){
    let isArray = Object.prototype.toString.call(myObj) === '[object Array]',
        isUserSpecified = typeof myObj === 'string';
        
    if (!isArray, !isUserSpecified) {
        return Object.keys(myObj);
    } else if (isArray){
        return myObj.filter(value => typeof value === 'string');
    } else {
        try {
            return JSON.parse(myObj);
        } catch (error) {
            return [];
        }
    }
}
</pre>

I'm not sure which is worse, but we are really solving three completely different problems with this code.  Let's suppose, instead of all the booleans, we were to start breaking this function down and solving the problems independently.  This is where our segregation comes into play.  We have one case where we want object keys.  By inspection we can see this is not related to the array problem or the user entered data problem.  Let's split that function out.

<pre class="language:javascript">
function getObjectKeys(myObj){
    return Object.keys(myObj);
}
</pre>

This function clearly cuts straight to the heart of what it does. Now we can take an object and safely capture the keys This reduces the cognitive load to understanding the cases when each boolean should be passed and whether or not something will go wrong with the code if our cases go wrong.  More importantly, any place in our code where we need to call this function can do it without any knowledge that our program could ever receive arrays or user defined functions. Those behaviors are completely outside the scope of this particular piece of functionality.

Let's deal with our array logic.

<pre class="language:javascript">
function getStringValues(myArray){
    return myArray.filter(value => typeof value === 'string');
}
</pre>

This is another one-liner, but it serves a very specific purpose. We no longer have this bundled in with our object or user input logic which means we can understand precisely the roll it plays. Now our code can safely assume it will always get the same information back, so we can call our array function in the correct context and reduce the overhead that accompanies a single, general-purpose function.

Finally, let's have a look at our segregated user input function.

<pre class="language:javascript">
function parseUserObject(userObj){
    var output;
    
    try {
        output = JSON.parse(userObj);
    } catch (error) {
        output = {};
    }
    
    return output;
}
</pre>

This one is the biggie of the bunch. User data is notoriously unreliable and this is the one that muddied the water the most. Originally we had a return statement in the try and one in the catch block.  This seems like a terrible idea. More importantly this really added a lot of complexity to our original function since we, not only, had to know this was user data, but we had to drop in a block to handle any of the fallout that happens when JSON.parse is called on something that won't parse.

With this function isolated, we get the same benefits we would get with the segregation of the other parts of our function, but we also get the added bonus of being able to rewrite this function without having to dirty up a general purpose function's scope with a bunch of variables which may never be used in any of the other behaviors.  Now we can clearly define a single entry point and a single exit. This function starts to approach the kind of purity we like when we want to wrap things up in unit tests.

Let's take a look at one last element of the interface segregation principle. We have looked at how interface segregation and single responsibility work together to clean up a function that increases cognitive load, let's take a look at the value of wrapping up general purpose behaviors in specific purpose functions. This is where interface segregation can really shine and simplify your programming.

Below is a set of functions I've created to demonstrate satisfying specific needs and reducing the exposure of general purpose functions to our code in the large.

<pre class="language">
function stringPredicate(value){
    return typeof value === 'string';
}

function shortPredicate(value){
    return value.length < 5;
}

function numberPredicate(value){
    return typeof value === 'number';
}

function evenPredicate(value){
    return value % 2 === 0;
}

function filterStrings(valueList){
    return valueList.filter(stringPredicate);
}

function filterShortStrings(valueList){
    return filterStrings(valueList).filter(shortPredicate);
}

function filterNumbers(valueList){
    return valueList.filter(numberPredicate);
}

function filterEvenNumbers(valueList){
    return filterNumbers(valueList).filter(evenPredicate);
}
</pre>

Here we can see several things at work. First, we have wrapped up the filter function in a few convenience functions which give us a specific type of output. This is great for sanitizing data as well as function composition. With each of the produced functions, we can provide value: filtering strings or numbers, filtering strings of a certain length or filtering only numbers which are even.

What is even better is, we can actually use these functions in a composite way to build more complex functions or new functions that do something different.  Imagine if we had to do this directly in our code. That would be a LOT of duplication and we would have to interact with the general purpose filter function every time.

We've looked at two interesting cases around the concept of segregating our interfaces and providing solutions for problems which can be reused throughout our code. First we looked at how interface segregation and single responsibility principle are related, and how one strengthens the other.  Then we had a look at wrapping up broad-use functions in solution-driven structures to simplify the process of solving problems in our program.

Interface segregation is a strong principle for simplifying code and providing a clearer strategy for solving problems.  It works hand in hand with other principles to make your program cleaner, simpler and more stable, which is what we all really want, isn't it?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>854</wp:post_id>
		<wp:post_date><![CDATA[2015-08-17 08:00:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-17 16:00:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-interface-segregation-principle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<category domain="category" nicename="solid"><![CDATA[SOLID]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413720;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:795;}i:1;a:1:{s:2:"id";i:833;}i:2;a:1:{s:2:"id";i:867;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sanitary Data: Maybe, Either and Deref</title>
		<link>http://www.chrisstead.net/archives/861/sanitary-data-maybe-either-and-deref/</link>
		<pubDate>Wed, 19 Aug 2015 16:00:55 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=861</guid>
		<description></description>
		<content:encoded><![CDATA[Although there are times when conditional blocks are necessary for functionality, it is common that conditions simply wrap up data which may be null or undefined.  These kinds of conditional blocks have become so common that they are considered idiomatic code. The underlying goal, however, is to guarantee sanitary data.  

Sanitary data is data that is guaranteed to be safe for use in your function without worrying about edge cases which could arise around data that could be subtly wrong or unsafe. Sanitary data is more than just data that exists. It is data that adheres to a set of qualifications which make the program stable and safe. These qualifications include things such as truthyness and type guarantees.

Since it is considered idiomatic to bundle up data in conditional blocks, often times functionality is wrapped up in the condition, muddying the waters between sanitary data and function execution. I would like to break that idiom with a concept introduced in Haskell, known as <a href="https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Maybe.html" target="_blank">maybe</a>.

In Haskell, maybe(a) returns Just(a) or nil.  Javascript does not have algebraic data types, Just or nil, so we are going to have to adjust a little.  That said, there are still some guarantees we can put into our maybe that will flow forward to other variables.  Let's have a look at an implementation of maybe that will set the foundation.

<pre class="language:javascript">
function maybe(value, expectedType){
    let sanitizedType = typeof expectedType === 'string' ? expectedType : '',
        valueOkay = typeof value === sanitizedType ? true : Boolean(value);
    
    return valueOkay ? value : null;
}

// Usage looks like this:
maybe('foo'); // foo
maybe('foo', 'object'); // null
maybe(0); // null
maybe(0, 'number'); // 0
maybe(false); // null
maybe(false, 'boolean'); // false

function myFn(value){
    let sanitizedValue = maybe(value, 'string');
    sanitizedValue = sanitizedValue === null ? 'default' : value;

    // do more stuff
}
</pre>

As you can see, it gives you a strong guarantee of what your data should look like. If your data is acceptable, you will just get your data back, or Just(a).  If your data fails the provided conditions, you will get null, which is as close as we can come to nil in Javascript.

Maybe alone will not give us the kind of data integrity we want. This reduces the conditions we have to consider down to 2, which is much better than the open landscape of the unknown, but it is not sufficient alone. As you can see in the usage section above, we still are testing our 'sanitized' value. Our goal is to remove as many of our data conditions as possible, so we still have more work to go.

When maybe isn't enough, we can look to another function: either. I use either so often that if I am ever without my functional library which provides either, I build it in as a utility. It's honestly that important. Let's take a look at what either looks like.

<pre class="language:javascript">
function either(defaultValue, value, expectedType){
    let sanitizedValue = maybe(value, expectedType);
    return sanitizedValue === null ? defaultValue : value;
}

// Usage goes a little like this:
either('bar', 'foo'); // foo
either(42, 'foo', 'number'); // 42
either('baz', 0); // baz
either(false, 0, 'boolean'); // false

function myFn(value){
    let sanitizedValue = either('default', value, 'string');
    // do more stuff
}
</pre>

As you can see, either gives us the strength of maybe with the sanitary nature of a safe default. Now we have removed all of the conditions from our small function. This is excellent! Now we can guarantee our data is sanitary even in a hurricane of strange calls and bad user data, and it's a tiny helper function that declares exactly what it does every time we use it.

The extra benefit we have with functions like maybe and either is they really do introduce the idea of function purity in a way that works with our everyday, practical application.  We can write functions that should never throw type errors, never get null pointers and always give us clean, safe data.

Except...

What happens when you need a value that is buried deep in an object? What if any layer in your object might not exist? This happens a lot. Actually it happens so much that I found myself using large blocks of either statements to guarantee I didn't break my function.  This is bad. We don't want big blocks of function calls when our entire goal was to remove large blocks of code around data to begin with.

Enter deref. Deref is the automated application of either over and over, ensuring we always get good data all the way through our object. Let's take a look at what deref could look like:

<pre class="language:javascript">
function deref(userObj, keyStr){
    var keyTokens = keyStr.split('.'),
        keyToken = keyTokens.shift().trim(),
        derefResult = keyToken === '' ? userObj : either({}, userObj, 'object')[keyToken];
    
    // NEVER return undefined
    derefResult = typeof derefResult === 'undefined' ? null : derefResult;
    
    return keyTokens.length === 0 ? derefResult : deref(derefResult, keyTokens.join('.'));
}

// Usage:
deref(null, 'foo.bar.baz'); // null
deref({ test: [ 'foo', 'bar' ] }, 'test.1'); // bar

function myNewFn(valueObj){
    let refOutput = deref(valueObj, 'my.object.deep.reference.valueList.3'),
        sanitizedData  = either('default', refOutput, 'string');

    // Do stuff with ultimate certainty!!
}
</pre>

Now we really have a set of functions that break us out of the data conditional cycle of madness! With as few as one or two lines, we can provide strong guarantees that our data will always match the expectations of our code.  By introducing three simple helper functions, we have reduced our code down to the essence of what we mean. We no longer have to spin our wheels cleaning up data or ensuring we aren't sending bad values through functions that could introduce dangerous runtime errors that could crash our applications when the user does something unexpected.

What is really happening underneath these helper functions is, we are creating sanitary data in an isolated way. Most programs, when you scratch beneath the surface, are little more than data manipulations. By placing strong guarantees on the data we are interacting with, we can stabilize our programs and reduce the amount of stress we feel about strange data circumstances and edge cases that are, largely, unimportant to producing meaningful output.

If you don't want to litter your code with copy/paste functions from a blog post, download the <a href="https://github.com/cmstead/JFP" target="_blank">JFP library</a> and use these functions which are pre-built to make your code sane. <a href="http://cmstead.github.io/JFP/conditional/" target="_blank">Read the docs</a> to see other ways you can make these functions work for you.

The next time you find yourself writing large conditional blocks to handle strange data, think about maybe, either and deref and then breathe a sigh of relief. When we introduce sanitary data into our code and think a little more functionally, the world looks a little brighter, so make your unit tests and your QA person happier and sanitize that data!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>861</wp:post_id>
		<wp:post_date><![CDATA[2015-08-19 08:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-19 16:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sanitary-data-maybe-either-and-deref]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551424139;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:806;}i:1;a:1:{s:2:"id";i:759;}i:2;a:1:{s:2:"id";i:955;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>An Open Letter to Single-Language Programmers</title>
		<link>http://www.chrisstead.net/archives/864/an-open-letter-to-single-language-programmers/</link>
		<pubDate>Fri, 21 Aug 2015 16:00:57 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=864</guid>
		<description></description>
		<content:encoded><![CDATA[I work with several programmers every day and I end up giving advice a lot.  Let's not discuss whether people are actually soliciting my advice, or not, but I give it regardless. This evening I started thinking about things I think every programmer should experience. There are lots of different topics that come to mind, including math, hardware, networking and so on.  One thing that keeps coming back to me, though, is languages.

When I started studying computer science in college, I thought, "learn one language, you basically understand them all."

Incorrect!

Some languages are very similar to one another, but each one has its own specific flavor or idiom. Some languages, on the other hand, are radically different from anything that is used in the mainstream commercial development landscape.

Early in my career resurrection I bounced from language to language, always staying close to home. PHP, C#, Java, JavaScript and back again. I wrote the same way in each of these languages, only doing things slightly differently only because there was a slightly different method to dig into what I needed.

The first time I really got a clear understanding that all languages are not made equal was when I built a content cache in Java.  Everything was in the runtime and I just created a static cache instance that lived outside of the current control flow and stored content I could retrieve later. I wasn't really breaking new ground, but I had to deal with one thread safety, cache invalidation and so on.

I swung back around and decided I was going to do something similar in PHP. Lo and behold, I discovered that no matter what I did, there was no way I could spin up a long-running thread or long-lived memory location I could easily store and retrieve anything from. The PHP lifecycle is akin to the lifespan of a housefly.

That was the first time I got a really clear picture of how different languages could be, even when they feel similar to an outsider.

My next eye-opening experience was when I decided I was going to look into a functional language and started seriously playing with Clojure.  For the record, I love Clojure. It just feels right to me.  I don't know why, but it does. Moving from languages which borrow syntax from C to a Lisp really changed the way I think about programming altogether.

All of a sudden my view of programming took a hard right turn and I stopped thinking about shared state and started thinking about data transformations. State became nothing more than a transition from one data form to another.

My day job revolves almost exclusively around writing JavaScript and I couldn't stand looking at sets of loops and conditional blocks.  It was a rat's nest of too many variables and too much ceremony. Every line looked like a duplication of code and all of the code looked like a bomb waiting to go off.

Clojure changed me.

This doesn't mean that I spend my days writing Clojure now, in fact I still write JavaScript, but every language I have touched has changed me a little. Java taught me about working in a long-running environment, PHP taught me about short-lived scripts. C# taught me about data structures and Clojure a lot about data management.

In the end, the reason I continue to work with JavaScript is because it reminds me a lot of myself.  It draws upon a little bit from a lot of different influences. The important thing is, JavaScript reached out and touched all of those things and brought something back with it.

I share all of this because I want to say to anyone who has gone their entire career only ever writing in a single language, try something new. Reach outside of your comfort zone and do something that looks nothing like the work you've done until now. Write a program that scares you. Use a language that changes you. Make yourself better and never look back.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>864</wp:post_id>
		<wp:post_date><![CDATA[2015-08-21 08:00:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-21 16:00:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[an-open-letter-to-single-language-programmers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551424190;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1091;}i:1;a:1:{s:2:"id";i:1226;}i:2;a:1:{s:2:"id";i:896;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: SOLID - Dependency Inversion</title>
		<link>http://www.chrisstead.net/archives/867/mainstay-monday-solid-dependency-inversion/</link>
		<pubDate>Mon, 24 Aug 2015 16:00:43 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=867</guid>
		<description></description>
		<content:encoded><![CDATA[This post is part of a series on the <a href="http://www.chrisstead.com/archives/category/design-patterns/solid/" target="_blank">SOLID programming principles</a>.

This is it, the final SOLID principle. Dependency inversion is probably one of the most talked about SOLID principles since it drives so much of what we see in programming today.  From Inversion of Control (IoC) libraries to the dependency injection in modern Javascript frameworks like Angular and Ember, popular OO programming has embraced this principle more than any other.  It's possible that the success of dependency inversion is related to the fact that it can be enforced with a technical solution.

Let's start by talking about what dependency inversion is. As Uncle Bob Martin says, dependency inversion is the dependency on abstractions instead of concretions.  More specifically, this means that any object or function should not rely on the existence of specific concrete parts of an object, but instead, it should expect and use a contract while letting an outside entity define the concrete object that will be used.

To demonstrate this idea, let's first take a look at a counter-example to our principle.  This is probably one of the most flagrant violations of the dependency inversion principle I have encountered in Javascript and it is right on a popular examples page. The following example is lifted directly from that examples page:

<pre class="language:javascript">
var Mailbox = Backbone.Model.extend({

  initialize: function() {
    this.messages = new Messages;
    this.messages.url = '/mailbox/' + this.id + '/messages';
    this.messages.on("reset", this.updateCounts);
  }

  /* ... */

});

var inbox = new Mailbox;
/* ... */
</pre>

Clearly, this is an example from the Backbone site. Backbone, you're doing it wrong.

If you look back to <a href="http://www.chrisstead.com/archives/776/dependency-injection-without-a-framework-or-pain/" target="_blank">my post on dependency injection</a>, you'll see we could easily create a factory for each of these instance-creation lines. It could be simple, like the following code:

<pre class="language:javascript">
var messageFactory = {
        build: function(url){
            var message = new Message;
            message.url = url;
            return message;
        }
    },
    mailboxFactory = {
        build: function(){
            return new Mailbox;
        }
    };

var Mailbox = Backbone.Model.extend({

  initialize: function() {
    var url = '/mailbox/' + this.id + '/messages';

    this.messages = messageFactory.build(url);
    this.messages.on("reset", this.updateCounts);
  }

  /* ... */

});

var inbox = mailboxFactory.build();
/* ... */
</pre>

It's a few extra lines of code, but the separation of concerns you get can make a huge difference when you write unit tests or if the creation of a message or mailbox ever becomes more complicated than simply calling new. By inverting the dependency chain on this small example, we centralize our creation, eliminate the new keyword from our code and provide a facility for easily injecting a substitute factory to help in testing that our code does only what it is supposed to do.

The other thing that happens when we break out the creation logic is, it becomes obvious what is really happening in the code: we are creating a messages object that is, really, an event handler. Now we can isolate this behavior fully and put guarantees around the actions our model will take when we trigger certain events.

Let's take a look at the other side of the picture and write a little Jasmine code to test our message model.

<pre class="language:javascript">
describe('messages', function(){
    
    var factory;
    
    beforeEach(function(){
        factory = {
            build: function(){
                /* noop */
            }
        };
    });
    
    it('should set an event on the messages object', function(){
        var spy = jamine.createSpy('on');
        
        messageFactory = Object.create(factory);
        messageFactory.build = function(){ return { on: spy }; };
        
        mailboxFactory.build();
        
        expect(spy.calls.mostRecent().args[0]).toBe('reset');
        expect(typeof spy.calls.mostRecent().args[1]).toBe(function);
    });
    
});
</pre>

If we had tried to do that without our factory, it would have been a lot more challenging to wrap everything up in tests. Since we broke out the new object from the mailbox definition testing became as easy as replacing our definition for the factory and we got direct access to everything we needed inside the object setup.

Finally, when we separate our object instantiation out from the core body of our code, it becomes much easier to modularize all of our code and separate pieces as they become unwieldy. This gives us better guarantees around the stability of each part of our code, since each module can be written and tested independently, breaking the code apart at intentional seams.

The takeaway from all of this is, when we invert our dependencies in our code and rely on abstractions to define our program, we improve stability, guarantee contract integrity and improve the testing story. All of these things add up to better programming and more stable output.  Isn't that really what we all want?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>867</wp:post_id>
		<wp:post_date><![CDATA[2015-08-24 08:00:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-24 16:00:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-solid-dependency-inversion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<category domain="category" nicename="solid"><![CDATA[SOLID]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551409145;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:776;}i:1;a:1:{s:2:"id";i:813;}i:2;a:1:{s:2:"id";i:795;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What the Heck is a Functor?</title>
		<link>http://www.chrisstead.net/archives/871/what-the-heck-is-a-functor/</link>
		<pubDate>Wed, 26 Aug 2015 16:00:26 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=871</guid>
		<description></description>
		<content:encoded><![CDATA[With functional programming ideas becoming more popular in languages not known for functional practices, words that are understood in functional and mathematics worlds are starting to surface in discussions outside of academia and in business solutions circles. One word people like to throw around is "functor."

What the heck is a functor?

It turns out a functor is just a function that maps one set to another set. That's really it. Functors come in a variety of forms, but they all, at the most abstract level, do the same thing. The particulars of how the mapping happens is what makes your function a solution to a distinct problem. To start off, let's have a look at a mathematical functor and the underlying logic, then we can turn that into code.  I promise this will be gentle.

<blockquote>
&Phi;() is a one-to-one, onto function that maps x -> 3x.

A = { 1, 2, 3, 4 }
B = { 3, 6, 9, 12 }

&Phi;(A) = { 3, 6, 9, 12 } = B

=> &Phi;(A) = B

&Phi;(S) can be represented by the function f(x) = 3x
</blockquote>

Sooo mathy.

Fortunately, Javascript can easily convert this into something that is a little less symbolic and a little more like what we might do in our day-to-day lives. Let's take a look at a Javascript equivalent of performing the same operation. Incidentally, we are going to use the map function to accomplish our goal. Let's have a look:

<pre class="language:javascript">
function multiply (a, b) {
    return a * b;
}

[1, 2, 3, 4].map(multiply.bind(null, 3));
// [3, 6, 9, 12]
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>871</wp:post_id>
		<wp:post_date><![CDATA[2015-08-26 08:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-26 16:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-the-heck-is-a-functor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551515406;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:620;}i:1;a:1:{s:2:"id";i:683;}i:2;a:1:{s:2:"id";i:1109;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>579</wp:comment_id>
			<wp:comment_author><![CDATA[Satyajit Sahoo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[satyajit.happy@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/100000665916861</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.233.173.137]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-26 11:15:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-26 19:15:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Or with ES6,

[1, 2, 3, 4].map(a =&gt; a * 3);]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[facebook]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[http://graph.facebook.com/v2.2/100000665916861/picture?type=large&_md5=c9aabbf1f74f68035911ff97003b3c6d]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[100000665916861]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1440639613.0395911;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1440616542.8939979;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>580</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.228.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-08-26 17:42:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-08-27 01:42:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Map is actually part of a much earlier ECMAScript specification. The arrow function is actually not the functor, but rather just syntactic sugar over the top of a standard function defintion. a*3 is the mechanism for the functor (map) to actually perform the operation.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>579</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1440639743.4518781;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mainstay Monday: Linked Lists</title>
		<link>http://www.chrisstead.net/archives/885/mainstay-monday-linked-lists/</link>
		<pubDate>Mon, 31 Aug 2015 16:00:26 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=885</guid>
		<description></description>
		<content:encoded><![CDATA[Dear data structures, which of you is most useful? I don't know, but linked lists are pretty awesome. Linked lists are great for any number of things, a list of data that can be grown without bound, a data structure that can be incrementally increased, a queue or a stack. There are even more things that can be done with linked lists, but before we can dig into what can be done with a linked list, we need to understand what it even is.

The most basic linked list is a series of objects that point from one to another. This is what we are going to dig into today. To get a basic understanding of how a linked list works, let's have a look at a basic diagram of a linked list.

<blockquote>
|Object A| -> |Object B| -> |Object C| -> null
</blockquote>

By this diagram, it makes sense to say that an empty list is null. It's not like null or falsey, but it's actually null.  Null contains nothing and points to nothing. As soon as you put your first element into the list, you get this:

<blockquote>
null
=> |Object A| -> null
</blockquote>

The last object in our linked list, always, is null. This actually makes it really easy to identify when we have hit the end of the list.  This kind of list is called a singly-linked list. This means we can only traverse the list in one direction. Typically when a linked list is created, the head of the list is held as a pointer.  Each object, including the head is an object and they are all, essentially, the same.  Let's have a look at an implementation of a basic linked list item.

<pre class="language:javascript">
function ListItem(value){
    this.value = value;
    this.nextPointer = null;
}

ListItem.prototype = {
    val: function(){
        return this.value;
    },
    
    append: function(node){
        var pointer = this.nextPointer;
        this.nextPointer = node;
        node.setNext(pointer);
    },
    
    setNext: function(pointer){
        this.nextPointer = pointer;
    },
    
    next: function(){
        return this.nextPointer;
    }
}
</pre>

There's really not much to this, but the important items here are the constructor which sets the internal value, which I am treating as read-only for our case.  Let's just say it's better that way. After that, we need an accessor, so let's use val.  Finally we need to be able to set the next value in the list and retrieve the next value in the list; append and next will do just fine for this.  Now if we want to create and use our list it would look like the following:

<pre class="language:javascript">
var listHead = new ListItem('foo'),
    listTail = new ListItem('bar'),
    tempItem;

listHead.append(listTail);
tempItem = new ListItem('baz');
listTail.append(tempItem);
listTail = tempItem;

tempItem = listHead;
console.log(tempItem.val()); // foo
tempItem = tempItem.next();
console.log(tempItem.val()); // bar
tempItem = tempItem.next();
console.log(tempItem.val()); // baz
tempItem = tempItem.next();
console.log(tempItem); // null
</pre>

This is a pretty manual process, but it gets the job done and we can see the basic use of our linked list object.  Now we can see how each of the objects links to the next and the last object always refers to null. This gives us a nice, predictable structure and clear, obvious algorithm for accessing each element in the list.

Let's add some convenience functionality around our list so we can dig into some of the interesting characteristics of a linked list.  We can create a list object and an iteration object.  These will give us a nice API to work with.

<pre class="language;javascript">
function Iteration(list){
    this.current = null;
    this.listHead = list;
}

Iteration.prototype = {
    next: function(){
        var next = (this.current !== null) ? this.current.next() : this.listHead;
        this.current = (next !== null) ? next : this.current;
        
        return (next === null) ? null : next.val();
    },
    
    hasNext: function(){
        var next = (this.current !== null) ? this.current.next() : this.listHead;
        return next !== null;
    }
};

function List(){
    this.first = null;
    this.last = null;
}

List.prototype = {
    append: function(value){
        var item = new ListItem(value),
            last = this.last;
        
        this.last = item;
        
        if(last){
            last.append(item);
        }
        
        if(!this.first){
            this.first = item;
        }
    },
    
    getFirst: function(){
        return this.first;
    },
    
    getLast: function(){
        return this.last;
    },
    
    iterate: function(){
        return new Iteration(this.first);
    }
};
</pre>

Here's what our original usage looks like once we wrap everything up:

<pre class="language:javascript">
var myList = new List(),
    iterator;

myList.append('foo');
myList.append('bar');
myList.append('baz');

iterator = myList.iterate();

while(iterator.hasNext()){
    console.log(iterator.next());
}

console.log(iterator.next());
</pre>

This is much cleaner and it gives us a little insight into the first aspect of linked lists, access performance. If we want to access the first or last element of our list, it happens in constant time, which we can express in big-o notation as O(1). This is really fast.  It's just about as fast as you can get for value access.

On the other hand, we also lose something for this gain at the front and back of the list.  Accessing any of the elements in the middle can only be accessed in linear, or O(n), time.  This means, to reach the nth element, you have to cycle through each element before it.  For small lists this is not a problem, but for large lists, this can be a problem.

These performance characteristics make linked lists great for small data sets and things like stacks and queues. Linked lists, however, are not suited for random access or repetitive search.  Sorting's not great either, but that's another discussion for another day. Let's look at accessing elements.

<pre class="language:javascript">
var myList = new List();

myList.append(1);
myList.append(2);
myList.append(3);
myList.append(4);

function nth(list, index){
    var foundItem list.getFirst().next();

    // Looping to access! Linear time element access.
    while(index > 0){
        foundItem = foundItem.next();
        index--;
    }

    return foundItem;
}

var firstItem = list.getFirst(), // O(1) - fast
    lastItem = list.getLast(), // O(1) - fast
    secondItem = nth(list, 1); // O(n) - linear
</pre>

Modification characteristics, on the other hand, are fantastic. If you need to add elements to a list, it's fast. The addition action is nearly as fast as reading the head or tail of the list. If you have the list element you want to insert after, you get an O(n) insertion speed.  The most costly part is the instantiation of a ListItem object. Each time you call append, it just adds an element and you're done. Speedy!

At the end of the day, there is another kind of list: the doubly-linked list.  As it turns out the performance characteristics aren't terribly better.  You get the benefit of moving up and down through the list, but access is about the same speed as is appending.

Linked lists, by themselves, are useful for the purpose of fast writing and small memory footprint for storage expansion.  It also doesn't require any pre-allocation, and can grow incrementally. When we look at other data structures, linked lists can make a good foundation structure because of the fast write behavior.  There is also a removal characteristic that is equally fast.  We'll take a look at those structures in another post.  Until then, think about your data and how you need to use it. Perhaps a list is what you've needed all along.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>885</wp:post_id>
		<wp:post_date><![CDATA[2015-08-31 08:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-31 16:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-linked-lists]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407628;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:901;}i:1;a:1:{s:2:"id";i:988;}i:2;a:1:{s:2:"id";i:919;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>591</wp:comment_id>
			<wp:comment_author><![CDATA[Mainstay Monday: Queues]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/901/mainstay-monday-queues/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-14 08:09:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-14 16:09:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] couple weeks ago, we looked into linked lists. Sadly linked lists are kind of a standalone topic that don&#8217;t use much more than basic [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442246948.2686;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1442270131.249547;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Testing Promises: Promise Fakes</title>
		<link>http://www.chrisstead.net/archives/890/testing-promises-promise-fakes/</link>
		<pubDate>Wed, 02 Sep 2015 16:00:12 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=890</guid>
		<description></description>
		<content:encoded><![CDATA[Javascript developers notoriously say unit testing in hard. I think the problem is actually more specific than that. Unit testing pure functions and business logic actually pretty easy.You put a value in, you get a value out. If the value you get back is what you expected, your test passes. Something that is hard to unit test is asynchronous logic.

Asynchronous logic is so hard to test, the angular team actually built a special mocking system for testing calls made through the $http service. In reality, though, if your unit tests are littered with $httpBackend references, you're doing it wrong.

I won't go into philosophical discussions about promises and callbacks, so let's just agree that people use promises. A lot. Promises have become the currency for modern asynchronous requests, whether to another thread or across the internet, if you have to wait for your execution to come back from an asynchronous behavior, you might see a promise in the mix. Your code might look a little like this:

<pre class="language:javascript">
class MyUsefulClass{
    constructor(myService){
        this.myService = myService;
    }
    
    myFunctionUnderTest(callback){
        var promise = this.myService.asyncMethod();
        
        promise.then(callback);
    }
}
</pre>

Let's cut to the chase, promises are easy to throw into the middle of your code, but they are really hard to test... until today.

In unit testing there is a concept known as fakes. Fakes are often, mistakenly called mocks, but mocks actually store something to use for later when you are handing your test expectations. No, fakes are just what they sound like: a fake something.

Fakes contain the minimum amount of code to satisfy your functionality and nothing more. Sometimes fakes are nothing more than an empty object or function. Other times they are a little more involved, doing stuff like calling passed functions and returning values, but at the end of the day, a fake is a placeholder used for guaranteeing your unit under test won't fail and will be isolated.

So, promises and fakes.

It is a law of unit testing that you do not talk to the outside world and you do not talk about fight club. This means, if you have a function that is going to call a service which will, in turn, interact with the world at large, you have a big problem. Fortunately, you probably wrapped that up in a promise and that is the crack in the armor we can use to break our unit out into its own isolated space.

Underneath it all, promises are nothing more than objects with a bunch of trickery hidden inside.  With the knowledge of fakes and a general understanding of the promise syntax, we can build a stand-in object.  A stunt promise, if you will. It's pretty common to use Chris Kowal's concept of promises, as developed in Q, so let's build our fake around that.

Here's what a promise fake might look like:

<pre class="language:javascript">
function PromiseFake(){
    this.failState = false;
    this.error = null;
    this.response = null;
}

PromiseFake.prototype = {
    setFailState: function(failState){
        this.failState = failState;
    },
    
    setError: function(error){
        this.error = error;
    },
    
    setResponse: function(response){
        this.response = response;
    },
    
    then: function(success, failure){
        if(this.failState){
            failure(this.error);
        } else {
            success(this.response);
        }
        
        return this;
    },
    
    catch: function(callback){
        if(this.failState){
            callback(this.error);
        }
        
        return this;
    }
};
</pre>

It's about 40 lines of code, but now we have something we can work with. This promise fake can be instantiated for each test we write and it won't muddy the state from test to test. It's chainable, so if there is code using chained promises, it can be tested. Finally, success and failure states can be set with errors and response values so any function that might be relying on a specific response value will be testable with little extra effort.

Faking can be hard work, but if you do it right, you only ever have to do it once. Hooray! Now let's look at a test for our method.

<pre class="language:javascript">
describe('MyUsefulClass', function(){
    
    var myInstance,
        myService;
    
    beforeEach(function(){
        myService = {
            asyncMethod: function(){}
        };
        
        myInstance = new MyUsefulClass(myService);
    });
    
    if('should call spy on success', function(){
        var spy = jasmine.createSpy('callback');
        
        myService.asyncMethod = function(){
            return new PromiseFake();
        }
        
        myInstance.myFunctionUnderTest(spy);
        
        expect(spy).toHaveBeenCalled();
    });
    
});
</pre>

That was easy! We didn't have to do a whole mess of monkey patching to our code and we didn't have to use some crazy mechanism to intercept HTTP requests way down the stack. Fakes are great, when used for the powers of good. The goodness doesn't stop there, though. Here's how we can actually test our promise fake actually works as expected.

<pre class="language:javascript">
describe('Do somethig that uses a promise', function(){
    
    it('should call success spy', function(){
        var myPromise = new PromiseFake(),
            spy = jasmine.createSpy('successCallback');
        
        myPromise.then(spy, function(){});
        
        expect(spy).toHaveBeenCalled();
    });
    
    it('should call failure spy', function(){
        var myPromise = new PromiseFake(),
            spy = jasmine.createSpy('failureCallback');
        
        myPromise.setFailState(true);
        myPromise.then(function(){}, spy);
        
        expect(spy).toHaveBeenCalled();
    });
    
    it('should chain', function(){
        var myPromise = new PromiseFake(),
            spy = jasmine.createSpy('callback');
        
        myPromise.response('foo');
        myPromise.then(function(){}, function(){}).then(spy, function(){});
        
        expect(spy).toHaveBeenCalledWith('foo');
    });
    
});
</pre>

That's pretty much it!

We had to do a little grunt work at the beginning, but after we built our class, we could fake promises all day long and save ourselves headaches forever more. The best part is, now we have eliminated the asynchronous behavior from our code and made everything testable. This makes our tests easier to read, easier to maintain and clearer to write. Who could argue with that?

What this all really leads us to is this, promises are tough to test, but when we absolutely, positively have to have them, we can trim the fat, clean out the code and fake our way to a brighter tomorrow.  Isn't that what we all really want? Go write some tests and make your code a better place to live.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>890</wp:post_id>
		<wp:post_date><![CDATA[2015-09-02 08:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-02 16:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[testing-promises-promise-fakes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551842634;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1217;}i:1;a:1:{s:2:"id";i:655;}i:2;a:1:{s:2:"id";i:1128;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>589</wp:comment_id>
			<wp:comment_author><![CDATA[jasonkarns]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jason@karns.name]]></wp:comment_author_email>
			<wp:comment_author_url>http://jason.karns.name</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.89.221.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-13 06:15:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-13 14:15:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My current app uses a significant portion of the Bluebird API. And if you look at the API, it should strike you as very similar to underscore/lodash. The majority of the API is for handling collections of promises and objects-of-promises, which is a higher level of abstraction over raw callbacks. I don't want to get into the callbacks vs promises debate, as I thought it was put to bed. Promises are a higher abstraction over callbacks and aren't even in the same category. https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/

Promises being functional (vs imperative) are precisely the reason why the Bluebird API looks so similar to underscore (which is a collection of functional-based functions: map, reduce, pluck, etc)

Rather than being complex uses of promises, they actually *simplify* the code. Consumers of the API shouldn't be concerned with how or when a thing is retrieved, but treat return values as values! Thus, retrieving a collection of things might be an array of promises under the covers, but the spread method lets you treat it as a normal array, spreading the values into function args. Or .join lets you handle an array of promises and get an array of values back. Abstractions aren't meant to increase complexity, but let your program speak at exactly the right level in which to be simply precise. (paraphrasing Dijkstra)

I challenge anyone who uses only the base Promise API to stop treating promises like a cheap syntax sugar for callbacks; to stop looking at asynchronicity in their code and instead see the *values* in the system. The base promise API shouldn't even exist at the higher levels of the codebase, but be pushed deep into the system. A system that accepts promises (rather than simply producing them) will see a drastic reduction in promise API entirely, as the system begins to consume them as a true primitive.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>588</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442153754.012785;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[http://1.gravatar.com/avatar/af3cabec7617f26145325b70393fc546?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[6343952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_wpcom_id_sig]]></wp:meta_key>
				<wp:meta_value><![CDATA[1eb0d67af218e7b50c3f9c1c17348c80d806dd36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>588</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-12 11:15:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-12 19:15:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would challenge you to give me an example where the entire API is fully utilized as you are proposing. I have worked with a variety of teams on a host of applications and the majority of test cases use the basic then and finally clauses. This brings me back to the current post which addresses uses cases in the large.

With this all in mind, if any application is leaning that heavily on complex promise cases, I question the architectural choices that were made. This is especially true given that it is quite unlikely that a junior programmer, who will probably be supporting the code that someone wrote, using obscure parts of the promise API, will be able to get real utility out of the work that was done given they are unlikely to be as familiar with the API as you are.

With all of this said, I understand that these special use functions are there for a reason and they are likely made use of in a library somewhere. With that in mind, anyone who has the depth and breadth of knowledge to construct a library which handles this kind of extensive API use is probably keen enough they didn't need my blog post anyway.

Aside from the argument I've made above, I will say this more directly addressing my own opinions: promises are the wrong answer. All promises really do for you is provide enough rope to hang yourself. They do little more than wrap up a callback in a way that makes the code inside obscure and untestable. If you need advanced request resolution, async is a superior method for handling callbacks, asynchronous behavior and clean, easy to write code.

If promises were to truly deliver on the computer science notion of a promise, it would work in this fashion:

1. Open a thread and make a request
2. Return a promise
3. When the program asks for the result either return or block until the request is resolved

Promise libraries have no means to block the main thread. Instead they just give an extra layer of abstraction which is, at best, extra boilerplate in your code and at worst, a way to ensure your code is rendered untestable and unstable. This kind of untestable code is precisely what Michael Feathers refers to as legacy code.

The very first thing a legacy code expert would do is bundle up the obscured code and pull it out of the promise in order to ensure it is testable. This very act would render the promise little more than ceremony in your code which makes it effectively an unnecessary layer of abstraction which could be eliminated.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>587</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1442085343.0744591;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>587</wp:comment_id>
			<wp:comment_author><![CDATA[jasonkarns]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jason@karns.name]]></wp:comment_author_email>
			<wp:comment_author_url>http://jason.karns.name</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.89.221.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-09 10:52:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-09 18:52:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Right. So bluebird has a whole slew of utility methods for dealing with complex promises. Q has the same. For example, Q has: get, post, invoke, keys, fbind, fapply, fcall, all, allSettled, spread, thenResolve, thenReject, tap, timeout, delay, isFulfilled, isRejected, isPending, inspect, nodeify, and dispatch. Having a fake promise is great for very trivial use of promises. But any non-trivial codebase will (likely) begin to use the full API of whatever promise library is being used (bluebird, Q, whatever)

The only way to make a seam that hides this fact is for the entire app to only send/receive the basic promise object. If every unit assumes the response is a simple promise, and re-wraps the promise using the chosen library's constructor, then the test suite can remain ignorant of the promise library. However, that would result in an extremely high amount of Q(simplePromise) or Bluebird(simplePromise) usage at the boundaries of every object. Which leads me back to the original premise :) It becomes almost necessary to replicate the entire promise lib's API in the fake, or else find a different seam to test at.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>586</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441824746.5461321;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[http://1.gravatar.com/avatar/af3cabec7617f26145325b70393fc546?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[6343952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_wpcom_id_sig]]></wp:meta_key>
				<wp:meta_value><![CDATA[1eb0d67af218e7b50c3f9c1c17348c80d806dd36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>585</wp:comment_id>
			<wp:comment_author><![CDATA[jasonkarns]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jason@karns.name]]></wp:comment_author_email>
			<wp:comment_author_url>http://jason.karns.name</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.89.221.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-08 05:50:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-08 13:50:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@chris We seem to be speaking past each other. If my unit under test invokes `.join` on the return value from the DB, then the fake must implement `.join`. Do we not agree? There's nothing about a deferred involved.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441720221.6868131;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[http://1.gravatar.com/avatar/af3cabec7617f26145325b70393fc546?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[6343952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_wpcom_id_sig]]></wp:meta_key>
				<wp:meta_value><![CDATA[1eb0d67af218e7b50c3f9c1c17348c80d806dd36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>586</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.228.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-09 10:37:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-09 18:37:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I see what you're saying. If there is a join method on the promise, then yes, you would need to stub or fake that. Also, apparently, yes, we were speaking past each other. My apologies for misunderstanding. Nonetheless, I don't know of a join method on Q promises which is where I started from, so I omitted it through ignorance.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>585</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441823826.5627129;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>584</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-05 11:28:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-05 19:28:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So as it turns out, even when considering the entire app, you will need a fake promise and a fake deferred. The actualy inner workings of the library are unnecessary since you simply need to provide an interface to interact with. That said, faking deferreds is comparatively trivial to promises since the only exposed functions necessary are resolve and reject, which do not need to chain or provide any special behavior.

All of that aside, any time you plan on isolating any unit for testing and it relies on a library for functionality, you will have to provide a fake or a mock. This is a commonly known concern and is addressed quite extensively by Michael Feathers in Working With Legacy Code, as well as any book that provides an acceptable treatment of unit testing and TDD practices.

Here is an excerpt from Working With Legacy Code where Feathers addresses seam types in code: http://www.informit.com/articles/article.aspx?p=359417&seqNum=3]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>583</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441481326.085537;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>581</wp:comment_id>
			<wp:comment_author><![CDATA[jasonkarns]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jason@karns.name]]></wp:comment_author_email>
			<wp:comment_author_url>http://jason.karns.name</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.89.221.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-02 10:32:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-02 18:32:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How do you use this when most code isn't just using native promises but a promise library? The fake would need to implement the entire Promise lib's API.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441218778.0864961;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[http://1.gravatar.com/avatar/af3cabec7617f26145325b70393fc546?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[6343952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_wpcom_id_sig]]></wp:meta_key>
				<wp:meta_value><![CDATA[1eb0d67af218e7b50c3f9c1c17348c80d806dd36]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441241304.184736;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>582</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[64.73.228.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-02 17:07:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-03 01:07:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jason You are correct, most people (including myself) when dealing with promises, use a promise library. Ultimately, though, no single function should ever touch every part of the promise library from deferred to the promise resolution and thenning. If you are doing this, I recommend you avoid it since it's a dangerous road to walk.  Common usage ends up being right in line with my examples above.

Essentially, one function calls another and gets a promise back. Much like the way a monad works in Haskell, you are dealing in a pure function that returns an object. Once you have the promise back you will interact only with with the promise that is created from your library.

This means all you need is a faked promise instead of the entire library. Your tests should work based on what Michael Feathers refers to as seams in your code. You should break your unit under test apart from the actual function that it would call and, instead, use a faked service or object during instantiation.

Ultimately, though, I'm not entirely clear on what you're seeing that would necessitate the entire promise library.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>581</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441242467.714987;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>583</wp:comment_id>
			<wp:comment_author><![CDATA[jasonkarns]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jason@karns.name]]></wp:comment_author_email>
			<wp:comment_author_url>http://jason.karns.name</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.89.221.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-03 04:26:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-03 12:26:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A single function under test wouldn't need to exercise the entire promise library, but by the time your entire *app* is under test, it's very likely that you've exercised 80% of the promise library and have now re-implemented the Bluebird API in a fake.

An example would be stubbing out the database. It's very common to encapsulate a couple related queries into a function. So if the function under test hits the db with three queries, I would likely need to use `all` or `settle` to wait for them concurrently. Then perhaps `map` or `reduce` the results. A typical function would use 2-3 promise library methods before returning. And a different function might use `spread`. And a different function use `join`. As you can see, a single function need not use much of the promise lib, but across your entire app you would.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>582</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441283182.178242;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[http://1.gravatar.com/avatar/af3cabec7617f26145325b70393fc546?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[6343952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_wpcom_id_sig]]></wp:meta_key>
				<wp:meta_value><![CDATA[1eb0d67af218e7b50c3f9c1c17348c80d806dd36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>590</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.166.83.42]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-13 11:27:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-13 19:27:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I actually disagree with your assessment that promises are functional. Async actually behaves far more functionally than any promise framework which really is little more than a cheapening of functional paradigms by treating functions as second-class citizens, much like lodash and underscore do. An easy way to see this is to try actually performing real composition on any of the functions. If promises were actually functional, it good functional practices would be built in, but instead you get a weak imitation of functional programming by simply aping the behaviors with a meager subset of the overall benefit you get, namely only exposing things like map, reduce, etc.

By actually embracing functional programming completely, promises become exactly what you are claiming they are not: cheap syntactic sugar. After programming in a selection of Lisps for the past couple of years it has become apparent to me precisely how weak promises are when you actually work in a truly functional way.

I strongly encourage you to take a look at my library, JFP, or Ramda as a second opinion to see the power of good functional paradigms in Javascript. More than that, I would strongly encourage you to try out Clojure, F#, Haskell or Elixir for a taste of how modern, robust functional programming works. Promises are not represented in these languages because they are actually unnecessary cruft when you embrace functions as first class citizens instead of bundling them with an object as mere hangers-on.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>589</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1442172462.8878069;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mathematicode a Love Letter to Math</title>
		<link>http://www.chrisstead.net/archives/896/mathematicode-a-love-letter-to-math/</link>
		<pubDate>Fri, 04 Sep 2015 16:00:01 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=896</guid>
		<description></description>
		<content:encoded><![CDATA[I'll open up by saying I am a mathematician by education. I'm not one of the mathematical great minds and I am unlikely to ever win a Fields medal, but I have a degree in applied math and it's what I know. The reason I share this is because it helps define the way I think about problems I work on. Regardless of whether I am working on a problem at work or working on something in my spare time, my math background helps to define the approach I take to solving many of the problems I encounter.

I have worked in the software world for a while now and I have encountered a good number of developers who come from a variety of backgrounds.  I won't say all the best programmers I have met are math people, but I won't say they aren't. Some people come to programming through an organic sort of process and others go through a formal education process. Either way, there is something that comes forward really fast, Boolean logic.

Boolean logic is very closely tied to the mathematical work that George Boole did in the 19th century. This means, regardless of anything else you do with programming, you are doing math. Always.

I believe that even the people who started off as designers or biologists or cognitive scientists, if they become good programmers, they end up being good at logic and, yes, math.

There is a common debate around what a programmer is. Are they scientists? Plumbers? Engineers? Developers? What are they?

I believe that every software engineer is a developer. I do not believe that every developer is a software engineer. By this, I can say, I believe that every programmer is a developer.  An author of code. Programmers are writers.

As is true with journalists and novelists, there are good code authors and bad ones. Some people take pride in writing their code in a crafted, carefully maintained sort of way. I think this is a good thing and more people should do it.

The difference between a good and a bad author of code is the math they do. If we look to other engineers in fields like mechanics or structure, you will see math and science. Computer science incorporates these same elements in different ways. This means, in order to truly author great code, you must embrace the applications of math and make it part of your programming experience.

I believe that in order to be elevated to the state of being an engineer, you must look beyond the simple trappings of the language you work in. I speak the English language, but this does not mean that I am a linguist. I am merely a user of the language. Many developers live in much the same state in their code. Become more than you are and explore the things that make your language work.

I am not prepared to call myself an engineer, by the way. I believe I would make a terrible engineer. I am prone to flights of fancy and I am much more interested in the reasons why than the application of the math I understand. I bury myself in books about math and the underpinnings of programming rather than looking for sturdy materials to construct things with. I, with all of my foibles, am more aligned with philosophers than I am with the engineers who apply their knowledge to make the world great. I am okay with this realization.

In the end, however, I would encourage anyone who calls themselves a developer to dig and pry and tear whole chunks from computing. Find the math that lives underneath it all and apply it to what you know. As you grow and become a greater developer, embrace the math that will make you an engineer and bring sanity and soundness to the code that you and others like you will have to support and maintain for years to come.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>896</wp:post_id>
		<wp:post_date><![CDATA[2015-09-04 08:00:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-04 16:00:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mathematicode-a-love-letter-to-math]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420273;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:820;}i:1;a:1:{s:2:"id";i:1091;}i:2;a:1:{s:2:"id";i:611;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Generation and You</title>
		<link>http://www.chrisstead.net/archives/898/code-generation-and-you/</link>
		<pubDate>Wed, 09 Sep 2015 16:00:12 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=898</guid>
		<description></description>
		<content:encoded><![CDATA[A friend of mine and I have discussed code generation on several occasions. We both agree that any enterprise development process should involve code generation, without exception. Though it is possible for development from scratch may not provide enough identifiable boilerplate to justify building templates for your code, the moment a framework is in use, you will, undoubtedly, have a certain amount of boilerplate introduced which must be set up repeatedly for each new file you create.

I work with a team using Angular. We have certain style requirements for code, and Angular has a particular way for handling the setup for every code component you would create. Beyond this, we have certain patterns which have been uncovered which introduces sets of modules which we need to construct, which introduces even more boilerplate.

I have timed the setup for a standard controller and the baseline unit tests which need to be created before any new development and on average it takes about 10 minutes to create all of the files and type all of the boilerplate. For a one-time cost, this is a minimal requirement, but when working in an enterprise environment, this can add up to many lost hours each month.

Here's the worst part of losing those hours: no problem was solved in that time.

This means for any given person who is creating a new module, they are performing rote behavior over and over without adding any real value to the project. Programmers are not paid to simply pound keys. If key pounding was all that was necessary to create an application, they would pay the smallest wage possible. Data entry is a good example of a key-pounding job. I think we can all agree that programming is more than simply performing data entry.

If this kind of rote file creation and boilerplate typing is the most basic of work, then why do we continue to do it? It seems as though rote behavior is something we often look to automate, which is why the profession exists in the first place.

I say, are we not programmers?

Automation is the name of our game, so it seems reasonable that we would want to take this wasted time and have the computer do it for us. This is what computers are for. Fortunately, this is a solved problem!

My team uses Yeoman to create our boilerplate. We have a defined application file structure, and the modules we create always have a certain amount of boilerplate associated with them. Yeoman is really, really good and taking templates and creating files with them. Here's an example of what an Angular controller (in ES6) looks like, with no interesting bits:

<pre class="language:javascript">
(function(){
    'use strict';
    
    var moduleName = 'basic.module';
    angular.module(moduleName, []);
    
    class Controller{
        
        constructor($scope){
            'ngInject';
            
            this.$scope = $scope;
        }
        
    }
    
    angular.module(moduleName)
           .controller('basic.controller', Controller);
})();
</pre>

That is about 20 lines of boilerplate, and we haven't even created the unit tests for it, yet! Beyond that, most controllers are associated with a view or a directive, which means we have at least two or three more files, full of boilerplate, left to create. If we were using ES5, there would be even more code here that produced nothing of new value. This is not the reason we got into programming.

Let's take a look at what a Yeoman template would look like instead.

<pre class="language:default">
(function(){
    'use strict';
    
    var moduleName = '<%= controllerName %>.module';
    angular.module(moduleName, []);
    
    class Controller{
        
        constructor($scope){
            'ngInject';
            
            this.$scope = $scope;
        }
        
    }
    
    angular.module(moduleName)
           .controller('<%= controllerName %>.controller', Controller);
})();
</pre>

This is so similar to the code we wrote above it's difficult to see where one leaves off and the other picks up. Here's the big win, though, We spent 10 or 15 minutes creating this template and now we never have to do it again!

Let's have a look at what the actual script looks like to populate this controller:

<pre class="language:javascript">
'use strict';

var generators = require('yeoman-generator'),
    path = require('path');

module.exports = generators.Base.extend({

    constructor: function(){
        generators.Base.apply(this, arguments);
        this.argument('controllerPath', { type: String, required: true });
    },

    setup: function(){
        this.controllerName = this.controllerPath.split('/').pop();
        this.localPath = this.controllerPath.split('/').join(path.sep);
        this.config.save();
    },

    performCopy: function(){
        var controllerDestination = ['app', 'controllers', this.localPath].join(path.sep),
            controllerOutput = [controllerDestination, this.controllerName + '.js'].join(path.sep),
            context = {
                controllerName: this.controllerName
            };

        this.template('controller.js', controllerOutput, context);
    }
});
</pre>

That's it. This might not be the fanciest Yeoman generator, but it reliably outputs a controller, with the correct parameters filled, every. single. time. With just a few more lines of code and another couple templates for our tests and views, we can type one line into the shell and get all of our working files spun up in seconds.

Let's do a rough, back of the envelope comparison so we can see the amount of time saved by using generators.  Let's say you have a small to medium-sized SPA you are building and it contains 150 Javascript source files. On top of that, you will have unit test files for each of those source files, so that's another 150 files. Atop all of that, you have views that associate with, let's say, 1/3 of those files, so that's another 50 files. Let's say, for argument's sake that it takes 3 minutes per file to generate these files by hand.

350 * 3 / 60 = 1050 / 60 = 17.5 hours

Now, let's assume you created each of these files with a generator, and let's assume your computer is slow, so it takes 1.5 seconds per file. Let's do a little more math so we can see how long this takes in comparison:

350 * 1.5 / 60 = 525 / 60 = 8.75 minutes

Let's take the value that hired says is average pay for a Javascript developer in Los Angeles, $130,000US/year, and divide it by the number of hours in the average work year, 2087. This means we have an hourly rate of about $62. Now, let's multiply that $62 by 17.5 and we get $1085. That's some expensive boilerplate!

With our same numbers, a developer is working for a little more than $1/minute to generate boilerplate.  Let's assume this same developer generated all of their code with templates instead of by hand.  Now our code cost around $10 to generate on a slow computer. That is TWO ORDERS OF MAGNITUDE different.

People like to talk about exponential growth and this is exactly what we have here.  Using code generation versus writing boilerplate by hand literally increases the cost of each base file exponentially by a factor of 2.  Hand-typed boilerplate is 100 times as expensive.

The short version of all of this is, if you aren't using code generation, you should be. If your manager tells you that it takes too much time to get code generation integrated into your project, just send them to me. Does it take too much time to decrease the cost and time of production by a factor of 100? I think not.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>898</wp:post_id>
		<wp:post_date><![CDATA[2015-09-09 08:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-09 16:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code-generation-and-you]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551765763;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1217;}i:1;a:1:{s:2:"id";i:907;}i:2;a:1:{s:2:"id";i:933;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: Queues</title>
		<link>http://www.chrisstead.net/archives/901/mainstay-monday-queues/</link>
		<pubDate>Mon, 14 Sep 2015 16:00:59 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=901</guid>
		<description></description>
		<content:encoded><![CDATA[A couple weeks ago, we looked into <a href="http://www.chrisstead.com/archives/885/mainstay-monday-linked-lists/" target="_blank">linked lists</a>. Sadly linked lists are kind of a standalone topic that don't use much more than basic objects in order to function as designed. Queues, on the other hand can easily spring forward from linked lists, and they are a way of working with data as you might with generators!

Queues are a great resource for dealing with anything from data stores which are being updated in one place and read from another to dealing with data requests against an endpoint and a cache. Queues give you a reliable way to store data and interact with it later in the same order. Since functions are first class in Javascript, this means functions are actually data, which can be stored in a queue as well. This kind of power opens a world of possibilities.

Let's take a look at a queue in action.

<pre class="language:javascript">
// Does stuff and stores it
function processAndEnqueue(queue, process, value){
    queue.enqueue(process(value));
}

function slowResolve(queue, resolutionProcess){
    setTimeout(function(){
        if(queue.peek() !== null){
            resolutionProcess(queue.dequeue());
            slowResolve(queue, resolutionProcess);
        }
    }, 0);
}

function fakeAsyncRequest(callback, value){
    setTimeout(callback(value), 10);
}

function square(value){
    return value * value;
}

function enqueueSquares(queue){
    var resolutionCallback = processAndEnqueue.bind(null, queue, square);
        
    for(let i = 0; i < 10; i++){
        fakeAsyncRequest(resolutionCallback, i);
    }
}

function logSquares(queue){
    var log = console.log.bind(console);
    slowResolve(queue, log);
}

var squareQueue = new Queue();

enqueueSquares(squareQueue);
logSquares(squareQueue);
</pre>

That's a lot of code for a simple example, but I think you'll get the idea. Essentially we want to call a service and get a value, resolve the value and store it in the queue. One that is complete, we want to log everything that was queued up.  The problem we would have run into is, the queue may not be filled completely before we start dequeueing. This allows us start with the first value and let the rest filter in over time.

Queues are a common data structure which are used throughout programs in every language to solve the same kinds of problem: we want to perform one action and allow other actions or data to wait until we are ready. It's a lot like people waiting to get into a movie on opening night.

Since I already talked about linked lists, you probably have an idea where I am going with all of this. Let's use the list object we created in the last post to build our queue. It turns out that once we have a linked list item definition, we can create a queue with just a bit of effort.

<pre class="language:javascript">
//Linked-list-backed queue

function Queue(){
    this.queueHead = null;
    this.queueLast = null
}

Queue.prototype = {
    getHeadValue: function(){
        return Boolean() ? this.queueHead.val() : null;
    },
    
    peek: function(){
        return this.getHeadValue();
    },
    
    enqueue: function(value){
        var queueItem = new ListItem(value);
        
        // Append item to the end of the list
        if(Boolean(this.queueLast)){
            this.queueLast.append(queueItem);
        }
        
        // If there is no current list, create it with
        // the new value as the single item.
        else {
            this.queueHead = queueItem;
            this.queueLast = queueItem;
        }
    },
    
    dequeue: function(){
        var value = this.getHeadValue(),
            queueHead = this.queueHead;
        
        // If there is a head element, move to the next
        // otherwise leave queueHead as null
        if(Boolean(queueHead)){
            this.queueHead = queueHead.next();
            queueHead.setNext(null); // Avoid memory leaks!
        }
        
        // This checks to see if the head and the last point to
        // the same object. If so, the queue is now empty.
        if(queueHead === this.queueLast){
            this.queueLast = null;
        }
        
        return value;
    }
};
</pre>

There is a little bit of logic here to ensure we don't leave dangling pointers and we don't have null pointer exceptions, but other than this, we're basically moving through a list that has the capability to grow on one side and shrink on the other. This is the perfect structure for dealing with data which isn't infinite, but could grow to an arbitrary size at an arbitrary rate.

Why not just use an array for this?

It turns out we can do this in a quick and dirty way with an array. I've done it and you can do it too. I'll even give an example of how to do it, but I would argue that you shouldn't. Arrays are really, really good at handling random reads from a location. This means, if you have data you want to bounce around in, arrays are a good way to manage that. While you get this random access behavior, you have to pay for it somewhere. That cost is built in to the allocation and management of array memory.

Let's take a look at a queue built on an array and then we can talk about the problems.

<pre class="language:javascript">
// Array-backed queue

function ArrayQueue(){
    this.queue = [];
}

ArrayQueue.prototype = {
    peek: function(){
        return (this.queue.length > 0) ? this.queue[0] : null;
    },
    
    enqueue: function(value){
        this.queue.push(value);
    },
    
    dequeue: function(){
        return this.queue.shift();
    }
};
</pre>

As you can see, this code is really short and easy to write. For a small queue written in a naive way, this will suffice, but there is something dangerous lurking just beneath the surface. When we create our array, it allocates space for the array to live in. This space will grow with our array at a linear rate, which is okay, though non-optimal. The real problem comes in when we perform a shift.

Shifting an array involves retrieving the value from the head of the array, and then moving each of the elements into a new position in the array to fill the head space which was shifted out of the array. This kind of element movement and array space reallocation is really, really slow.

This slowness comes from the fact that an array in Javascript has to abide by particular rules to be predictable. If we were to do the following and the elements weren't moved as described here's what would happen:

<pre class="language:javascript">
var myArray = [1, 2, 3, 4];
console.log(myArray.shift()); // 1

//What would happen without reallocation:
console.log(myArray[0]); // undefined

//What REALLY happens because of reallocation
console.log(myArray[0]); // 2
</pre>

This kind of reallocation is exactly what we avoid by using a linked list.  Linked lists grow and shrink in constant time and position 0 is always the head of the list. Since queues only ever interact with the first and last elements of a set of values, lists give us the improved performance we need to ensure, even with large queues, we don't encounter the kinds of difficult to diagnose bottlenecks in our code that can cause slowness.

Queues are a great example of a use for linked lists in the wild and they provide a useful mechanism for lining up data and handling it in a predictable order. With a little creativity, queues can provide a means to manage a cache, handle processes in an orderly way and even provide the backbone for generator-like behavior. Take our queue code and play with it. You might find a solution to a problem that has been challenging you.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>901</wp:post_id>
		<wp:post_date><![CDATA[2015-09-14 08:00:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-14 16:00:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-queues]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures-foundation"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413681;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:919;}i:1;a:1:{s:2:"id";i:885;}i:2;a:1:{s:2:"id";i:907;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Five Things That Will Improve Your (Javascript) Code</title>
		<link>http://www.chrisstead.net/archives/907/five-things-that-will-improve-your-javascript-code/</link>
		<pubDate>Wed, 16 Sep 2015 16:00:47 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=907</guid>
		<description></description>
		<content:encoded><![CDATA[I see lots of discussion around new frameworks, libraries and other odds and ends, which claim to make your code better, cleaner, easier to maintain, etc. Although frameworks are definitely useful for avoiding reinventing the wheel and libraries help clear out boilerplate you would have to litter your code with, the cake they offer of better code is a lie.

As client-side development in the browser becomes more focused on solving application-sized problems, the days of merely dropping in a plugin or a library to accomplish what you need are coming to an end. Javascript living both in the browser and on the server further leads to large, potentially complex code bases. If we simply continue working the way we did 10 years ago, you end up with a spaghetti mess that is completely unmaintainable.

Don't panic!

There are things you can do to save yourself from impending doom. There are actually five things I recommend every Javascript programmer do to make their code and their lives better. It's a lot like reinventing yourself, though, it takes work and dedication, but it is worth every ounce of work you put in. I would do a countdown, but I always recommend these items are done in order.

<strong>1. Test Driven Development (TDD)</strong>

If there is one thing on this list you should start doing immediately, it is test driven development. TDD allows you to define, up front, what the business requirements are that your code should adhere to.  You actually write tests before you write code.

Red-Green-Refactor

This means, first you write a test and run it. That test should fail. If your test doesn't fail you are either writing tests against existing code (not TDD) or you wrote a test that tests nothing. Make sure your test fails first. Once your test fails, write just enough code to pass that test. Run the test again. Green means passing. When your test goes green, your code is good. Once you have written enough code to get messy, refactor, ensuring your tests continue to pass.

It doesn't really matter which testing framework you choose. At my work we use Jasmine, but Mocha is fine as is Tape. There is always a flavor of the week testing framework, so pick one that makes sense to you and use it. The choice is completely up to you.

<strong>2. Static Analysis</strong>

Static analysis is, basically, a program that checks your source code against a set of rules and warns you of potential errors and bugs in your code. The sooner you can get static analysis going on your code, the better. I recommend you set it up before you even write your first unit test.

Current popular static analysis tools are JSLint, JSHint and ESLint. I prefer JSHint only because I have used it and I'm very familiar with the tool. ESLint is the newest of the three and people swear by it. Both support ECMAScript 2015/2016 syntax. JSLint is the oldest and I am unsure as to the progress regarding new syntax. Douglas Crockford is a busy guy and he may or may not have the time to maintain it.

Another way to get static analysis into your project is to use a language designed for transpilation. Transpilation is the process of compiling source code into Javascript. The output could be either human-readable code or ASM, though I tend to prefer human-readable output for no particularly good reason except ASM makes me think of Emscripten which makes me cringe.

Languages which will provide good static analysis include TypeScript and Elm. TypeScript allows you to define the type contracts your functions and methods will adhere to, which means you get some good information up front about the safety of a function call. Elm is a functional view-layer language with very strict code and type rules; because of this Elm provides greater code stability guarantees.

<strong>3. Functional Programming</strong>

The kind of functional programming I am talking about is not just introducing Underscore or Lodash into your project, but really embracing the ideas that make functional programming great: immutability, no side effects, function composition and function abstraction.

Even though Javascript variables are mutable, by treating them as immutable, you add stability to your code by avoiding changing state under your own feet. When a value is set and remains as it was assigned, you can rest assured that your code will always behave the same way when you refer to that variable.

By eliminating side effects in as much of your code as you can, you create well defined units of code which behave the same way every time and, better yet, are easy to test. This makes the first item on our list even easier to satisfy which makes your program better.

Function composition is the process of creating small abstracted units of code as functions without side effects which are then put together to do more complex work.  This kind of modularity and abstraction makes it much easier to test and, when necessary, debug your code.

<strong>4. Data Structures and Algorithms</strong>

In any computer science program, the data structures and algorithms course is considered a critical course in computer science thinking. By getting familiar with the well known data structures and algorithms, you lay a foundation upon which you can build your knowledge and skills which will help to more quickly analyze and work with business concerns as well as existing code which will start to display recognizable patterns.

Data structures reach beyond the basics of variables, arrays and objects and dive into the concept of lists, stacks, queues and trees. These complex structures provide much cleaner, smarter solutions to common problems and can provide insight into problems which might be hard to identify without this kind of core understanding.

In much the same way that data structures provide data-related solutions to problems, algorithms provide insight into code and how to build in efficiency and good structure. Topics like sorting, searching and working with complex data structures will give a functioning foundation for how to integrate data solutions into your projects.

<strong>5. Design Patterns</strong>

Finally, to really cap the knowledge you have gained from the rest of the list, design patterns are a set of solutions which have been discovered and well documented. Design patterns tie together all of the practices with testing, abstraction, data solutions and algorithms and provide a well known structure to add to your program as common problems and patterns emerge.

As evidenced by my list, design patterns are not where you begin, but where you enhance. Good use of design patterns will enhance well-architected code and provide clarity when the going gets rough. These patterns are not so much a law as a guideline to help make good programs better and bad programs stable.

<strong>Closing</strong>

There are many other important practices I could have thrown into this list, like polygot programming and theoretical studies, but these things are only useful once a strong foundation is set. In studying these five major topics it is highly likely you will encounter different programming languages and different schools of thought. This is a good thing.

The greater the number of perspectives a programmer is introduced to, the better they are bound to become. This list is not something a good developer can go through once and be done. Instead it is a cycle which should be recognized and embraced. By learning, developers grow and by growing, developers improve their world.

Hopefully the topics I presented here resonate with you and you share this with others who want to continue their journey to be their best. Even the journey of a thousand miles is started with a single step, so take your step and become better every day.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>907</wp:post_id>
		<wp:post_date><![CDATA[2015-09-16 08:00:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-16 16:00:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[five-things-that-will-improve-your-javascript-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551409188;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:644;}i:1;a:1:{s:2:"id";i:1150;}i:2;a:1:{s:2:"id";i:1119;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: Sorting</title>
		<link>http://www.chrisstead.net/archives/915/mainstay-monday-sorting/</link>
		<pubDate>Mon, 21 Sep 2015 16:00:01 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=915</guid>
		<description></description>
		<content:encoded><![CDATA[If you're reading this you're likely already a programmer. This means you have likely used [].sort() in your code many times. I honestly can't remember how many times I've sorted data one way or another. Just because you've called sort on an array doesn't mean you're necessarily doing the best way you can. Does the following code look familiar to you?

<pre class="language">
[5, 9, 3, 8, 7, 6, 2, 5, 4, 8].sort().reverse()
</pre>

If that code looks familiar, today is the day you stop. Javascript's Array.prototype.sort function is actually a rich function that will allow you to specify sorting far beyond just ascending search. Although reverse has its uses, the example above is just plain abuse. Stop abusing your code!

Let's take a look at how we can make use of sort in a smarter way. Sort will take a sorting function which it uses to compare two values to decide their correct order. You can define your sorting any way, but let's start with just sorting numbers.  Here's our same array and a standard, ascending sort, but we're actually defining the direction of the sort by hand. Let's take a look what this expansion would look like:

<pre class="language:javascript">
var numberArray = [5, 9, 3, 8, 7, 6, 2, 5, 4, 8];

function sortNumbers(a, b){
    return a - b;
}

numberArray.sort(sortNumbers); // [2, 3, 4, 5, 5, 6, 7, 8, 8, 9]
</pre>

Yep, that looks like extra work to accomplish the same thing. SortNumbers just does the standard comparison and returns the array, sorted as expected. The win we get here is we can now specify the sort directly. Let's have a look at reversing the sort:

<pre class="language:javascript">
function reverseNumbers(a, b){
    return b - a;
}

numberArray.sort(reverseNumbers); // [9, 8, 8, 7, 6, 5, 5, 4, 3, 2]

//This output is exactly the same as
numberArray.sort().reverse(); // [9, 8, 8, 7, 6, 5, 5, 4, 3, 2]
</pre>

If we are lucky enough to only ever have to sort numbers, this knowledge isn't particularly helpful. We eliminated a linear algorithm for the sort behavior which might have shaved a couple milliseconds off the total processing time. No big woo, right?

Actually it is. Have a look:

<pre class="language:javascript">
function numberSort(values, direction){
    var directionSort = direction.toLowerCase() === 'desc' ? reverseNumbers : sortNumbers;
    return values.sort(directionSort);
}
</pre>

Our little abstraction made specifying the sort really, really easy. This means you could actually change the sorting behavior at runtime based on user input! Now, that's pretty useful.

Sorting is definitely not limited to numbers. Strings are another commonly sorted array. Much like numbers, strings have a predefined comparison inside Javascript. That said, we can't simply subtract them if we want to reverse the order. Strings have an ordinal number (numeric) value. This means you can't subtract strings, because it's meaningless, but one string can be greater or less than another.  Here's how we would perform a reverse sort on a string array:

<pre class="language:javascript">
var stringArray = ['foo', 'baz', 'quux', 'bar', 'snafu', 'woot'];

function reverseStrings(a, b){
    var result = a < b ? 1 : -1;
    return a === b ? 0 : result;
}

//The forward sort is left as an exercise for the reader. ; )
stringArray.sort(reverseStrings); // ['woot', 'snafu', 'quux', 'foo', baz', 'bar']
</pre>

Now we can see, a little more clearly, what sort is really looking for. Negative numbers move values to the left, positive numbers move values to the right and zero means the values are equal. This is very helpful information we can capitalize on to do more interesting sorting.  Suppose, instead of sorting trivial arrays, we wanted to sort arrays of objects.

A common sorting happens when objects have an ID and we want the objects in ID order. By understanding how to sort strings, which have an inequality comparison operator, we can create a function that gives us the meaning objectA is greater, less than or equal to objectB, i.e. objectA < objectB.

Supposing we were comparing two objects, objectA = { id: 1 } and objectB = { id: 2 }.  We (might or might not) know that objectA < objectB === objectA > objectB because both inequality operators evaluate to false for objects. With that in mind, we know that objectA.id < objectB.id === true. This is what we are going to use to write our object sorting function.

<pre class="language:javascript">
var objectArray = [{ id: 1 }, { id: 4 }, { id: 2 }, { id:7 }, { id: 3 }];

function objectSort(a, b){
    var aId = a.id,
        bId = b.id,
        result = aId < bId ? -1 : 1;

    return aId === bId ? 0 : result;
}

objectArray.sort(objectSort); // [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 7 }]
</pre>

This is the first time we really couldn't just use Array.prototype.sort on our array. This problem can only be solved with a specialized sorting function. This is where the power provided by the built-in sort really shines. We can actually define data comparisons on the fly, which means we can actually create a much richer experience for our users with a lot less code.

Let's actually take our object sorting one step further. Suppose we wanted to sort an array of people. The most common way this kind of list is sorted is by last name, then by first if the last names are the same. This leads us into uncharted territory. If you were simply relying on the basic sort, you would end up sorting, partitioning and sorting again.  Let's have a look at how we might solve this problem.

<pre class="language:javascript">
var people = [
        { lastName: 'Jones', firstName: 'Bob' },
        { lastName: 'Smith', firstName: 'John' },
        { lastName: 'Jones', firstName: 'Arlene' }
    ];

// First let's generalize the object sort by allowing
// for a key to be specified. This way we can define 
// a sorting methodology at runtime and reduce the amount
// of code we write.
function keySort(key, a, b){
    var aValue = a[key],
        bValue = b[key],
        result = aValue < bValue ? -1 : 1;
        
    return aValue === bValue ? 0 : result;
}

// Now we can use our key sort to handle
// sorting in name order, last, then first.
function nameSort(a, b){
    var firstNameSort = keySort.bind(null, 'firstName'),
        lastNameSort = keySort.bind(null, 'lastName'),
        result = lastNameSort(a, b);
   
   return result === 0 ? firstNameSort(a, b) : result;
}

people.sort(nameSort);

/* output:

[
    { lastName: 'Jones', firstName: 'Arlene' },
    { lastName: 'Jones', firstName: 'Bob' },
    { lastName: 'Smith', firstName: 'John' }
]

*/
</pre>

Now, that's some good sorting! We have all of the names in the right order with just a little bit of work. All of a sudden what looked like unnecessary abstraction becomes a big win. We sort on last name for every record, but we only sort on first name if the last name is the same. This allows us to not only sort complex arrays, but do it in a smart way to guarantee the best performance we can get.

This algorithm is great if you only need to sort first name and last name. What if you actually want to sort on a set of different keys? More importantly, what if you want to sort on a set of keys that are specified at runtime? This is a new, interesting problem which relies on what we learned with our people array. Let's generalize.

<pre class="language:javascript">
// Here's our starting point for a complex sort
function complexKeyedSort(keys, a ,b){
    var sortFunctions = keys.map(key => keySort.bind(null, key)),
        result = 0;
    
    sortFunctions.reverse();
    
    while(result === 0 && sortFunctions.length > 0){
        result = sortFunctions.pop()(a, b);
    }
    
    return result;
}

//Here we apply it to our people array:
var nameSort = complexKeyedSort.bind(null, ['lastName', 'firstName']);
people.sort(nameSort); // Output is identical. Try it!
</pre>

This is a good start, but we still have a problem. We are rebuilding our sort function array on every step of the sort. For small arrays, this is probably fine, but when our arrays get big, this is dangerous. We will start seeing a bottleneck and it will be difficult to identify. Let's use the factory pattern to retool our function and get some really great code.

<pre class="language:javascript">
function reducedComplexKeyedSort(sortArray, a, b){
    var result = 0,
        index = 0,
        
        // Only read the length once for a micro-enhancement
        sortArrayLength = sortArray.length;
    
    // Updated while loop to be array-non-destructive
    while(result === 0 && index < sortArrayLength){
        result = sortArray[index](a, b);
    }
    
    return result
}

function complexKeyedSortFactory(keys){
    // Performs sort algorithm array construction only once
    var sortFunctions = keys.map(key => keySort.bind(null, key));
    
    // Returns bound, ready to use sort algorithm
    return reducedComplexKeyedSort.bind(null, sortFunctions);
}

// Putting our new sort factory to use:
var nameSort = complexKeyedSortFactory(['lastName', 'firstName']);
people.sort(nameSort);

// This will fall back, ever deeper into the object to give us
// a rich, deep sort with only two lines of code.
var complexObjectSort = complexKeyedSortFactory(['foo', 'bar', 'baz', 'quux']);
complexObject.sort(complexObjectSort);
</pre>

With all of this complexity, we are actually missing one last piece of the puzzle, a reverse sort. Even with our most complex sort managed by our reducedComplexKeyedSort, we might still want to reverse the entire sort. We agreed at the beginning that calling .reverse() on a sorted array is kind of a gross, hacky way to do things. Fortunately, reversing the order is really, really easy. All that has to be done is multiply the sort outcome by -1.  Here's some evidence:

<pre class="language:javascript">
// Here's a forward number sort
sortNumbers(a, b) === a - b;

// If we multiply by -1 we get this:
-1 * sortNumbers(a, b)
    === -1 * (a - b)
    === -1 * (a + (-b))
    === (-1 * a) + (-1 * (-b))
    === (-a) + (-(-b))
    === (-a) + b
    === b + (-a)
    === b - a
    === reverseNumbers(a, b)

// This means
-1 * sortNumbers(a, b) === reverseNumbers(a, b)
</pre>

I'm not going to walk through a formal proof, but the evidence is pretty compelling. This means we could actually write a function which will return a reverse sort function. Now we only have to know how to sort one direction and we can actually switch between directional sorts easily. Here's a sort reverse function:

<pre class="language:javascript">
function reverseSort(sortFunction){
    return function(a, b){
        return -1 * sortFunction(a, b);
    }
}
</pre>

Let's use our reverseSort to reverse the order of our most complex sort constructing our sort function from the ground up.

<pre class="language:javascript">
var complexObjectSort = complexKeyedSortFactory(['foo', 'bar', 'baz', 'quux']),
    reversedComplexObjectSort = reverseSort(complexObjectSort);

complexObject.sort(reversedComplexObjectSort);
</pre>

By abstracting out our object sorting behavior, we have taken an object we know nothing about and produced a sorting algorithm which will sort our objects in reverse by keys in a ordered, refined way. That's some pretty powerful stuff.

To sum up, sometimes we can get away with simply using the built-in sort, and we can even hack in a reverse to give us ascending and descending sort behavior, but the world of array sorting is large and full of twists and turns.

We've introduced a simple way to address sorting which requires more than just relying on the language supported comparison, which will likely carry you through most common sorting tasks. We have also introduced a higher-level abstraction for defining complex sorting. Finally we developed a higher-order function which allows us to easily reverse any sort function.

This kind of development provides a strong way to reduce the amount of code you write and enhance the functionality of your program while you do it. You can look back at the code you've written and refactor it to be more maintainable and simpler to build upon. Now go forth and do some great sorting!

<h3>Blog Notes</h3>

I created a final factory for handling complex sorting with ascending and descending order handled in a SQL style. This will allow for sorts like the following:

keyedSortFactory.build(['column1 asc', 'column2 desc', 'column3 desc']);

Please see the gist here:

<a href="https://gist.github.com/cmstead/9ea2da73f0675707a7e3" target="_blank">Keyed Sort Factory</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>915</wp:post_id>
		<wp:post_date><![CDATA[2015-09-21 08:00:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-21 16:00:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-sorting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413689;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:783;}i:1;a:1:{s:2:"id";i:854;}i:2;a:1:{s:2:"id";i:1187;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Speeding Up Your App with Request Caching</title>
		<link>http://www.chrisstead.net/archives/919/speeding-up-your-app-with-request-caching/</link>
		<pubDate>Wed, 23 Sep 2015 16:00:56 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=919</guid>
		<description></description>
		<content:encoded><![CDATA[Recently in my Mainstay Monday posts I've talked about creating linked lists and queues in Javascript. Each of those topics is so dense that just writing about the basics of creating and using them took full blog posts.  Really all of that was the lead up to today's post.

I've worked in a couple of different, large single page applications and in every one I have, ultimately, encountered a need to cache requested data and respond to multiple functions needing that data before the original request is complete. No promise framework or other specialized library ever fit the need because, really, the call should only ever be made once.

I've had team members solve this problem in a naive way and simply make the call over and over again. What happens, though, if the data you're requesting is large and takes a long time to retrieve? This means you have now introduced multiple seconds of latency into your app. I think we can all agree that waiting for 5-20 seconds for data to come back is about the worst thing you can do to a user. They get frustrated and confused. They think the app has stalled or their browser has crashed.

<strong>Problem #1:</strong> I need to store the data when I get it.

This is easy. If you just need to store the data and retrieve it upon request, you can create a hashmap with keys and values. Now, when a request comes in, first your data service will look in the hashmap and see if the data already exists. If not, you go fetch it, bring it back and then, upon return, you hand the data back into your app.

This is the most basic kind of cache and it will suffice for calls that are made infrequently. Initial data for your app to bootstrap can be handled this way. Typically a single request will be made and you can just go fetch it, then cache it. If the app wants to rebootstrap for some reason, the data is in memory and you can skip the wire call.

The more challenging issue is this: what if you have data that is requested often?

<strong>Problem #2:</strong> I need cached data to only be requested once, but the program asks for it everywhere.

This is where it gets really interesting. It's quite common for a program to need to refer back to permissions and user capabilities often. ACL tables can get quite large and it is preferable to only request these once.  The problem is, the program will need access, possibly multiple times, for even a single page. This means your application will request the same data multiple times before the service you're accessing can return.

I've seen a page make 100+ requests at the same time to get data from a service. It's not pretty.

Fortunately, queues provide the solution for this. We can queue all of the callbacks that our application generates and resolve them at once when we get the data back. This means we could, in theory, request the data on app bootstrap and never request it again. Worst case scenario is we request it just in time and the user has to wait once.

This is where the real meat of the problem is. We need to construct a queue backed request system with a cache layer to manage our data. This all sounds a bit scary but, once we break it down, it's all just bite-sized pieces we can easily manage. We have even already decided on the data cache structure.

Before we start down this road, I would like to point out, a friend of mine introduced me to a rule I use all the time. It makes testing easier and it makes coding easier.

<strong>Never create and use an object in the same place.</strong>

The easiest way to answer this rule, for our current problem is with the factory pattern. Our factories are going to be relatively uninteresting, but because it creates good seams to work with in our code, and it does a nice job of separating our concerns so we can reasonable, correct abstractions.

So, since we know our mechanism is going to be queue-backed, we need a linked list. I went ahead and created a linked list item factory as a gist. It creates generic linked list items, so you could really use it for anything. We're going to use it to construct our queue.  Here's our first factory, linked list items:

<script src="https://gist.github.com/cmstead/97de395eacc0c18c8395.js"></script>

Once we have our linked list item factory set to go, we are ready to construct our queue.  Once again, we are going to want to work with a factory. Our queue logic comes straight out of the queues post, it's just wrapped up in a factory so we can easily separate it and work with it alone. Here's our queue:

<script src="https://gist.github.com/cmstead/d779522f43c54374cd9e.js"></script>

Now is where we start breaking new ground. Our cache, and its factory, are going to handle a few things. Consider this a little like learning to juggle. We have to get things in the right order, and it's all interconnected, so you might want to read the code a couple times.  Let's have a look at the cache factory and then we can talk about it.

<script src="https://gist.github.com/cmstead/163632c67ba7d6bebeeb.js"></script>

The short and sweet version of this is, we receive a local request for data, if it is in the cache, we resolve the request and move on. If we don't have the data, we queue the callback with any other outstanding callbacks and wait for our service to return the data we need. In order to ensure we don't have overlapping concerns, we rely on a cache instance per unique data request.  Basically, this means if you make a request with { id: 1 }, it should always go through the { id: 1 } cache. This way if your application needs to come back later and request data using a different id, it can without colliding with the original data cache.

To expand this idea, let's take a look at the steps that happen.

First, we have a cache factory. The factory takes in a request function, which it assumes only needs a callback to be complete. With this function, it news up an instance of the cache object. By using a factory, we can guarantee instantiation correctly, every time. Here's what it would look like in code:

<pre class="language:javascript">
permissionDataService = {
    localCache: {},
    get: function(id, callback){
        if(!Boolean(localCache[id])){
            this.addCache(id);
        }

        localCache[id].request(callback);
    },

    addCache: function(id){
        var requestMethod = permissionService.get.bind(permissionService, id);
        localCache[key] = cacheFactory.build(requestMethod);
        
    }
};
</pre>

I'm assuming permissionService is already created and get is a method to perform a standard HTTP GET. Honestly, this could be anything, just as long as all of the correct parameters are bound.

It's important to note that no request has been made yet. All we have done is create a cache we can make requests against. Our app is still sitting there patiently awaiting instructions for what to do. This entire setup process takes microseconds to complete and you now have everything you need to manage bursts of traffic gracefully.

Once we have our cache ready to go, we can make a whole bunch of calls and it will only make a single call across the wire. This gives us a major performance boost, which allowing our app to carry on blissfully unaware that anything has changed. Here's what it looks like:

<pre class="language:javascript">

// Deep in a script somewhere
permissionDataService.get(123, checkCredentials);

// Somewhere else
permissionDataService.get(123, isAllowedToView);

// Some other widget wants to know, too
permissionDataService.get(123, setDisplayState);

</pre>

The first request, regardless of which it is, will cause our service to create the cache. Each subsequent call will just end up the queue. Once the request comes back from our remote service, all callbacks will be resolved in the order they were received. Even better, if something else is kicked off in the meanwhile, this will simply be added to the queue and all is set and ready to go.

Adding this kind of data management to an application adds some complexity, so it may not be worthwhile to manage all data requests this way, however, when a particular behavior starts making lots of requests across the wire, this is a great way to throttle the requests back and improve efficiency in your app. The best part, as long as you are working modularly, is that you will only need to introduce changes in one place.  This means the bulk of your application will remain precisely the way it is today while repairing a bottleneck that can slow your app down and frustrate users. So, get to profiling your apps and cache some data.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>919</wp:post_id>
		<wp:post_date><![CDATA[2015-09-23 08:00:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-23 16:00:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[speeding-up-your-app-with-request-caching]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures-foundation"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="user-experience"><![CDATA[User Experience]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551423144;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:933;}i:1;a:1:{s:2:"id";i:861;}i:2;a:1:{s:2:"id";i:901;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Extending Functions with Decoration through Composition</title>
		<link>http://www.chrisstead.net/archives/924/extending-functions-with-decoration-through-composition/</link>
		<pubDate>Wed, 30 Sep 2015 16:00:25 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=924</guid>
		<description></description>
		<content:encoded><![CDATA[In object oriented design, the decorator pattern is commonly used to extend and enhance classes so they perform some new or more refined functionality. In functional programming it is possible to decorate functions as well. The decoration must follow a few rules, but the result is a very powerful technique to enhance functions statically and at run time.

At the core of functional decoration is function composition. Composition is a straightforward practice that relies on pure functions which take a predictable input and output.  A trivial example is something like the following:

<pre class="language:javascript">
function add (a, b) {
    return a + b;
}

function square (x){
    return x * x;
}

// Composing the two functions:
var squaredSum = square(add(1, 2)); // 9
</pre>

This is so foundational to what we know of math and computing there is actually a special notation in mathematics to compose functions this way. It's common to see this kind of thing annotated as <em>f &compfn; g</em>.

I was trying to think of a toy problem that could be used to demonstrate the kind of power we can get from function composition, but then it dawned on me.  A great example of real powerful decoration through composition can be demonstrated through a very common problem in statistics: Computing x-bar for a set of data points.

We actually already have almost everything we need to do it.  Let's create a divide function to round out the basic functions we will need to compute x-bar.

<pre class="language:javascript">
function divide (a, b) {
    return a / b;
}
</pre>

That's it. Let's do some statistics.

The first thing we are going to need to compute x-bar is a simple mean.  This is typically referred to as an average in daily life.  We're all pretty familiar with taking a basic average: take the sum of all values and divide by the number of values.  Let's build the simpleMean function.

<pre class="language:javascript">
// We need to sum all values, so let's start there.
function sum (valueList){
    return valueList.reduce(add, 0);
}

// Now we have everything we need to create simpleMean
function simpleMean (valueList){
    return divide(sum(valueList), valueList.length);
}
</pre>

SimpleMean is our first big example of function decoration through composition. As it turns out the line gets rather fuzzy when dealing with composition and decoration.  The important distinction to make is when a function is decorated, the new function will honor the original function contract.  What we can see here is sum takes a list and returns an integer.  SimpleMean also takes a list and returns an integer.  Most importantly, simpleMean wraps up the behavior of sum with another function to extend the behavior of sum without modifying or duplicating it.

Let's dig a little deeper into our statistical function and create a new function that normalizes the values in our list using the simpleMean function and map.  It's really important to note that normalize values is a composite function but it is not a decorated function.  Although we are using simpleMean to create our new function, the resulting contract does not adhere to the original simpleMean contract.

<pre class="language:javascript">
function normalizeValues (valueList) {
    var mean = simpleMean(valueList);
    return valueList.map(add.bind(null, -mean));
}
</pre>

By creating this new function, we are now ready to start piecing together our final function which will provide x-bar.  X-bar is the sum of the squares of normalized values. We have our normalized values, so let's get to squaring and summing!

<pre class="language:javascript">
// Please note we're decorating our sum function with
// a squaring function.
function sumSquares (valueList){
    return sum(valueList.map(square));
}

function computeXBar (valueList){
    return sumSquares(normalizeValues(valueList));
}
</pre>

The power we are ultimately seeing here is something that comes out of strong composition and an adherence to the contracts of our functions to produce richer and richer behaviors with only one or two lines at a time.  The important thing to note while looking at these functions is the extremely limited use of variables. By building functions through composing and decorating functions, state is eliminated and the spaces where bugs and incorrect logic is reduced to the smallest footprint.

As you work on new systems of behaviors, think about what your goal is and break it down into small, easy to understand steps which can be composed to create a powerful, easy-to-understand function which avoids state and provides fast, crisp, high-quality behavior.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>924</wp:post_id>
		<wp:post_date><![CDATA[2015-09-30 08:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-30 16:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[extending-functions-with-decoration-through-composition]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="solid"><![CDATA[SOLID]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551411028;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1026;}i:1;a:1:{s:2:"id";i:683;}i:2;a:1:{s:2:"id";i:795;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mainstay Monday: Hiatus</title>
		<link>http://www.chrisstead.net/archives/927/mainstay-monday-hiatus/</link>
		<pubDate>Mon, 28 Sep 2015 16:00:13 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=927</guid>
		<description></description>
		<content:encoded><![CDATA[I have spent the last several months writing two blog posts per week. I have really enjoyed writing both the Mainstay Monday and the regular Wednesday posts, but time is a limited resource.  I have started a new writing project which will consume a considerable amount of time, so I had to make a choice: I could either continue writing two blog posts a week, or I could pursue my new project.

By cutting back to a single post per week, I free up enough time to pursue my new project while maintaining my blog regularly with high-quality content. Though this means I will publish less frequently, it will serve not only me, but the Javascript community at large in the long-run.

There is no current estimate when Mainstay Monday will resume, but it is not gone forever. I am working on sorting out how I will present foundation material, and whether it makes sense to ever resume the two-post pace. Only time will tell, but in the meanwhile, we'll meet on Wednesday, just like always!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>927</wp:post_id>
		<wp:post_date><![CDATA[2015-09-28 08:00:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-28 16:00:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mainstay-monday-hiatus]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mainstay-monday"><![CDATA[Mainstay Monday]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551413687;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:611;}i:1;a:1:{s:2:"id";i:735;}i:2;a:1:{s:2:"id";i:919;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Callback Streams With Function Decoration</title>
		<link>http://www.chrisstead.net/archives/933/callback-streams-with-function-decoration/</link>
		<pubDate>Wed, 07 Oct 2015 16:00:02 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=933</guid>
		<description></description>
		<content:encoded><![CDATA[Regardless of whether you prefer raw callbacks or promises, there comes a time where asynchronous behavior pops up in your application. It's an artifact of working on the web and working with Javascript. This means that, although a function was originally written to solve a particular problem, eventually that function may need to be extended.  If we follow the <a href="http://www.chrisstead.com/archives/813/mainstay-monday-solid-openclosed-principle/" target="_blank">open/closed principle</a>, we should not modify the original function since it almost certainly still solves the original problem for which it was designed. What to do...

Function <a href="http://www.chrisstead.com/archives/924/extending-functions-with-decoration-through-composition/" target="_blank">decoration through composition</a> gives us a powerful way to enhance existing function behavior without modifying the original function.  This provides guarantees that our program remains more stable for more use cases and only introduces changes in a surgical, requirements-driven way.

Let's start off with a core request service.  It's important to note that this is written with certain assumptions being made, i.e. we have specific modules which are already defined and that we only care about the service because it is the foundation for our request construction.  This service only does a single thing: it makes a get call to a predefined endpoint with a provided ID.  It's uninteresting, but it helps to illuminate how we are going to construct our function stack.

<pre class="language:javascript">
// This is created as an object so we can pass in mocks and fakes
// for testing and abstraction purposes.
function MyDataService(httpService, urlConstantsFactory){
    this.httpService = httpService;
    this.urlConstantsFactory = urlConstantsFactory;
}

MyDataService.prototype = {
    get: function(id, callback){
        var request = {
                url: this.urlConstantsFactory.get('myDataUrl'),
                data: {
                    id: id
                }
            };
        
        this.httpService.get(request, callback);
    }
};
</pre>

This is the last piece of object oriented code we are going to look at in this post.  We are going to assume from here forward that this service has been instantiated with the correct <a href="http://www.chrisstead.com/archives/776/dependency-injection-without-a-framework-or-pain/" target="_blank">dependencies injected</a>.  Now, let's create a basic function that uses an instance of our service to make a request. This would look like the following.

<pre class="language:javascript">
function getSomeData(id, callback){
    myDataServiceInstance.get(id, callback);
}
</pre>

So far I know nothing about what the callback does, but that's okay. This is a simple wrapper to handle our request in some business-layer service.  The view-model or controller code will be able to blindly call this service with a request matching the <a href="http://www.chrisstead.com/archives/790/contracts-for-better-code/" target="_blank">contract</a>.

Technically we have already exposed everything that needs to be known about callback streams, but it's a little early to end the post, since there isn't much to be gained here, yet. If all we did was wrap up our request in another function, the goodness isn't going to be readily obvious to someone who is coming fresh to this concept.  Let's take a look at what a callback stream looks like as an image before we start really digging in.

<img src="./wp-content/uploads/images/callback-decoration.png" alt="Callback Decoration Diagram" />

The important thing to take away from our diagram is no one layer needs to know anything more than what is passed from the layer above.  It is unimportant to understand what the layer above does or why.  It is, however, very important to know how to respond to the callback that is passed in.  This is why contracts become so important in decoration.  If, at any point, we break a contract, our stream will break and our application will fail.  Fortunately, this adheres to the same requirements as calling any other function, so we are not introducing any greater rule strictness than we had before.

So, back to our business-layer abstraction. Suppose something changed at the data layer and a property name in the JSON that is returned was changed.  Although we would like to hope this would never happen, we live in the real world and things are never perfect.  Fortunately our abstraction layer allows us to handle this gracefully, rather than having our entire application break because of a database or service change.

Here's a transformation function.

<pre class="language:javascript">
function myDataTransformation (data){
    var transformedData = utilityLibrary.copy(data);

    transformedData['expectedName'] = transformedData['newName'];

    return transformedData;
}
</pre>

You've probably already noticed our transformation function isn't tied in with our callback at all.  That's actually a good thing.  This function is simple. but if there were complex logic, it would be important to isolate it, and <a href="http://www.chrisstead.com/archives/655/not-another-js-testing-how-to/" target="_blank">unit test it</a> appropriately. This function does exactly one thing and the declaration is clear.  Since callback streams already introduce an abstraction layer, anything we can do at each layer to make the code clear and clean will make debugging easier.

Now, let's take a look at an approach to handle transformation decoration.  We will start off with a simple pattern and expand from there.  If <a href="http://www.goodreads.com/book/show/85041.Refactoring_to_Patterns" target="_blank">Josh Kerievsky taught us anything</a> it's that we should identify patterns as they appear in the code and refactor to them instead of doing extra, unnecessary work.  Let's write some code.

<pre class="language:javascript">
function transformationDecoration (callback, error, data){
    var transformedData = !error ? myDataTransformation(data) : data;
    callback(error, data);
}

function getSomeData (id, callback){
    // Oh noes! Our data changed at the service layer. : (
    var finalCallback = transformationDecoration.bind(callback);

    // We still make the same call, in the end.
    myDataServiceInstance.get(id, finalCallback);
}
</pre>

By making changes this way, we silently introduce changes to fix our application without having to go and touch every place where this call is made. All of a sudden data changes become a much smaller liability to mitigate.  We have broken a hard dependency that would be scattered throughout our code by adding an abstraction between our view layer and our data access layer.  This is one of the biggest wins the common n-tier architecture provides to us.  Let's take a look at what happens when we have a bunch of changes that happen over time.

<pre class="language:javascript">
function transformationDecoration (callback, error, data){
    var transformedData = !error ? myDataTransformation(data) : data;
    callback(error, data);
}

function anotherTransformationDecoration (callback, error, data){
    var transformedData = !error ? anotherTransform(data) : data;
    callback(error, data);
}

function yetAnotherTransformationDecoration (callback, error, data){
    var transformedData = !error ? yetAnotherTransform(data) : data;
    callback(error, data);
}

function andYetAnotherTransformationDecoration (callback, error, data){
    var transformedData = !error ? andYetAnotherTransform(data) : data;
    callback(error, data);
}

function getSomeData (id, callback){
    // Oh noes! Our data changed at the service layer. : (
    var finalCallback = transformationDecoration.bind(callback);

    finalCallback = anotherTransformationDecoration.bind(finalCallback);
    finalCallback = yetAnotherTransformationDecoration.bind(finalCallback);
    finalCallback = andYetAnotherTransformationDecoration.bind(finalCallback);

    // We still make the same call, in the end.
    myDataServiceInstance.get(id, finalCallback);
}
</pre>

The amount of cut and paste I had to do to create all those functions made me die a little inside.  This is really <a href="https://en.wikipedia.org/wiki/Code_smell" target="_blank">smelly code</a>.  This is where we can start recognizing patterns and cut out a bunch of duplication.  What we really care about is the set of data transformations that need to be managed in our call.  The rest of this has become boilerplate.  Unnecessary boilerplate in Javascript is bad. Don't do it.  Let's make a change and fix all this.  I like to do this one step at a time. Sometimes things appear as you refactor that might not have been immediately obvious.

<pre class="language:javascript">
function transformDecorator (callback, transform) {
    return function (error, data){
        var finalData = !error ? transform(data) : data;
        callback(error, data);
    }
}

function getSomeData (id, callback){
    // Oh noes! Our data changed at the service layer. : (
    var finalCallback = transformDecorator(callback, myDataTransformation);

    finalCallback = transformDecorator(finalCallback, anotherTransform);
    finalCallback = transformDecorator(finalCallback, yetAnotherTransform);
    finalCallback = transformDecorator(finalCallback, andYetAnotherTransform);

    // We still make the same call, in the end.
    myDataServiceInstance.get(id, finalCallback);
}
</pre>

That's a lot better already.  Now we don't have to struggle with a bunch of function duplication and copy/paste hoopla. All we care about is the set of transformations we are going to use on the data. We can practically read off the transformation functions we are using in order.  This is actually more descriptive of what we intended to begin with anyway!

Let's actually do one more refactoring on our code.  By eliminating one duplication problem, we introduced another, although less-painful, duplication.

<pre class="language:javascript">
function transformDecorator (callback, transform) {
    return function (error, data){
        var finalData = !error ? transform(data) : data;
        callback(error, data);
    }
}

function getSomeData (id, callback){
    // Oh noes! Our data changed at the service layer. : (
    let transforms = [myDataTransformation,
                      anotherTransform,
                      yetAnotherTransform,
                      andYetAnotherTransform];

    let finalCallback = transforms.reduce(transformDecorator, callback);

    // We still make the same call, in the end.
    myDataServiceInstance.get(id, finalCallback);
}
</pre>

Now we're cooking with gas! Our getSomeData function can be extended with almost no effort whatsoever now. We can simply create a new transform and then decorate the callback as many times as we need to.  This decoration process relies on our original idea: callback streams.  Since each layer only cares about adhering to a single contract, and we can wrap the callback as many times as we want, multiple decorations, all behaving asynchronously, can be created as a stream of decorated callbacks without worrying about a failure somewhere in the middle of it all.

The more important item to note is, this could be a single step in a long line of behaviors within a stream.  We are adhering to the callback contract in our getSomeData function, so we could, just as easily, use this as an intermediate step between the requesting function and the final request. We really only care about the behavior that happens at the edges of our function, so it really doesn't matter where this code lives!

This discussion fits in the middle of a couple of different common issues.  First, this kind of decoration and function streams behavior directly combats the "pyramids of doom" callback issue many people encounter.  The other issue this deals with is exposed promise objects that worm their way through many modern Javascript projects which force us to tightly couple our data access layer to our view code.  The abstractions are lost unless a new promise is created and resolved at every level throughout the stack.  By thinking about the goal of your code, you take back the power of tiered applications and provide smart, well-isolated functionality which can be enhanced while keeping the rest of your codebase blissfully unaware of the ever-changing data that lives just beyond the edges of your application.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>933</wp:post_id>
		<wp:post_date><![CDATA[2015-10-07 08:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-07 16:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[callback-streams-with-function-decoration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551421577;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:939;}i:1;a:1:{s:2:"id";i:901;}i:2;a:1:{s:2:"id";i:1119;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leveling Up With Reduce</title>
		<link>http://www.chrisstead.net/archives/939/leveling-up-with-reduce/</link>
		<pubDate>Wed, 14 Oct 2015 16:00:15 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=939</guid>
		<description></description>
		<content:encoded><![CDATA[It was pointed out to me the other day that I suffer from the curse of knowledge. What this basically means is, I know something so I don't understand what it means to NOT know that thing. This can happen in any aspect of life and it's common for people, especially software developers, to experience this. Many of us have been working with computers in some way or another for most or all of our lives. This means, when we talk to people who haven't shared our experiences, we don't understand their position, i.e. we talk and they don't have any clue what we are saying.

Within various programming communities this can also happen when more experienced developers talk to developers who are still learning and growing. The experienced developer says something they think is imparting great wisdom and knowledge on the person they are talking with, meanwhile the inexperienced developer is baffled and lost.

Functional programming has become one of these dividing lines in the community. There are people who have dug in deep and have an understanding of the paradigm which they then have trouble conveying to people who haven't had the same experiences. Ultimately the message falls on deaf ears.

One of the least understood, but, possibly, easiest to comprehend concepts is reduce. We perform reductions every day. We reduce lists of values to sums. We reduce records down to a single selected record based on user preferences or our need. Programming and reduction really go hand in hand.

To come to grips with the kinds of behavior we're talking about, let's have a look at some common patterns programmers use in their day to day development.  The following block of code contains functions for taking the sum of an array, finding a maximum number and filtering an array of integers. If you have written loops, conditionals and functions before, these will probably be completely unsurprising.

<pre class="language:javascript">
function sumImperative (values) {
	var result = 0;
	
	for (let i = 0; i < values.length; i++) {
		result += values[i];
	}
	
	return result;
}

function findMaxImperative (values) {
	var max = -Number.MAX_VALUE;
	
	for(let i = 0; i < values.length; i++) {
		if(values[i] > max) {
			max = values[i];
		}
	}
	
	return max;
}

function filterEvensImperative (values) {
	var result = [];
	
	for (let i = 0; i < values.length; i++) {
		if (values[i] % 2 === 0) {
			result.push(values[i]);
		}
	}
	
	return result;
}
</pre>

These functions are written in an imperative style, and express every minute detail of the reduction process. We start with some sort of accumulator, whether it's an array or a number, our variable is meant to capture outcome as we move through our iteration. We iterate over the array, performing some action at each step, then returning the result at the end.

These functions aren't beautiful, but they are effective and predictable. For many readers, this pattern feels warm and cozy like a winter blanket. The problem we run into is, this methodology is really verbose and bloats the code. It also introduces a lot of noise. Do we really care about the inner workings of the iteration process or do we merely care about the output of our functions?

Let's take a couple examples from our initial three functions, and rewrite them. It has been said that any recursive algorithm, may be rewritten as an iterative loop. I have no evidence to support the inverse, but I can say, with certainty, that we can rewrite all of these as recursive functions.

Just to catch everyone up, recursion is when a function calls itself internally to perform an iterative operation. We <a href="http://www.chrisstead.com/archives/783/mainstay-monday-solving-problems-with-recursion/" target="_blank">discussed recursion</a> relatively recently in a different post. Essentially what we are going to do is put more focus on what happens in each step of the iteration, and make the iteration process less prominent in our code.  Let's take a look at a recursive strategy for sum and max behaviors.

<pre class="language:javascript">
function sumRecursive (values, accumulator) {
	accumulator += values.pop();
	return values.length === 0 ? accumulator : sumRecursive(values, accumulator);
}

sumRecursive([1, 2, 3, 4, 5].slice(0), 0); // 15

function findMaxRecursive (values, max) {
	var value = values.pop();
	max = max > value ? max : value;
	return values.length === 0 ? max : findMaxRecursive(values, max);
}

findMaxRecursive([2, -5, 12, 3, 89, 7, 6].slice(0), -Number.MAX_VALUE); // 89
</pre>

An interesting point to note is, these functions are actually destructive in nature. We could have written them in a way that is not destructive, however it would have added complexity we don't need to dig through at the moment.  Instead, we can slice the array we are sending in to ensure the original array is not modified by the pop behavior.

Each of these recursive algorithms do something very similar. They highlight a single step in the process, allowing the programmer to focus on the immediate problem of reducing no more than two values at a time. This allows us to actually identify the real behavior we are interested in.

Recursion, of course, leaves us in a position where we have to identify a stopping condition, which was more obvious in the original, imperative, code. Nonetheless, if we choose to halt the process on the occurrence of an empty array, we can just replicate the behavior without needing to put too much extra thought in.

When we review these recursive functions, it becomes apparent the main difference is the accumulation versus comparison behavior. Without too much work, we can strip out this unique behavior and create a generic recursion function which accepts a behavior parameter as part of its argument list. Although this makes our recursion function fairly abstract, and possibly a little harder to read, it reduces the load when we start thinking about what we want to do. The recursion function can disappear as a <a href="https://en.wikipedia.org/wiki/Referential_transparency_(computer_science)" target="_blank">referentially transparent</a> <a href="https://en.wikipedia.org/wiki/Black_box" target="_blank">black box function</a>.

This level of abstraction allows the implementation details of our recursion to be safely separated from the details of our immediate functional need. Functions of this type, which take functions as arguments, are called <a href="https://en.wikipedia.org/wiki/Higher-order_function" target="_blank"><em>higher-order functions</em></a>. Higher order functions are commonly highly-abstract and can lead down a rabbit hole known as <a href="https://en.wikipedia.org/wiki/Generic_programming" target="_blank">generic programming</a>.  Let's not go there today, instead let's cut to the chase and see our abstraction!

<pre class="language:javascript">
function add (a, b) {
	return a + b;
}

function max (a, b) {
	return a > b ? a : b;
}

function genericRecursor (behavior, values, accumulator) {
	accumulator = behavior(accumulator, values.pop());
	return values.length === 0 ? accumulator : genericRecursor(behavior, values, accumulator);
}

genericRecursor(add, [1, 2, 3, 4, 5].slice(0), 0); // 15
genericRecursor(max, [2, -5, 12, 3, 89, 7, 6].slice(0), -Number.MAX_VALUE); // 89
</pre>

This generic recursion is actually the final step toward our goal, the reduce function. Technically, our generic recursor, given the way it behaves will perform a right-reduction, but that is more than we need to bite off at the moment. We could easily rename genericRecursor to rightReduce and we would truly have a reduction function. The problem we would encounter is, our function is backwards! If we really want to replicate the behavior from our original function we need to make a small modification.  Let's rewrite our genericRecursor as a first, and final hand-build reduce function.

<pre class="language:javascript">
function reduce (behavior, values, accumulator) {
	accumulator = behavior(accumulator, values.shift());
	return values.length === 0 ? accumulator : reduce(behavior, values, accumulator);
}

reduce(add, [1, 2, 3, 4, 5].slice(0), 0); // 15
reduce(max, [2, -5, 12, 3, 89, 7, 6].slice(0), -Number.MAX_VALUE); // 89
</pre>

The two key changes we made were renaming and changing from pop to shift. Shift is notoriously slower than pop, so this function is useful for illustration, but it lacks characteristics we would like to see in a production-ready reduce function.  Instead, let's jump from our hand-rolled reduce function to the Javascript native implementation.

Javascript's native implementation really is a black box function if you are working only from the Javascript side. Implemented in C++, reduce works only on arrays, and has a couple of shortcomings we won't address here. Nevertheless, the native reduce is key to leveling up your fluent Javascript skills, and is a valuable tool for reducing <a href="https://en.wikipedia.org/wiki/Cognitive_load" target="_blank">cognitive load</a> and <a href="https://en.wikipedia.org/wiki/Source_lines_of_code" target="_blank">SLOC</a> bloat.  Let's take a look at a couple of examples of using reduce.

<pre class="language:javascript">
// Accumulation

var integers = [1, 2, 3, 4, 5],
	records = [{ value: 2 },
			   { value: 4 },
			   { value: 6 },
			   { value: 8 },
			   { value: 10 }];

function add (a, b) {
	return a + b;
}

function addValues (a, b) {
	return add(a, b.value);
}

integers.reduce(add); // 15
integers.reduce(add, 0); // 15

records.reduce(addValues, 0); // 30

// Maxima/Minima

function max (a, b) {
	return a > b ? a : b;
}

function min (a, b) {
	return a < b ? a : b;
}

var values = [2, -5, 12, 3, 89, 7, 6];

values.reduce(max, -Number.MAX_VALUE); // 89
values.reduce(min, Number.MAX_VALUE); // -5
</pre>

If we return to our original filtering function, we can easily replicate the behavior using reduce. We will also introduce a mapping function. Reduce is so incredibly flexible we can actually accomplish many of the iterative tasks we do every day. The primary pitfall of using reduce for all of the iterative tasks is we will begin to introduce bloat again as we replicate more generic behavior.  We won't dig into the details today. Instead, let's take a look at some of the power we get from reduce as a tool. It's kind of the electric drill of the programming world: many uses, all of which save time and energy better spent elsewhere.

<pre class="language:javascript">
function filterEvens (accumulator, value) {
	if(value % 2 === 0) {
		accumulator.push(value);
	}
	
	return accumulator;
}

function multiplyBy10 (accumulator, value) {
	accumulator.push(value * 10);
	return accumulator;
}

function shallowCopy (original, accumulator, key) {
	accumulator[key] = original[key];
	return accumulator;
}

var originalObject = { 'foo': 'bar', 'baz': 'quux' };

[1, 2, 3, 4, 5].reduce(filterEvens, []); // [2, 4]

[1, 2, 3, 4, 5].reduce(multiplyBy10, []); // [10, 20, 30, 40, 50]

Object.keys(originalObject).reduce(shallowCopy.bind(null, originalObject), {});
// { 'foo': 'bar', 'baz': 'quux' } !== originalObject
</pre>

This discussion is merely the tip of the iceberg, but it exposes the kind of work which can be done with reduce and the energy we can save by using it more often. For as frequently as complex data types like arrays and objects appear in our code, it only makes sense to work smarter and faster. With the power that comes from first class functions and higher-order functions, we can accomplish large amounts of work with small, but highly declarative behaviors.

As you look at your code, try to spot places where behaviors are repeated and the real focus should be on the data you are working with. Perhaps reduce is an appropriate solution. You might even be able to use it in an interview. I leave you with FizzBuzz performed using reduce.

<pre class="language:javascript">
function fizzBuzzify (value) {
	var result = value % 3 === 0 ? 'Fizz' : '';
	
	result += value % 5 === 0 ? 'Buzz' : '';
	
	return result === '' ? value : result;
}

function fizzBuzz (output, value) {
	output.push(fizzBuzzify(value));
	return output;
}

var integers = [1, 2, 3, /* ... */, 100];

integers.reduce(fizzBuzz, []);
// [1, 2, 'Fizz', 4, 'Buzz', /* ... */, 14, 'FizzBuzz', /* ... */, 'Fizz', 100]
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>939</wp:post_id>
		<wp:post_date><![CDATA[2015-10-14 08:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-14 16:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[leveling-up-with-reduce]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551421566;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:683;}i:1;a:1:{s:2:"id";i:1109;}i:2;a:1:{s:2:"id";i:896;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
			<wp:meta_value><![CDATA[Leveling Up With Reduce - moving from imperative to FP #javascript #fp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data, Types, Objects and Creating A New Generic Type</title>
		<link>http://www.chrisstead.net/archives/949/data-types-objects-and-creating-a-new-generic-type/</link>
		<pubDate>Wed, 21 Oct 2015 19:43:57 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=949</guid>
		<description></description>
		<content:encoded><![CDATA[Javascript comes with a variety of types, and with ES 2015 and beyond, we are seeing new types emerge like sets and symbols.  The primitive data types come with a standard set of comparison rules and default behaviors which make them especially nice to work with, however, complex data like arrays and objects are not so friendly. Objects have no means for comparison (unsurprising) and arrays have no simple, idiomatic way to distinguish them from objects. Even null, which is referred to as a primitive data type, can lie to us.  See the example below.

<pre class="language:javascript">
typeof {}; // object
typeof null; // object
typeof []; // object

// Null check
foo === null;

// Array check
Object.prototype.toString.call(foo); // old way
foo.isArray(); // new way, throws an error on objects, not available in node
</pre>

It gets worse if we want to compare any of these. If we compare two distinct arrays which contain the same data in the same order, we will get false every single time. Comparisons only happen on pointer references in Javascript and it makes checking equality really tough.  There really isn't much you can do about all of this except monkey patching data prototypes, which I always discourage for a variety of reasons.

I know I write a lot of posts about functional programming and, typically, it is the way to enlightenment and a land of wonder and elegance. Even with functional programming paradigms, sometimes what you need is not a function, but a data type... An object. The data type Javascript doesn't have, but is older than (programming) time itself is a struct.

Structs are complex data types of a generic sort, which are used to store data in a predictable way. C and C++ have them, Ruby has them and even Go has them. Javascript has object literals which are similar, however, they lack something that is built into other languages.  Let's look at structs in a couple different languages, Ruby and C.

<pre class="language:c">
// Point struct in C
struct point {
    int x;
    int y;
}

point p = { .x = 0, .y = 5 };
printf("x is %d, y is %d", p.x, p.y); // x is 0, y is 5
</pre>

<pre class="language:ruby">
# Point struct in Ruby

Point = Struct.new(:x, :y)
myPoint = Point.new(0, 5)

puts "x is #{myPoint[:x]}, y is #{myPoint[:y]}" # x is 0, y is 5
</pre>

As I looked at these rather convenient data structures I wonder why we can't have nice things in Javascript. This is especially apparent when we look at things like someStruct.merge() in Ruby, since we typically need a third party function to accomplish this for objects or arrays. What if we just had a really cool new data type?

This kind of construction is where object oriented programming really shines. Instead of lusting after something other languages have, but Javascript is missing, let's just create our own data type! First thing we are going to want is a foundation to put our data into. Let's create a constructor that sets up our struct with the stuff we need.

<pre class="language:javascript">
function Struct () {
    var keys = Array.prototype.slice.call(arguments, 0);

    this.dataStore = keys.reduce(this.addProperty.bind(this), {});
}

Struct.prototype = {
    addProperty: function (dataObj, key) {
        dataObj[key] = null;
    }
};
</pre>

This really isn's anything more than an object literal wrapped in a class, but it sets us up for a lot more. The first big problem we encounter with this is, we have a data object backing our struct object, but the way we access our data is kind of strange; myStruct.dataStore[key]. Let's do a little bit of data hiding and add accessors and mutators so we can define an interface for our struct. By creating an API with a standard naming convention, we make our struct stable and predictable.

<pre class="language:javascript">
function Struct () {
    var keys = Array.prototype.slice.call(arguments, 0),
        dataStore = keys.reduce(this.addProperty.bind(this), {});
}

Struct.prototype = {
    accessorBase: function (dataStore, key) {
        return dataStore[key];
    },

    mutatorBase: function (dataStore, key, value) {
        dataStore[key] = value;
        return this;
    },

    addProperty: function (dataStore, key) {
        let accessorName = 'get.' + key,
            mutatorName = 'set.' + key;
        
        dataStore[key] = null;
        
        this[accessorName] = this.accessorBase.bind(this, dataStore, key);
        this[mutatorName] = this.mutatorBase.bind(this, dataStore, key);    
    }
};
</pre>

If this step feels pretty abstract, that's because it is. We have wandered into the world of metaprogramming and generic programming. We won't go into detail on those topics because they are whole realms of computer science unto themselves. Instead, let's discuss what we added and why.

AttachProperty adds a key initialized to null to our backing object literal, then it takes the pointer to the object literal and creates two object-bound methods: get.keyName and set.keyName. This gives us a clean, obvious API to interact with.  Even better than that, we now know exactly which keys are supported by our struct and if someone tries to interact with a property which isn't defined, they will get a useful error. This is a lot more stable than just allowing someone to come and modify the data directly. Let's take a look at creating a point with our new struct.

<pre class="language:javascript">
var point = new Struct('x', 'y');
point.set.x(0);
point.set.y(5);

point.set.foo('bar'); // undefined is not a function

console.log('x is ' + point.get.x() + ', y is ' + point.get.y()); // x is 0, y is 5
</pre>

Hey! Our struct is starting to come together. We can create a new structure on the fly, it sets up our object with the right keys, adds appropriate functions and behaves something akin to a data-oriented class. That's pretty spiffy.

We could, theoretically, stop right here and be correct in saying we have defined our own data type, but there are so many things we are still missing. That setter behavior is fine for something small like a point. It's actually pretty terse. However, what if we have a bunch of keys and we want to be able to modify them all at once? This is what merge is good for. Let's define new syntax to handle batch mutation for properties.

<pre class="language:javascript">
Struct.prototype = {
    /* Our prior functionality is here... */
    mergeKey: function (updateObj, key) {
        this['set.' + key](updateObj[key]);
    },
    
    merge: function (updateObj) {
        var keysToMerge = Object.keys(updateObj);
        keysToMerge.forEach(this.mergeKey.bind(this, updateObj));
        return this;
    }
};
</pre>

MergeKey is little more than an alias for our mutator functions, but it gives us everything we need to keep merge nice and tidy. It also gives us a way to pluck values from an object at run-time and update just a single property in our struct. Merge on the other hand is built exclusively for power. We can hand in an object and merge will lift all of the properties and batch update our struct. This added syntax provides a short, powerful way to handle our struct data at initialization time, and on the fly for big updates.

<pre class="language:javascript">
var point = (new Struct('x', 'y')).merge({ x: 0, y: 5 });
console.log('x is ' + point.get.x() + ', y is ' + point.get.y()); // x is 0, y is 5
</pre>

Now that we've gotten this far, we have a fully functioning struct with a couple of conveniences. Rather than stepping through each new function we add, let's just take a look at a final struct class. Our final struct will have comparison extension and type checking through duck-typing. This post, quite possibly, could be broken into a whole set of posts discussing each of the minute topics within our struct, but I think it might be better to just see the final product and visit some of the deeper ideas at another time.

<pre class="language:javascript">
function Struct () {
    var keys = Array.prototype.slice.call(arguments, 0),
        dataStore = {};
    
    this.get = {};
    this.set = {};
    
    keys.forEach(this.addProperty.bind(this, dataStore));
    
    // Bind data store to prototype functions
    this.addProperty = this.addProperty.bind(this, dataStore);
    this.equal = this.equal.bind(this, dataStore);
    this.dataStoresEqual = this.dataStoresEqual.bind(this, dataStore);
    this.instanceOf = this.instanceOf.bind(this, dataStore);
}

Struct.prototype = {
    
    compareValue: function (localDataStore, foreignDataStore, result, key) {
        return result && localDataStore[key] === foreignDataStore[key];
    },
    
    dataStoresEqual: function (localDataStore, foreignDataStore) {
        var localKeys = Object.keys(localDataStore),
            foreignKeys = Object.keys(foreignDataStore),
            
            compare = this.compareValue.bind(null, localDataStore, foreignDataStore),
            equalKeyCount = localKeys.length === foreignKeys.length;
            
        return equalKeyCount && localKeys.reduce(compare, true);
    },
    
    equal: function (localDataStore, foreignStruct) {
        return foreignStruct.dataStoresEqual(localDataStore);
    },
    
    containsKey: function (foreignStruct, result, key) {
        return result && typeof foreignStruct.get[key] === 'function';
    },
    
	instanceOf: function (localDataStore, foreignStruct){
        return Object.keys(localDataStore).reduce(this.containsKey.bind(this, foreignStruct), true);
	},
	
    mergeKey: function (updateObj, key) {
        this.set[key](updateObj[key]);
    },
    
    merge: function (updateObj) {
        var keysToMerge = Object.keys(updateObj);
        keysToMerge.forEach(this.mergeKey.bind(this, updateObj));
        return this;
    },

    // Generic accessor
    accessorBase: function (dataStore, key) {
        return dataStore[key];
    },
    
    // Generic mutator
    mutatorBase: function (dataStore, key, value) {
        dataStore[key] = value;
        return this;
    },
    
    // Generic property creation method. This will be bound and used later
    // to extend structs and maintain a homogenic interface.
    addProperty: function (dataStore, key) {
        dataStore[key] = null;
        
        this.get[key] = this.accessorBase.bind(this, dataStore, key);
        this.set[key] = this.mutatorBase.bind(this, dataStore, key);
        
        return dataStore;
    }
};
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>949</wp:post_id>
		<wp:post_date><![CDATA[2015-10-21 11:43:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-21 19:43:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[data-types-objects-and-creating-a-new-generic-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407753;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:988;}i:1;a:1:{s:2:"id";i:861;}i:2;a:1:{s:2:"id";i:1030;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>592</wp:comment_id>
			<wp:comment_author><![CDATA[3 Rules to Improve Your App State Management]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/955/3-rules-to-improve-your-app-state-management/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-10-28 08:03:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-10-28 16:03:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] post about creating a new generic type introduced structs as an object concept. Structs are a good step in the right direction. Each [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1446053487.2128401;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446048233.3172691;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>3 Rules to Improve Your App State Management</title>
		<link>http://www.chrisstead.net/archives/955/3-rules-to-improve-your-app-state-management/</link>
		<pubDate>Wed, 28 Oct 2015 16:00:16 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=955</guid>
		<description></description>
		<content:encoded><![CDATA[As SPAs become more common for web application development, the concept of state is moving almost completely out of the realm of servers and services and into the browser, and rightly so. Ideally services should only maintain state as persistent storage like databases, document stores and file systems. Application state like where the user is and what they are interacting with should be maintained as close to the user as we can keep it.

Systems like Angular have built in state machines as well as third-party solutions, but these solutions are often not enough, on their own, to truly manage all the state your application needs. By relying on just a <a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank">finite-state machine</a> and persistent storage, your application takes on a chatty characteristic and leaves a lot of data living in limbo before it is actually ready for consumption by the services which persist the data from one application session to the next.

The goal of this post is to fill in some of those gaps and smooth out the application development process. Three main ideas are going to be presented: keep state where you can get it, make state mutation obvious, keep state out of meddling hands.  Each of these principles will guide our direction and create something that will serve us well as we work on integrating data transit into our systems both through the client-side application as well as moving data back and forth between our application and our data persistence system.

<strong>Keep State Where You Can Get It</strong>

The first main idea is, we actually do want our state to be accessible to our application. A common reaction I have seen from many developers I've worked with is to simply create a global variable and push data right into an object on the window scope. We will see later, this is a violation, not only of general best practice, but also of one of our three rules.

Nevertheless, we need some place where we can access our data, so let's create a very simple state cache factory, which will give us the most fundamental piece of the puzzle.  We will create an object, if one doesn't already exist, and hand it out to components which request it. This kind of design keeps state off the global scope, while still making it readily accessible when we need it.

** Note: Our state factory makes use of the either function from my <a href="http://www.chrisstead.com/archives/861/sanitary-data-maybe-either-and-deref/" target="_blank">sanitary data post</a>.

<pre class="language:javascript">
var stateFactory = (function () {
	
	var stateCache = {
		data: false
	};
	
	function build () {
		stateCache.data = either({}, stateCache.data, 'object');
		return stateCache.data;
	}
	
	return {
		build: build
	};
	
})();

var myStatePointer = stateFactory.build();
myState['foo'] = 'bar';

var secondStatePointer = stateFactory.build();
console.log(secondStatePointer.foo); // bar
</pre>

So far so good. We can easily reach our state, but it is kept out of the global scope. This makes our state a little more stable, but it also exposes a big problem. We are hand-editing an object. This means, each time we update state, we are actually modifying all state for everyone. What's worse, it's really, really difficult to identify where the state is getting modified. We can't search the document for any particular behavior because anyone could write their function to work in any way they like and potentially blow away all state for any part of the app. Yikes!

<strong>Make State Mutation Obvious</strong>

Simply handing around an object pointer is anything but obvious. We are all quite familiar with working with object literals, and most SPAs end up littered with them, so our state object will quickly become part of the crowd. Losing track of your state object is a dangerous game that will lead to some very difficult to identify bugs. Ideally your state should have a well-defined interface to interact with so it is easy to identify when state properties are added or existing properties are accessed and modified.

The post about <a href="http://www.chrisstead.com/archives/949/data-types-objects-and-creating-a-new-generic-type/" target="_blank">creating a new generic type</a> introduced structs as an object concept.  Structs are a good step in the right direction. Each property has its own accessor and mutator, so we get a lot of what we need for free. Let's update our state factory build method to return a struct and lock down our state interface.

<pre class="language:javascript">
(function () {
	
	/* ... State factory code here ... */
	
	function build () {
		stateCache.data = either(new Struct(), stateCache.data, 'object');
		return stateCache.data;
	}
	
	/* ... Remaining state factory code here ... */
	
})();

var statePointer = stateFactory.build();

statePointer.addProperty('foo');
statePointer.set.foo('bar');

var secondStatePointer = stateFactory.build();

console.log(statePointer.get.foo()); // bar
</pre>

The interface is a little more verbose than directly manipulating an object literal, but the clarity we get when interacting with the state outweighs the pain of an extra couple key strokes. We can now easily find every instance of state access by looking for get.keyName() and every instance of state modification by looking for set.keyName().

With an interface distinct to the struct, our state interactions become obvious. This kind of clarity makes programming much easier since our local data can be anything we like, while we keep our state data clean and obvious. There is still one issue: we still have a lot of access to do terrible things to the data stored in our state. The struct definition comes with a merge function so we could easily do the following:

<pre class="language:javascript">
var statePointer = stateFactory.build();

statePointer.merge({
    keyName1: someNewObject,
    keyName2: someOtherObject,
    keyName3: someLastObject
});
</pre>

Now all of the data for three keys has been blown away which could quickly send our app into a tailspin.  There is no way to be certain our objects will continue to line up with the state our app expects in other places. This kind of uncertainty makes for a scary programming experience which could bring even the most senior programmer to tears.

<strong>Keep State Out of Meddling Hands</strong>

There is a saying that goes a little like this, "if one person gets a cold everyone gets a cold." What this really means is, when everyone is working closely together, if someone introduces something bad into the system it becomes everyone's problem. There is no place this becomes more obvious than when dealing with state.

When dealing with state access, handing off a pointer becomes a liability. What we really need to do is wrap up our struct with a state-specific interface. Structs as created in the related post, are a mutable data type. This means anyone can go in and change them any way they want. What we really want to do is temper that mutability and define how our program actually interacts with our struct.

The best way to do this is to wrap our struct up in a state object, and expose methods which tightly control how our data flow works. This new construct uses the <a href="https://gist.github.com/cmstead/59675cb818593b197839" target="_blank">clone function from JFP v2.4.0</a> to allow copied data out through a getter, but stops data propagation back up the object tree. This forces programmers working with our state object to explicitly set the new state once they have modified the object copy.

<pre class="language:javascript">
function State (initialState) {
	var sanitizedInitialState = j.either({}, initialState, 'object'),
		stateStruct = new Struct(),
		stateKeys = Object.keys(sanitizedInitialState);
		
	Struct.prototype.constructor.apply(stateStruct, stateKeys);
	stateStruct.merge(sanitizedInitialState);
	
	this.get = {};
	this.set = {};

	this.addState = this.addState.bind(this, stateStruct);
	stateKeys.foreach(this.attachStructMethods.bind(this, stateStruct));
}

State.prototype = {
	
	accessorBase: function (struct, key) {
		return j.clone(struct.get[key]());
	},
	
	attachStructMethods: function (struct, key) {
		this.get[key] = this.accessorBase.bind(this, struct, key);
		this.set[key] = struct.set[key];
	},
	
	addState: function (struct, key, value) {
		struct.addProperty(key);
		struct.set[key](maybe(value));
		
		this.attachStructMethods(struct, key);
	}
	
};
</pre>

Our new state object also introduces the concept of an initial state.  This allows us to bootstrap our application into a particular state by making use of the struct merge behavior. We will want our stateFactory to account for this and only allow state bootstrapping once, throwing an error if someone tries to fully re-bootstrap the app in the middle of the user's experience.  Let's take a look at our final build behavior.

<pre class="language:javascript">
(function () {
	
	/* ... State factory code here ... */
	
	function build (initialState) {
		if(typeof initialState !== 'undefined' && stateCache.data instanceof State) {
			throw new Error('Cannot bootstrap existing state object.');
		}
		
		stateCache.data = either(new State(initialState), stateCache.data, 'object');
		return stateCache.data;
	}
	
	/* ... Remaining state factory code here ... */
	
})();
</pre>

This final iteration gives us the remaining stability we need to really handle state well. Now when we access state, we get a copy of the data, which may be all we need. If we need to actually update the data, we have exposed methods to merge new data back into the state system. Finally, we can make use of the merge functionality in our structs, which allows us to bootstrap our state with little effort, which takes the user to exactly the place they wanted to be when we pick up from a non-trivial state. Let's take a look at what our new interactions would look like.

<pre class="language:javascript">
var statePointer = stateFactory.build({ 'foo': ['bar'] }),
    fooState = statePointer.get.foo();

console.log(fooState[0]); // bar

var secondStatePointer = stateFactory.build(),
    secondFooState = statePointer.get.foo();

console.log(secondFooState[0]); // bar

fooState[0] = 'baz';
statePointer.set.foo(fooState);

console.log(fooState[0]); // baz
console.log(secondFooState[0]); // bar

secondFooState = secondStatePointer.get.foo();
console.log(secondFooState[0]); // baz

stateFactory.build({ 'foo': ['bar', 'baz', 'quux'] }); //Throws error
</pre>

By taking time to build out a stable state system, we shield our application from sudden, unexpected changes in our state. This means each of our modules can act on state data independently, and then feed the updates back into the system. Ideally, we would take care to merge state updates into our local data before we merge our changes back into the core state, but that's another post for a different day.

As you build your client-side applications, don't only think about state that your routing system provides, but also consider the true, robust state of your application. Create state data your application can access, make it obvious when that data changes and keep the original state data out of meddling hands. With just a little bit of preparation, your applications will be stable and fun to work on.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>955</wp:post_id>
		<wp:post_date><![CDATA[2015-10-28 08:00:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-28 16:00:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[3-rules-to-improve-your-app-state-management]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407664;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:304;}i:1;a:1:{s:2:"id";i:919;}i:2;a:1:{s:2:"id";i:466;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>REST Verbs and HTTP</title>
		<link>http://www.chrisstead.net/archives/964/rest-verbs-and-http/</link>
		<pubDate>Wed, 11 Nov 2015 16:00:10 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=964</guid>
		<description></description>
		<content:encoded><![CDATA[If your journey to programming was anything like mine, you started by looking at HTML forms to understand data transfer across HTTP. There is a lot of talk about REST and what it means on the web. I have heard people talk about the formatting of URLs and the return behavior of documents. I have even heard people discuss REST and its relation to micro-services or hypermedia API behaviors.

I am not going to get into the deep philosophical debate about what properties emerge from REST, nor will I discuss how to break services down or any other oddball topics which diverge from what someone interacting with REST should understand to begin with. Instead, let's discuss what the REST acronym means, what REST verbs are and how we would interact with them through XMLHttpRequest (XHR).

<strong>What REST Is</strong>

REST stands for Representational State Transfer. What this means is, REST provides a standardized way to take state (user interaction created data) and transmit it across the Internet. I say "the Internet" because there is no requirement that we interact only with the standard HTTP port, 80. We can, theoretically, make an HTTP request to any port listening for and accepting HTTP requests conforming to the REST protocol.

Blah blah blah, what this really means is using the HTTP standard, if a service accepts requests passed with GET, POST, PUT or DELETE calls, it is probably RESTful. The primary reason I say it is "probably" RESTful is each of those four verbs come with a set of standards which define how the service should behave when a request is made.

Before we go further, let's create an XHR script so we can look at how we can make browser-side requests to RESTful services. I am offering this script with no explanation, but you are welcome to use it as you see fit.  I am also not promising this script is particularly robust, reliable or works at all, so use it for anything other than learning at your own risk.

<script src="https://gist.github.com/cmstead/2f0769dae8c9d7e4165a.js"></script>

Now that we have that lined up, let's have a look at making HTTP requests. There are four common methods we can use for sending HTTP requests, GET, POST, PUT and DELETE. Although there are other request types we're going to stick the common ones for now.

When working with REST verbs, there are certain rules we must follow. Different server technologies may or may not allow violation of the core REST rules, but when working in a RESTful system, it is best to know the conventional uses and deviate only as much as necessary to match your company or team conventions.

Before we dive into REST requests, I would recommend reviewing my post on <a href="http://www.chrisstead.com/archives/970/urls-for-web-developers/" target="_blank">URLs for web developers</a>. This post assumes you are comfortable with the way URLs and their structure impact HTTP requests.

<strong>GET</strong>

GET requests are the most common and best known requests used on the web. GET requests are used all the time to view web sites, get static files and retrieve data from service endpoints. You used a GET request to view this page and all of the links on this page will initiate a new GET request to retrieve a different page.

GET requests can only use a request URL to capture data from a server. Effectively, a GET request will use all parts of the URL, though it is not allowed to use any other means to communicate information about the resource it requests. This means any body information sent to the server will likely be ignored.

Suppose we used our XHR script to make a request, let's have a look at what the request would look like.

<pre class="language=javascript">
xhr.get('https://www.google.com/webhp', function (error, result) {
    if(!Boolean(error)) {
        console.log(result);
    }
}, { data: { q: 'chris stead programmer' } });

// Outputs a whole bunch of HTML

// final url -- https://www.google.com/webhp?q=chris%20stead%20programmer
</pre>

We can see our request uses everything except the fragment, but it passes our data as a query string. This is the kind of behavior we should always expect with a GET request. HTML requests allow bodies to be included, however, if our data were to be included in the body, however, our GET URL would simply be https://www.google.com/webhp which would display the Google search page instead of the search results we wanted.

When a GET request is sent, the browser constructs an HTTP header which provides all of the information the server needs to resolve the request correctly.  Here's what a GET header looks like.

<pre class="language=default">
GET /webhp?q=chris%20stead%20programmer\n
host: www.google.com\n
\n
</pre>

The new line character (\n) in these header examples is added to demonstrate the number of new lines that are actually part of the HTTP header. We can see the very first element in our request is the type of request, specifically GET. This is the key player in our REST methodologies.

The short version of this is, GET returns a document or resource. It always does. If something fails along the way, our browser will tell us with a different document.  Ultimately, GET always gets something, it should never write, update or delete.

<strong>DELETE</strong>

DELETE is the close cousin to the standard GET request. DELETE requests, much like GET requests, do not contain a body. In the standard REST behavior, any body in a GET or DELETE request should be ignored.  As it turns out, it is entirely likely you could make a DELETE request against your favorite website and the server would respond with the HTML content you get with a GET request.

What makes DELETE special is the way the server responds to the request. If a DELETE request is made against a service which accepts DELETE, it is likely you will receive an error.  This is due to the fact that DELETE is typically a privileged (authorization-restricted) command.

Let's construct a valid DELETE request with our XHR service with a header.  For the sake of this discussion, I am assuming the service we are calling is completely insecure and accepts credentials as clear text in the header.

<pre class="language:javascript">
xhr.delete('http://www.insecure-service.com/", function (error, result) {
    if(!error) {
        console.log('Our record was deleted!');
    } else {
        console.log('Something bad happened.');
    }
}, {
    data: { id: 17 },
    headers: { credentials: 'chris@insecure-service.com;badpassword' }
});
</pre>

This will send a request with extra header information.  I am not promising anything about the way credentials should be sent.  Every service will work differently.  That said, this new request is still informative. We can see credentials being provided and an id is given to tell our service what to delete.

Our callback also makes an assumption which can be considered common. DELETE requests often do not provide any data in their response body.  The response code may actually be <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5" target="_blank">204 No Content</a>. This tells us the request was successful, but there is no content to return, so the response body is empty.  Let's take a look at the request and response headers.

DELETE Request:

<pre class="language:default">
DELETE /?id:17 HTTP/1.1
host: www.insecure-service.com
credentials: chris@insecure-service;badpassword

</pre>

DELETE Response:

<pre class="language:default">
HTTP/1.1 204 No Content
Date: Sat, 07 Nov 2015 20:59:30 GMT
... More header info

</pre>

If we were to make a GET request after deleting record at id 17, we should get the following response:

<pre class="language:default">
HTTP/1.1 404 Not Found

<html>
<body>
That record isn't here.
</body>
</html>

</pre>

The HTML may vary, but the header should contain a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5" target="_blank">404 status code</a> to inform the browser or client application that the record does not exist at that address.

<strong>POST</strong>

POST requests are primary request type for sending large amounts of data in a request body. Typically in a RESTful service, POST requests are used for creating a record or asset.  Our xhr service does not support all the ways information could be sent in a request body. Instead we are set up, primarily, to send JSON blobs.

JSON has become one of the most common ways to transmit information to and from web services. Most languages support JSON natively or they have a well-used, stable library for managing and manipulating JSON data.

Let's create a new POST request and create some data we can interact with. Much like DELETE, we are going to treat POST as a privileged endpoint and send our credential data.

<pre class="language:javascript">
xhr.post('http://www.insecure-service/', function (error, response) { /* our function body */ },
{
    data: {
        foo: ['bar', 'baz', 'quux'],
        parentId: 97
    },
    headers: {
        credentials: 'chris@insecure-service.com;badpassword'
    }
});
</pre>

Our post request will generate a rather different request structure. We will have the request header as we have seen before, but this will also pass a request body, which contains all of the information we added in the data property.  Let's take a look.

<pre class="language:default">
POST / HTTP/1.1
host: www.insecure-service.com
credentials: chris@insecure-service.com;badpassword

{"foo":["bar","baz","quux"],"parentId":97}

</pre>

This is actually quite similar to the response message we received when we got our 404. The header contains all of the important HTTP request information and the body contains all of the representational state, i.e. user data. Our response message may vary, but, traditionally, a representation of the record id, or some other identifying information is returned with the success response.

<pre class="language:default">
HTTP/1.1 200 OK
asset: http://www.insecure-service/?id=103

{ id: 103 }

</pre>

The asset URL may or may not exist in the header.  If a service provides this kind of header information is is referred to as an affordance.  Essentially, an affordance in REST and hypermedia APIs is essentially a URL to retrieve the record the service just created. This makes it convenient for the program to capture the URL and immediately request the asset from the service via GET. The JSON blob in the body contains the record ID. This service is assuming, since all data sent to create the record was assembled by the client, the only information the client doesn't currently have is the new record id.

We can use the provided ID to create a delete request if the user decides they don't want to persist that data, or we can use it to update the information when the user changes their input options.

<strong>PUT</strong>

The final REST verb we are taking a look at is PUT. PUT is the update variation on POST.  Some older, or less robust services may either not recognize PUT or they may treat PUT in the same way they handle POST requests. In either of these cases, they are not adhering to common modern expectations of REST endpoints.

It's important to understand the original specification for REST does not necessarily cover or agree with what current development practices enforce.  This means, what most places refer to as REST may not match what the originator intended, but understanding what most developers consider REST behaviors today is far more important to effective, new development than adhering to the original documentation.

PUT requests function almost identically to POST requests from the client perspective. We can actually copy our original request, make a couple small modifications and update the information stored on the server with any changes we like.  Let's take a look.

<pre class="language:javascript">
xhr.put('http://www.insecure-service/', function (error, response) { /* our function body */ },
{
    data: {
        id: 103
        foo: ['bar', 'baz', 'quux', 'test1', 'test2', 'test3']
    },
    headers: {
        credentials: 'chris@insecure-service.com;badpassword'
    }
});
</pre>

This xhr request would create the following HTTP request.  Please note, we did not specify a parentId.  We will take a look at how that works out at the service layer in a moment.

<pre class="language:default">
PUT / HTTP/1.1
host: www.insecure-service.com
credentials: chris@insecure-service.com;badpassword

{id:103,"foo":["bar","baz","quux","test1","test2","test3"]}

</pre>

Let's send a get request and see what we get back from the service.

<pre class="language:javascript">
xhr.get("http://www.insecure-service.com/", function (error, response) {
    if (!error) {
        console.log(JSON.parse(response));
    }
}, { data: { id: 103 } });

// {
//     id: 103,
//     foo: [
//         'bar',
//         'baz',
//         'quux',
//         'test1',
//         'test2',
//         'test3'
//     ],
//     parentId: 97
// }
</pre>

The parentId property was persisted as it was originally defined.  This behavior is common for services supporting PUT. Typically, the only properties in a record which get updated are the ones which are defined in the request. This provides security when sending data that, if the entire set of data is not known, a property isn't deleted or modified accidentally.

<strong>Conclusion</strong>

This was a rather long post for what ends up being a relatively simple concept.  The big take-away from this discussion is the interrelation between the kinds of requests that can be made and how they are interpreted and managed through HTTP and the service layer.

HTTP supports a variety of verbs which reach beyond the list of four we reviewed in this post, but these are the most common. The next time you make an asynchronous request to a server somewhere on the web, think about how that request is being processed and represented by the browser. When data comes back from the your service, take a look at the response message and see what kind of information you can uncover that you might not have known.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>964</wp:post_id>
		<wp:post_date><![CDATA[2015-11-11 08:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-11 16:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rest-verbs-and-http]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551416395;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:841;}i:1;a:1:{s:2:"id";i:263;}i:2;a:1:{s:2:"id";i:1109;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>URLs for Web Developers</title>
		<link>http://www.chrisstead.net/archives/970/urls-for-web-developers/</link>
		<pubDate>Wed, 04 Nov 2015 16:00:52 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=970</guid>
		<description></description>
		<content:encoded><![CDATA[At this point it seems like everyone knows about URLs. People can rattle off google.com and myfavoritesportsteam.net, but knowing domain names is not the same as really understanding URLs. URLs, AKA Uniform Resource Locators, actually adhere to a set of standards and behaviors which apply to the way your application interacts with the browser and services which provide data and resources.

First, let's take a look at the anatomy of a URL and break it down piece by piece regarding how each part directs the browser and informs your application. Once we have a common language to discuss the elements, we can make sense of how the pieces impact a web application.

<pre class="language:default">
protocol://subdomain.domain-name.top-level-domain:port-number/path?query-string#fragment
</pre>

<strong>Protocol</strong>

Commonly, the protocol is http or https, however it doesn't stop there. Browsers can support a variety of protocols such as ftp, mailto and even gopher. If you opt for an alternate protocol, be aware there is no promise that all browsers will support it. Mailto, for instance, used to function for sending emails since mail servers were wide open, but browsers typically attempt to open a mail client on your computer instead, now. Some browsers may have dropped mailto support altogether. In short, your mileage may vary.

The protocol can be accessed directly via Javascript.  The window object contains a location property. Location contains several properties including protocol.  Knowing the protocol can be useful, especially when it is not clear whether your site will be communicating via standard http or through a secure channel.  The protocol is typically returned with a trailing colon, so you may want to strip the colon.  Let's take a look at two different lines of code for interacting with the protocol.

<pre class="language:javascript">
var fullProtocol = window.location.protocol,
    trimmedProtocol = window.location.protocol.replace(':', '');

console.log(fullProtocol)); // http:
console.log(trimmedProtocol); // http
</pre>

<strong>Domain</strong>

Although the domain is broken into three parts in our diagram, domains are hard to actually split programmatically. Domain names, including the subdomain, domain name and top-level domain may be as simple as foo.bar.com, domains can also look like foo.bar.baz.quux.co.uk. Clearly co is not the domain name since co.uk is the top-level domain for companies in the United Kingdom. This means that quux is the domain name and foo.bar.baz is the subdomain.

Unfortunately, this means we can't parse a fully-qualified domain without some sort of prior knowledge. However, if we make certain assumptions, we can safely work backwards through a fully-qualified domain, specifically, if we assume that all domains we are interacting with are .com, .net, .org, .gov or .edu top level domains, we can then parse out the pieces pretty easily.

<pre class="language:javascript">
function parseHost (hostname) {
    var domainTokens = hostname.split('.');

    return {
        topLevelDomain: domainTokens.pop(),
        domainName: domainTokens.pop(),
        subdomain: domainTokens.join('.')
    };
}

var parsedDomain = parseHost('foo.bar.baz.quux.com');

console.log(parsedDomain.subdomain); // foo.bar.baz
console.log(parsedDomain.domainName); // quux
console.log(parsedDomain.topLevelDomain); // com
</pre>

This knowledge actually lines us up for beginning to understand an HTTP header as it is compiled by the browser for requests to a server.  Let's take a look at what a basic HTTP header would look like using a url like http://www.chrisstead.com/.

<pre class="language:default">
GET / HTTP/1.1
host: www.chrisstead.com

</pre>

That header information is a fully-formed acceptable HTTP request. If you were to issue this header through a telnet client you would get the front page of this site. This makes the relation between a URL and the request that is issued fairly transparent.

<strong>Port</strong>

The port is precisely as it sounds: a number representing the port to communicate through. HTTP typically goes through port 80, however other ports can and have been used for HTTP communication like 8080 and 8000.  Express (a Node web service framework) defaults to port 3000.  We can specify a different port like the following.

<pre class="language:javascript">
http://www.chrisstead.com:8080
</pre>

This call will, of course, result in a refused connection. This website uses the default web port and does not respond on 8080 or any other non-standard ports.  If, however, this site were to accept requests on port 8080, you could open a connection with a telnet connection in the following way.

<pre>
telnet www.chrisstead.com 80
</pre>

This is effectively what the browser does when connecting to a website. Our URL model is actually getting pretty rich and we haven't introduced any of the other variables.  If we wanted to capture the port that was requested programmatically when your browser script loads up, we can do that with the port property on location.

<pre class="language:javascript">
console.log(window.location.port); // typically returns 80
</pre>

<strong>Path</strong>

The path in a URL is nearly as familiar as the .com in a big company URL. This path can represent a variety of different resources. It can be a path to a file resource like an HTML file or an image, or it could represent a path to a service resource with a specific data query associated. A good example of a non-physical resource is the page displaying this blog post.

<pre class="language:javascript">
http://www.chrisstead.com/archives/970/urls-for-web-developers/
</pre>

We need to be able to break this down, so let's take a look at how we can capture the path from the location. We can access the path from the location object in a similar fashion to the port. Window.location has a pathName property which will give you just the path without any other data attached to it.

<pre class="language:javascript">
// The path for this page looks like this:
console.log(window.location.pathName); // /archives/970/urls-for-web-developers/
</pre>

When a request is sent through the browser with a path, our request header changes a little to manage the enhanced request data. Our original header actually included a path, but it simply pointed at the root directory.  Our new header will reflect our correct path.

<pre class="language:default">
GET /archives/970/urls-for-web-developers/ HTTP/1.1
host: www.chrisstead.com

</pre>

<strong>Query String</strong>

The query string is one of the last and most interesting parts of the URL. This is traditionally where information can be stored and passed along to the server.  This ties in with REST, which we will discuss in another post. Let's take a look at a representation of user state in a query string and how to retrieve it with Javascript.

<pre class="language:javascript">
// example query string: ?foo=bar&baz=quux

console.log(window.location.search); // ?foo=bar&bar=quux

function setPair (finalObj, keyValueStr) {
    var queryTokens = keyValueStr.split('='),
        key = queryTokens.shift(),
        value = queryTokens.join('=');

    finalObj[key] = value;

    return finalObj;
}

function parseQueryString (queryString) {
    return queryString.slice(1).split('&').reduce(setPair, {});
}

var queryData = parseQueryString('?foo=bar&baz=quux');

console.log(queryData.foo); // bar
console.log(queryData.baz); // quux
</pre>

Unfortunately, Javascript doesn't provide any special facility for parsing or managing query strings, so we have to handle it ourselves. Fortunately parsing out the information is fairly simple.  Of course, if we want to change the data, we need to reconstruct the original string with updated values.  Let's add a new key/value pair and change one of our values, then we'll update and refresh the URL.

<pre class="language:javascript">
function addPair (queryData, queryArray, key) {
    queryArray.push(key + '=' + queryData[key]);
    return queryArray;
}

function buildQueryString (queryData) {
    return '?' + Object.keys(queryData)
                       .reduce(addPair.bind(null, queryData), [])
                       .join('&');
}

queryData.foo = 'bar0';
queryData['test'] = 'quack';

window.location.search = buildQueryString(queryData);
console.log(window.location.search); // ?foo=bar0&baz=quux&test=quack
</pre>

Most importantly, when we update the search string, the page is refreshed and a request is sent to the server for any data updates that might need to occur. This means, for standard page views, form data can be sent via query string to a service if an AJAX call is inappropriate.

Much like we did when we did with our previous request updates, let's have a look at the update to our request header including a query string. You'll note the change is merely an appended string on the request path.  Let's have a look.

<pre class="language:javascript">
GET /archives/970/urls-for-web-developers/?foo=bar HTTP/1.1
host: www.chrisstead.com

</pre>

<strong>Fragments</strong>

The final part of a url is the fragment, otherwise known as the hash.  The hash data is the only part of the URL which does not affect the request sent back to the server. Any fragment information that is included in the URL is only used for the browser to handle the document returned from the server. Originally the fragment information was used to move to the focus of the browser to a specific part of the document.

Now the fragment information has been claimed by single page applications (SPAa) to maintain state and route information.  This new use stems from the very same fact that the fragment is in place for browser use alone and does not refresh the page, or send any new information to the server.

The first application I can recall using a fragment was Twitter with a #!/ to denote the SPA route.  It seems they were borrowing against the Unix script shebang used to identify the executable to use when interpreting the script. Useless trivia. It won't be on the test.

Fragments can contain anything including #, and will be made available to any client-side script running in the window. Let's have a look at a URL containing a hash.

<pre class="language:default">
http://www.chrisstead.com/#/foo/bar/baz
</pre>

This setup is precisely what we would need to handle routing for a SPA. Without digging into the routing logic, let's access the fragment and log it.

<pre class="language:javascript">
console.log(window.location.hash); // /foo/bar/baz
</pre>

It might have been the long way around, but this is how URLs and web development tie together. Hopefully this filled in any information gaps you might have wondered about. It's really important for someone working in web development to understand how requests and URLs are related and what each does for the other.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>970</wp:post_id>
		<wp:post_date><![CDATA[2015-11-04 08:00:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-04 16:00:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[urls-for-web-developers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="world-wide-weird"><![CDATA[World Wide Weird]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c9886d74d4ee5bb3bf2393f2e2315dfe]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_39bdaa7c885430f04b541b2400fc2bc5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_50cea7617ace8f4ea6d828c32997c72b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551431614;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:790;}i:1;a:1:{s:2:"id";i:964;}i:2;a:1:{s:2:"id";i:247;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>593</wp:comment_id>
			<wp:comment_author><![CDATA[REST Verbs and HTTP]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/964/rest-verbs-and-http/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-11 08:08:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-11 16:08:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] we dive into REST requests, I would recommend reviewing my post on URLs for web developers. This post assumes you are comfortable with the way URLs and their structure impact HTTP [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1447258117.811837;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447289446.0808451;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Refactoring from Imperative to Functional</title>
		<link>http://www.chrisstead.net/archives/988/refactoring-from-imperative-to-functional/</link>
		<pubDate>Wed, 18 Nov 2015 16:00:25 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=988</guid>
		<description></description>
		<content:encoded><![CDATA[I was talking with a coworker one day pretty recently and I had a pretty sizeable revelation, people think I write code the way I do from the get-go. It's actually really hard to look at the final output in a code block and understand how someone might have arrived at that solution.  Even when the code is completely obvious, it might not have been obvious how the original problem was solved.

I tend to write in a very terse, functional style. I prefer declarative functions over long, tedious loops and conditionals. This style is not something you are born with and it is definitely not always the first thing to come out.  I have been in situations where I KNOW I have the answer in my head, but I just can't quite spit it out, so I take the long way around, then come back and do some cleanup.

My goal with this post is to expose what this kind of code surgery looks like on a problem which doesn't seem to be reducible. Along the way I will introduce a variety of helper functions.  These functions should not be cut and pasted. Instead they are intended for use in a library or shared module.  Most (though not all) can actually be found in my <a href="http://cmstead.github.io/JFP/" target="_blank">JFP library</a>, which saves the work of creating and refining these small abstractions for yourself.  For the purpose of illuminating what is actually happening as I identify work, I will carry all added code forward.  This is for your convenience as reference material.  At the end, I will break apart the code and show which pieces are actually kept in the core source code.

Let's start off with a function that takes an array and sums over all numbers which are either a multiple of 3 or 5.  This can be done in about 15 lines including whitespace, so it's a pretty tight little function.  This is actually pretty representative of code I see in the wild.

<pre class="language:javascript">
    function sumMultiplesOf3And5 (list) {
        var total = 0,
            index = 0;
        
        if (typeof list === 'object' && Object.prototype.toString.call(list) === '[object Array]') {
            for (index; index < list.length; index++) {
                if (list[index] % 3 === 0 || list[index] % 5 === 0) {
                    total += list[index];
                }
            }
        }
        
        return total;
    }
</pre>

This is pretty straightforward.  We take in a list, prepare a variable for the total and one for the index, then we test that the list is actually an array.  Finally, we iterate over each element, perform a modulus test and then add any matching values. It's short, but there is a lot to digest on each line.  One of the first things we can do to simplify the code is strip that top conditional out.  Let's create a helper function and sanitize our data instead of wrapping everything in a big conditional.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(list) === '[object Array]';
    }
    
    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            total = 0,
            index = 0;
        
        for (index; index < values.length; index++) {
            if (values[index] % 3 === 0 || values[index] % 5 === 0) {
                total += values[index];
            }
        }
        
        return total;
    }
</pre>

That's already a lot easier to digest.  Keep in mind, since this is refactoring, some steps show an immediate impact while others will make the code worse before it gets better. In this case, we actually made a nice impact.  Now we have a sanitary array we can perform safe operations on each time.  In a standard imperative language, we would probably stop here and call it a day. This, however, is Javascript. We can do better!

Let's pull the modulus check up into helper functions.  It is not going to be immediately obvious why we would want to do this bit of work, since it seems to just confuse the matter, but it will make sense all in due time.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(list) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function mod (value, base) {
        return value % base;
    }

    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            total = 0,
            index = 0;
        
        for (index; index < values.length; index++) {
            if (equal(0, mod(values[index], 3)) || equal(0, mod(values[index], 5))) {
                total += values[index];
            }
        }
        
        return total;
    }
</pre>

Now our checks are wrapped up in functions which will make our lives much, much easier.  For now, it ends up being a little more typing.  That's alright, though.  When our checks are made with functions, it exposes repeated code we might not have seen before.  We are actually making a check against 0 twice.  This is something we can abstract away with pure functions.  Let's add a simple compose function and create a new function we can use more freely.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(list) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function mod (value, base) {
        return value % base;
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            checkModulus = compose(equal.bind(null, 0), mod),
            total = 0,
            index = 0;
        
        for (index; index < values.length; index++) {
            if (checkModulus(values[index], 3) || checkModulus(values[index], 5)) {
                total += values[index];
            }
        }
        
        return total;
    }
</pre>

Now we have a nice little function we can pass our value and modulus base into and get a boolean result.  This gives us a more declarative way of performing our check.  Here's where we are going to first introduce two functions many people associate with functional programming: map and reduce. The mapping and reduction we are going to do will be so small it's almost a direct manipulation of single values, but it gives us a way to find new pieces to pull up and out.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function mod (value, base) {
        return value % base;
    }

    function or (a, b) {
        return Boolean(a) || Boolean(b);
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            checkModulus = compose(equal.bind(null, 0), mod),
            modValues = [3, 5],
            total = 0,
            index = 0;
        
        for (index; index < values.length; index++) {
            if (modValues.map(checkModulus.bind(null, values[index])).reduce(or, false)) {
                total += values[index];
            }
        }
        
        return total;
    }
</pre>

Now we are actually performing a map across our modValues array and a reduce on the result.  By performing this behavior inline, inside an if condition, it's not very clear what we are doing or why.  This kind of behavior is great for naming and pulling out of our core code.  Really, this is a long, confusing way of asking a question: is the value a multiple of 3 or 5?

Let's stop beating around the bush and just ask the question.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function mod (value, base) {
        return value % base;
    }

    function or (a, b) {
        return Boolean(a) || Boolean(b);
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function isMultipleOf (baseValues, value) {
        var checkModulus = compose(equal.bind(null, 0), mod);
        return baseValues.map(checkModulus.bind(null, value)).reduce(or);
    }

    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            isValueAcceptable = isMultipleOf.bind(null, [3, 5]),
            total = 0,
            index = 0;
        
        for (index; index < values.length; index++) {
            if (isValueAcceptable(values[index])) {
                total += values[index];
            }
        }
        
        return total;
    }
</pre>

By pulling our check up and out, we can ask if a value is acceptable. Now we are speaking in a more natural language. We want to sum multiples of 3 and 5 so we only want to work with acceptable values. Now we have a new problem, we have to wade through a loop and a conditional structure to actually see what we are looking for. Fortunately, Javascript has a built-in function for handling this kind of operation: filter.  Filtering can be read as "I want to take this list of items and only keep the acceptable ones." Let's filter our values.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function mod (value, base) {
        return value % base;
    }

    function or (a, b) {
        return Boolean(a) || Boolean(b);
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function isMultipleOf (baseValues, value) {
        var checkModulus = compose(equal.bind(null, 0), mod);
        return baseValues.map(checkModulus.bind(null, value)).reduce(or);
    }

    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            isValueAcceptable = isMultipleOf.bind(null, [3, 5]),
            multiples = values.filter(isValueAcceptable),
            total = 0,
            index = 0;
        
        for (index; index < multiples.length; index++) {
            total += multiples[index];
        }
        
        return total;
    }
</pre>

Now we're really cooking. we've eliminated the last conditional block around our data management.  We have one ternary left for assigning the values variable, but we'll deal with that later.  For now, let's get rid of our remaining loop.  When we are performing an action like iterating over a list and summing the values, we can convert that to a reduction.  Reduce is useful for lots of different purposes, but here we are going to use it at its most foundational.  Let's create an add function and reduce our list, adding all the values together.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function add (a, b) {
        return a + b;
    }

    function mod (value, base) {
        return value % base;
    }

    function or (a, b) {
        return Boolean(a) || Boolean(b);
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function isMultipleOf (baseValues, value) {
        var checkModulus = compose(equal.bind(null, 0), mod);
        return baseValues.map(checkModulus.bind(null, value)).reduce(or);
    }

    function sumMultiplesOf3And5 (list) {
        var values = isArray(list) ? values : [],
            isValueAcceptable = isMultipleOf.bind(null, [3, 5]),
            multiples = values.filter(isValueAcceptable);
                
        return multiples.reduce(add, 0);
    }
</pre>

Reduce helped us eliminate a few bits of waste from our function.  First, we removed the loop structure and just declared the objective of our function directly. Second, we eliminated the need for an accumulator variable and an index variable. This reduces the cognitive footprint of our function since we no longer need to keep track of the variables we are using in our function. Now that we have done all of this work, let's do a little final cleanup by adding a sanitizeArray function and chaining our filter and reduce operations. This will give us our final code sample.

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function add (a, b) {
        return a + b;
    }

    function mod (value, base) {
        return value % base;
    }

    function or (a, b) {
        return Boolean(a) || Boolean(b);
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function sanitizeArray (value) {
        return isArray(value) ? value : [];
    }

    function isMultipleOf (baseValues, value) {
        var checkModulus = compose(equal.bind(null, 0), mod);
        return sanitizeArray(baseValues).map(checkModulus.bind(null, value)).reduce(or);
    }

    function sumMultiplesOf3And5 (list) {
        var isValueAcceptable = isMultipleOf.bind(null, [3, 5]);
        return sanitizeArray(list).filter(isValueAcceptable).reduce(add, 0);
    }
</pre>

As you can see, this code is actually significantly longer than our original example.  It might make functional programming actually seem like a longer path to walk than simply writing everything inline.  This would definitely be true, except that much of this code can, and should, be pulled into a library and abstracted away from our core code.  Let's pull the general-use code out into its own sample block.

<h3>Library Code - Should exist in one place</h3>

<pre class="language:javascript">
    function isArray (value) {
        return typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]';
    }

    function equal (a, b) {
        return a === b;
    }

    function add (a, b) {
        return a + b;
    }

    function mod (value, base) {
        return value % base;
    }

    function or (a, b) {
        return Boolean(a) || Boolean(b);
    }

    function compose (fnA, fnB) {
        return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            return fnA(fnB.apply(null, args));
        }
    }

    function sanitizeArray (value) {
        return isArray(value) ? value : [];
    }

    function isMultipleOf (baseValues, value) {
        var checkModulus = compose(equal.bind(null, 0), mod);
        return sanitizeArray(baseValues).map(checkModulus.bind(null, value)).reduce(or);
    }
</pre>

All of these functions are built for reuse.  We should not have to rewrite or abstract these out again.  This also means, as we come across other code which uses these behaviors, we can immediately perform a drop-in replacement and get a big mess moved out of our way.  Now, let's do a side-by-side comparison of our original function and what our final product look like.

<h3>Original Function</h3>

<pre class="language:javascript">
    function sumMultiplesOf3And5 (list) {
        var total = 0,
            index = 0;
        
        if (typeof list === 'object' && Object.prototype.toString.call(list) === '[object Array]') {
            for (index; index < list.length; index++) {
                if (list[index] % 3 === 0 || list[index] % 5 === 0) {
                    total += list[index];
                }
            }
        }
        
        return total;
    }
</pre>

<h3>Final Refactored Product</h3>

<pre class="language:javascript">
    function sumMultiplesOf3And5 (list) {
        var isValueAcceptable = isMultipleOf.bind(null, [3, 5]);
        return sanitizeArray(list).filter(isValueAcceptable).reduce(add, 0);
    }

    // Or if you prefer:

    function sumMultiplesOf3And5 (list) {
        return sanitizeArray(list).filter(isMultipleOf.bind(null, [3, 5])).reduce(add, 0);
    }
</pre>

This is what we arrive at when we really strip out the repeated code.  There's almost nothing left!

By cleaning up our code, and preferring functional abstractions, we can strip away a tremendous amount of clutter and leave the essence of our intent.  We can practically read the last function as a sentence: "To sum multiples of 3 and 5, sanitize provided list, filter for multiples of 3 and 5, then add all values together, starting with 0." This is how we would solve the problem if we were to talk it through, so we should write our code the same way. This is how I refactor to functional code. How do you do it?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>988</wp:post_id>
		<wp:post_date><![CDATA[2015-11-18 08:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-18 16:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[refactoring-from-imperative-to-functional]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551416449;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1109;}i:1;a:1:{s:2:"id";i:620;}i:2;a:1:{s:2:"id";i:1011;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bottlenecks and Micro-Performance</title>
		<link>http://www.chrisstead.net/archives/992/bottlenecks-and-micro-performance/</link>
		<pubDate>Wed, 25 Nov 2015 16:00:15 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=992</guid>
		<description></description>
		<content:encoded><![CDATA[After my last blog, I got a response regarding functional programming and performance. This is actually a common theme when people talk about functional programming versus imperative programming. Before we move into the actual performance discussion, I will openly admit, there are often times when functional programming is slower, performance-wise, than imperative programming. I have never claimed otherwise, nor will I begin doing so today.

Now, let's move away from the very specific case of functional versus imperative programming and take a look at application performance in general. It is common to look for performance bottlenecks in applications. An application slows down and we want to dig in and uncover the performance issue. This particular situation arose at my work just a few weeks ago.

We had a form which, when big enough, slowed the entire experience to a crawl. This was bad news for us as our customers were quite unhappy with the way our application was behaving. I couldn't blame them. The experience was miserable.

My colleague and I started digging into the offending code.  I discovered a few methods which were running at O(n^2) time and he discovered a, seemingly innocuous, call to perform an external validation. When we moved our search to the validation code, it became obvious this was the problem. The entire form was being revalidated multiple times for every single element on the screen.

I fixed the O(n^2) algorithm, reducing it to an O(n) time execution, which made a visible difference, but the real win was decoupling the localized validation logic from the form logic. We estimated that for each validation call that was made, validation work was being done in the neighborhood of 60,000 times.

This demonstrates the difference between micro-performance and macro-performance. My algorithm enhancement was a macro-performance fix when looking at execution times of single lines of code, but when looking at the application as a whole, it was actually just a micro-performance tuning. The real win came when a true macro-performance fix was implemented and our total iteration count was reduced from 60,000 to about 600. That kind of performance gain can be measured in orders of magnitude and saved the experience of our customers.

Jeff Atwood <a href="http://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/" target="_blank">talks about micro-performance benchmarking</a> as something that only matters when a bad choice is made. If a piece of code is not optimally performant, but it is only executed once, does it matter? Jeff and I agree, it doesn't.

Let's take a look at two different blocks of code:

<pre class="language:javascript">
// Imperative single-loop behavior

function addEvensImperative (list) {
	var total = 0,
		listLength = list.length,
		index = 0;
	
	for(index; index < list.length; index++) {
		total += list[index] % 2 === 0 ? list[index] : 0;
	}
	
	return total;
}

// Functional, test and add abstracted, two-loop behavior

function isEven (value) {
	return value % 2 === 0;
}

function add (a, b) {
	return a + b;
}

function addEvensFunctional (list) {
	return list.filter(isEven).reduce(add, 0);
}
</pre>

Clearly, addEvensImpertaive and addEvensFunctional produce the same output. If we look at the behavior with regard to constants, addEvensImperative loops over the array once so we can say it has a behavior characteristic function something like 1n + c_0. Meanwhile addEvensFunctional actually loops through the entire list twice in a pathological (worst) case. This means we can estimate the characteristic function to look something like 2n + c_1.  This means for each time the functional behavior is called, the pathological behavior will be half as fast as the imperative call.

Let's take a look at this using big-O notation. In big-O notation, the efficiency of the algorithm is reduced to the highest-power term in the approximate function.  This means, all constants are discarded as well as coefficients. When we annotate our functions the imperative function performance is O(n) and the functional function performance is O(n) as well.

What this means is both of these functions have a linear growth behavior. The more values we have in our list, the longer each of these take to complete.  Typically what we will see is total execution time measured in microseconds or a few milliseconds. Even large arrays of numbers can be iterated over very very quickly, so, even though the functional behavior is half as fast, the overall performance characteristic loss is negligible.

This is the pitfall of micro-optimization. Even though the perceived performance doesn't change drastically for the user, it is fussed over because it's easy to see and easy to measure. The problem is, there is a large blind spot that opens up when thinking about managing efficiency.

There is a phrase "what is measured is managed." When applied to things which are properly and fully measured and everything is measureable, this is valuable.  The problem is by measuring micro-optimizations, we can encounter the problem of "not seeing the forest for the trees." This means we have accurate measurements of parts of a system, but we haven't actually accounted for the system.

It's common to talk about early optimization both in positive and negative light (depending on where you stand). I tend to work on the task at hand, and measure when the work is done. This means, if one function is not fully optimized, but the overall performance is as good or better than business requirements dictate, there is no need to optimize further.  If, on the other hand, the system is under-performing and slow, I will look for new optimizations.

The important thing to note, however, is I prefer to optimize from the top-down. If a system is slow, it is highly unlikely that the culprit is a single function which is slower than we could be. More likely, we have a hidden optimization problem which is taking an O(n) function and looping, creating an O(n^) behavior, then looping again creating an O(n^3) behavior, and so on.

This hidden exponential growth characteristic is precisely what bit us in our slow-validating application. The reason my O(n^2) to O(n) optimization only gave us a small win is because we had another set of functions which were creating an algorithm performing at O(n^5) or so. Once we converted that behavior to an O(n) algorithm, the app sped up significantly.

In the end, the difference between a function that is performing at 2n versus n is significantly less critical than a system of functions performing at n^5 instead of 5n. Micro-performance benchmarks are important in systems like robotics, neural nets and so on. Common application behaviors like working with small, finite sets of data, typically benefit most from macro-optimizations, so fix those problems first, then measure again. In the end it is far more important to fix the bottleneck and leave the non-micro-optimized code readable and simple.

<h3>Testing Notes</h3>

Running a test on my local computer there was no measurable difference in performance between the two functions until the list of numbers got to 10,000 values, at which point the difference appears to be less than 1ms (0ms vs 1ms). At 10,000,000 the difference had grown significantly to about 850ms. Please don't make your users process 10,000,000 numbers in their browser.

Here is my test script:

<pre class="language:javascript">
function range (start, end) {
    var output = [],
        current = start;

    for (current; current <= end; current++) {
        output.push(current);
    }

    return output;
}

module.exports = function test (endValue) {
    var rangeList = range(1, endValue),
        start,
        end;

    start = (new Date()).getTime();
    console.log(start);
    addEvensImperative(rangeList);
    end = (new Date()).getTime();
    console.log(end);
    console.log(end - start);

    start = (new Date()).getTime();
    console.log(start);
    addEvensFunctional(rangeList);
    end = (new Date()).getTime();
    console.log(end);
    console.log(end - start);
}
</pre>

Output:

<pre>
> runTest(100)
1448224288065
1448224288065
0
1448224288065
1448224288065
0
undefined
> runTest(1000)
1448224303600
1448224303600
0
1448224303600
1448224303600
0
undefined
> runTest(10000)
1448224309681
1448224309681
0
1448224309681
1448224309682
1
undefined
> runTest(100000)
1448224315113
1448224315114
1
1448224315114
1448224315121
7
undefined
> runTest(1000000)
1448224319977
1448224319980
3
1448224319980
1448224320063
83
undefined
> runTest(10000000)
1448224325198
1448224325222
24
1448224325223
1448224326094
871
undefined
</pre>

This demonstrates that even a large number of arithmetic operations, my computer (an older Macbook Pro) can still push out better than 10,000,000 functional operations* a second. Arguably, in any software system processing fewer than 100,000 values at a time, the difference in performance when running each function once would be imperceptible to the end user.

* megaFLOPS so, blah blah, analogy, blah 10 megaFOPS (million functional operations per second)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>992</wp:post_id>
		<wp:post_date><![CDATA[2015-11-25 08:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-25 16:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bottlenecks-and-micro-performance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551421576;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:841;}i:1;a:1:{s:2:"id";i:1109;}i:2;a:1:{s:2:"id";i:683;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>594</wp:comment_id>
			<wp:comment_author><![CDATA[Gabriel]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gabrielemanuel@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[181.170.237.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-02 07:44:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-02 15:44:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Could not agree more on this one. Thanks for the examples. If functional programming "becomes an issue" in your code, there's a good chance you have much bigger problems going on. The negligible decrease in performance when compared to imperative programming is a price I'm well willing to pay for the gain in readability, code clarity and composability. 

Thanks for the post, Chris.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449196955.070271;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449071044.901896;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>595</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-03 18:45:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-04 02:45:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, Gabe!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>594</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449197119.987185;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Node and Blended Tech Stacks</title>
		<link>http://www.chrisstead.net/archives/1004/node-and-blended-tech-stacks/</link>
		<pubDate>Fri, 04 Dec 2015 19:00:12 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1004</guid>
		<description></description>
		<content:encoded><![CDATA[The longer people write single page applications, the more of them there are. The notion of a SPA harkens back to the concept of client server architecture, invented some time in the 1960's or 1970's. Now we build SPAs with services constructed with Java, C#, Scala and Node. Some of the stacks we use have names like MEAN, and others are a hand-selected composite of disparate technologies with no name.

I have quickly come to believe that any tech stack with a cute name is likely a solution looking for a problem.  Sometimes you want Mongo, Express, Angular and Node, but sometimes you want Couch, Ember, Spring and Java, do we call it JESC? Gross.

The important thing here is, we took Node out altogether for the Java stack. The benefit we get with choosing Java's history and broad set of packages, you lose the ability to share code between services and your client-side code.

We are in a unique situation in the current stage of technology where we can write a client application and provide it as a interpreted file which runs on a remote computer at request time. The code we can push to the client also will run on a server.  By ignoring this fact, we lose a great opportunity to write code once and share it client to server.

People call this isomorphic or universal Javascript.  If the services are all written in another language, there is no way to leverage the client code in the compiled server code.  There is, however, still a way to share business logic from the server layer with the client with a little fancy fingerwork.

First, let's write a little logic to verify a record doesn't have a quantity which is greater than the maxQuantity property. Once we have that simple function, we can then apply it across a list of records. 

<pre class="language:javascript">
function validateQuantities (recordList) {
    return recordList.map(record => record.quantity <= record.maxQuantity)
                     .reduce((a, b) => Boolean(a &&b), true);
}
</pre>

If this were in the client side code, and we wanted to do the same kind of check in Java, the code would look something like the following:

<pre class="language:java">
Static Class Validator {
	
    public static boolean validateQuantities (List<Record> recordList) {
        return recordList.map((Record r) -> r.quantity <= r.maxQuantity)
                         .reduce(true, (a, b) -> a && b);
    }
	
}
</pre>

Obviously this logic is almost the same, but two different developers probably would end up writing each of these.  This is problematic since we now have the same logic in two different files in two different languages.  This definitely a violation of DRY principles.  For a single validation like this, we can probably accept the duplicate code, but in large code bases, this kind of thing will go from being a one-off occurrence to a pervasive problem. Let's look at a way to consolidate this.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1004</wp:post_id>
		<wp:post_date><![CDATA[2015-12-04 11:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-04 19:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-and-blended-tech-stacks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="site-architecture"><![CDATA[Site Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551416428;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:644;}i:1;a:1:{s:2:"id";i:1238;}i:2;a:1:{s:2:"id";i:933;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Commenting Code: Why, Not How</title>
		<link>http://www.chrisstead.net/archives/1011/commenting-code-why-not-how/</link>
		<pubDate>Wed, 09 Dec 2015 16:00:36 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1011</guid>
		<description></description>
		<content:encoded><![CDATA[If you have written any amount of code in any language you are likely aware of code comments or remarks and how they work. This isn't really what I'm interested in. I came across a discussion about an open source project which had a requirement that all code must be left completely uncommented. People were surprised and alarmed as to why this project would require all code to be uncommented, and I tend to agree. This post is to address comment content.  Hopefully, you will share my opinion that comments are important by the end of this.

New programmers are often told to comment their code by instructors, but they aren't told what the comments should contain.  I remember my C language instructor chastised me for commented all of my functions without regard to the importance of the function or value of the comment.  He said "there are too many comments, are you trying to make your code unreadable?" Others received feedback that they didn't comment enough.

While we are on the topic of novice programmers, let's take a look at a comment style I have seen in code written by inexperienced developers.  It usually contains information about what the function does and how it does it.  Although it is lovely to see the program explained in clear English, it is not particularly helpful since good code should be not only functional but illuminating.

<pre class="language:javascript">
// Pulls accounts from type object, flattens accounts arrays then picks accountId from objects 
function getAccountIds (accountsByType) { /* function logic */ }
</pre>

From this description anyone with experience in the language could probably devise a body of code which would perform the actions listed in the comment.  The problem is, I have no idea why this code exists.  Code which exists for no other purpose than just to be written is not useful code.  This could be dead code, or it could be a problem which could be solved another way.  If this code does something which the surrounding context gives us no clue to, we would never understand the value, just the means.

Instead I would write a comment like the following:

<pre class="language:javascript">
// Constructs array of accountIds to send to the service layer which returns updated account information
function getAccountIds (accountsByType) { /* function logic */ }
</pre>

Now we understand the context for the function.  We can not only see what the function does by the name alone, but the comment provides immediate context for the use. Even more than that, this comment is far less likely to be out of date by the next time someone looks at this bit of the code.  Comments which detail the inner workings of a function are more likely to fall out of date as the life of the code gets longer.  People may modify our function to behave differently, however the context of the creation of the function is unlikely to become obsolete even with (<a href="http://www.chrisstead.com/archives/813/mainstay-monday-solid-openclosed-principle/" target="_blank">anti-SOLID</a>) modifications.

This brief discussion can be summed up by the phrase "comments should tell the programmer why something was done, not how."  I like to call this my "why, not how" principle. This helps to guide the comment writer's hand when they feel the need to add a comment to the code.  If your code needs explanation as to how something was accomplished, the code is likely too clever. On the other hand, sometimes obscure solutions are unavoidable, which means the function context may not exist within the codebase. This is precisely the why that should be added as a comment. For example, this:

<pre class="language:javascript">
// This code is a generic base for a variety of abstracted functions and is not intended for use alone
function complexGenericBehavior (fn, value) { /* Do complicated stuff here */ }
</pre>

In Javascript there is another situation where comments are desirable. Although I believe JSDoc is a tool which was ported almost blindly from its source (<a href="http://www.oracle.com/technetwork/articles/java/index-jsp-135444.html" target="_blank">JavaDoc</a>) it is, hands down, the best tool for the job available in Javascript. I don't believe that every function, method, class and module in your code should contain JSDoc comments, it is useful to annotate functions which might be used in a variety of situations.  Essentially, JSDoc is a good initial way to document slow-changing program APIs which others might want to use.  Following is an example of JSDoc use for the same function.

<pre class="language:javascript">
/**
 * @func getAccountIds
 * @desc Constructs array of accountIds to send to the service layer to capture updated account information
 * @arg {array} accountsByType - List of account type objects
 * @returns {array} - List of {int} accountId
 */
function getAccountIds (accountsByType) { /* function logic */ }
</pre>

As you can see, the context comment is still part of the description associated with our function.  This contextual clue is still the best part of our comment.  Hopefully this function will be slow to change, so the arguments and return values will remain consistent.  Even if they don't howeever, our context clue will still provide important insight into why this function was created and what purpose it serves.

In the end, comments are not always necessary.  They can be extra noise, or they can be misleading. As programs grow large and the context becomes unclear, comments become a life raft for programmers who are digging deep into old code to identify functionality which is important or no longer in use.  If you choose to write comments, and I hope you do, think about WHY you wrote your code and let the code tell the next programmer HOW.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1011</wp:post_id>
		<wp:post_date><![CDATA[2015-12-09 08:00:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-09 16:00:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[commenting-code-why-not-how]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420648;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:18;}i:1;a:1:{s:2:"id";i:1226;}i:2;a:1:{s:2:"id";i:355;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>596</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Ottinger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tottinge@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://plus.google.com/114857317505891585158</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[71.57.13.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-09 10:39:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-09 18:39:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very reminiscent of http://ruthlesslyhelpful.net/2012/02/25/rules-for-commenting-code/

Which of course is a condensation of the conversation from C&amp;C -- http://c2.com/cgi/wiki?CommentCostsAndBenefits

So much agreement here.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450296913.2752831;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449686392.1746459;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>597</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.167.162.242]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-16 12:15:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-16 20:15:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry for taking so long to approve this comment. : (

I haven't read those posts, so I will have to take a look.  Thanks for sharing the links!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>596</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450296958.9772351;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bind All The Things</title>
		<link>http://www.chrisstead.net/archives/1015/bind-all-the-things/</link>
		<pubDate>Thu, 17 Dec 2015 04:48:35 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1015</guid>
		<description></description>
		<content:encoded><![CDATA[In the time I have written and mentored with Javascript, there is a single core concept which seems to give people a significant amount of trouble: bind. To the uninitiated, bind is a puzzle, wrapped in a mystery wrapped in an enigma. If you are comfortable with functional programming, there are parts of bind which make no sense and, at the same time, if your experience is rooted in a strict OO language, other aspects will be less than sensible.  I'd like to look at bind holistically in the hope that all will become clear.

<h3>Bind for Object Orientation</h3>

If we look at the object oriented nature of Javascript, we come quickly to prototypes.  Let's create a simple object we can experiment with using a prototypal definition and behavior composition to create a rich greeting API.  (Yes, this is hello world, no I'm not kidding.)

<pre class="language:javascript">
function Greeter () {
	this.defaultGreeting = 'Hello';
	this.defaultName = 'person';
}

Greeter.prototype = {
	cleanString: function(defaultValue, userValue) {
		return typeof userValue === 'string' ? userValue : defaultValue;
	},
	
	greet: function (greeting, name) {
		var cleanGreeting = this.cleanString(this.defaultGreeting, greeting),
			cleanName = this.cleanString(this.defaultName, name);
			
		console.log(cleanGreeting + ', ' + cleanName);
	},
	
	sayHello: function (name) {
		this.greet('Hello', name);
	}
};
</pre>

Our greeter object gives us the facility to say hello and to generate a generic greeting. Let's have a look at how we do this:

<pre class="language:javascript">
var myGreeter = new Greeter();

myGreeter.sayHello('Chris'); // Hello, Chris;
myGreeter.sayHello(); // Hello, person

myGreeter.greet(); // Hello, person
myGreeter.greet('Hey', 'Chris'); // Hey, Chris
</pre>

Something interesting happens in Javascript when we start capturing pointers to functions. In a purely functional programming language, there is not object or class system to provide function execution context. In a purely object oriented language, functions are second class, so they cannot be separated from their context.  Javascript is the only language I am aware of where functions and their execution context can be separated.  This context separation is precisely the kind of behavior which introduces the "this" issues people are so keen to bring up. Let's have a look at what happens when we separate a function from its object.

<pre class="language:javascript">
var hi = myGreeter.sayHello;

hi('Chris'); // undefined is not a function
</pre>

<h3>Bind for Partial Application</h3>

The error we see is because sayHello refers, internally, to this.greet.  Since hi captured a pointer only to the sayHello function, all sense of object context is lost.  This means "this" is referring to whatever bizarre context happens to be surrounding our variable. Best case scenario is this refers to window, but who really knows.  Let's fix this issue.

<pre class="language:javascript">
var boundHi = myGreeter.sayHello.bind(myGreeter);

boundHi('Chris'); // Hello, Chris
</pre>

By using bind, we define the function execution context explicitly.  This means boundHi actually behaves the way our original sayHi method on myGreeter did.  Now we get the kind of consistent behavior we wanted. This is not the only thing we can use bind for.  Let's take a look at a function which doesn't depend on an execution context.

<pre class="language:javascript">
function add(a, b) {
	return a + b;
}

add(5, 3); // 8
</pre>

Add is a pretty simple function, but we can use it to perform some more interesting actions like doing an inline increment of a value.  Let's use bind to define a new, refined function to perform our increment action.

<pre class="language:javascript">
var increment = add.bind(null, 1),
    always10 = add.bind(null, 7, 3);

increment(10); // 11
always10(); // 10

[2, 4, 6, 8].map(increment); // [3, 5, 7, 9]
</pre>

Here, bind provides the ability to partially apply an argument, or arguments if you provide more than one. Obviously our second function is both trivial and somewhat useless, but it demonstrates performing a partial application of more than a single argument.  Meanwhile we can see a reason for wanting to partially apply a single value to a function for instance applying the same operation to an array of values.

<h3>Binding Context and Partially Applying Values Together</h3>

We're in a place where we can tie this all together now.  We have seen execution binding and partial application. Let's have a look at what using all of these behaviors together for a single focused purpose.  Let's create a new function from what we already have which does something a little different.

<pre class="language:javascript">
var sayHola = myGreeter.greet.bind(myGreeter, 'Hola');
sayHola(); // Hola, person
sayHola('Chris'); // Hola, Chris
</pre>

<h3>Tying it All Up</h3>

Here we have created a new function, sayHola, with nothing more than the bind function and existing functionality in our Greeter instance.  Bind is a very powerful function which is part of the core Javascript language.  With bind alone, a lot of work can be done.  The next time you are working and discover a context issue, or you simply wish you could use that one function if it only had one of the arguments pre-filled, look to bind. You might find exactly what you need.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1015</wp:post_id>
		<wp:post_date><![CDATA[2015-12-16 20:48:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-17 04:48:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bind-all-the-things]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420637;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:752;}i:1;a:1:{s:2:"id";i:949;}i:2;a:1:{s:2:"id";i:1109;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Composition and Compose</title>
		<link>http://www.chrisstead.net/archives/1026/composition-and-compose/</link>
		<pubDate>Wed, 23 Dec 2015 16:00:10 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1026</guid>
		<description></description>
		<content:encoded><![CDATA[A while back we discussed composing functions together to blend behaviors and extend functions to solve more complex problems.  The discussion was all about composing two specific functions together.  In functional programming composing multiple functions together can actually be part and parcel of the entire new function.

<h3>The Lodash Way</h3>

If we take a moment and look at libraries like Lodash and Underscore, they handle function composition as function chaining like the following.

<pre class="language:javascript">
_(myValue).chain().filter(fn1).map(fn2).reduce(fn3);
</pre>

<h3>Naive Generic Composition</h3>

This is great except, if we want to drop in our own functions we have to either use tap, which is counterintuitive, or we have to devise our own strategy for composing multiple functions together.  First an aspect we would do well to avoid is the state management which happens under the covers. Second, an aspect we would like to favor is an ability to create our own transformation behaviors and chain them together in a clean, sane way.  Let's have a look at a simple, rather naive implementation of a generic composition function.

<pre class="language:javascript">
// This is VERY close to mathematical composition, so let's
// not be coy and just use the mathematical function names i.e. f and g
function simpleCompose(f, g) {
    return function () {
        var args = Array.prototype.slice.call(arguments, 0);
        
        // equivalent to f(g(x)) where x = args
        return f.call(null, g.apply(null, args));
    };
}
</pre>

So long as two functions are provided to simpleCompose, we will get a new, composite function.  We could actually create a new function which would perform the equivalent of x * (y + z) with an add and a multiply function.  This may seem like kind of the long way around, but with a more complex logic, composition actually simplifies the flow.  Let's take a look at the simple example in code.

<pre class="language:javascript">
function add (a, b) {
    return a + b;
}

function multiply (a, b) {
    return a * b;
}

function multiplySumByX (x) {
    return compose(multiply.bind(null, x), add);
}

multiplySumByX(5)(6, 7); // 65
multiplySumByX(10)(9, 3); // 120

// 3 * (x + y)
var tripleSum = multiplySumByX(3);

tripleSum(15, 6); // 63
tripleSum(8, 4); // 36

// Thanks to user 'newbie' for catching my terrible arithmetic, edited for correctness.
</pre>

Although this kind of composition is powerful and allows for a surprising amount of flexibility, it's rather rather limiting to only be able to compose two functions at a time.  It would be much better if we could compose multiple functions together to create a new function on the fly.  Let's take a look at an iterative approach to composing functions together.

<h3>Iterative Composition</h3>

Let's take our original compose function and turn it up a notch.  Instead of letting it be the final implementation we can use it as the foundation for a more powerful approach to composition.  We still want our compose function to accept two arguments and compose them, but we want to take two or more and compose them all.  We will need to make use of the arguments object available in a function, as well as the slice function from Array.prototype.  Anyway, less talk, more code.

<pre class="language:javascript">
function identity (value) {
    return value;
}

function compositor (f, g) {
    return function () {
        var args = Array.prototype.slice(arguments, 0);
        return f.call(null, g.apply(null, args));
    };
}

function iteratingCompose (f, g) {
    var args = Array.prototype.slice(arguments, 0),
        finalFn = identity;
        
    args.forEach(function (fn) {
        finalFn = compositor(finalFn, fn);
    });
    
    return finalFn;
}

// Edited to fix arguments slicing. Thanks Bondi French for catching that.
</pre>

This is a little more code, but it's a lot more power.  If we take iteratingCompose.length we get 2, but optionally, we can pass in as many functions as we want and it will compose them all! To get a perspective on the kind of power we are working with, let's make some new functions and compose them all.

<pre class="language:javascript">
var add3 = add.bind(null, 3),
    double = multiply.bind(null, 2),
    subtract5 = add.bind(null, -5),
    divideBy10 = multiply.bind(null, 1/10),

    doSomeArithmetic = iteratingCompose(add3, double, subtract5, divideBy10);

doSomeArithmetic(8); // 1.7
doSomeArithmetic(99); // 19.9
</pre>

This would probably be more impressive if we did something more than just a little arithmetic.  Let's do something that takes a little more heavy lifting and see what we can really get out of our compose function.

<pre class="language:javascript">
function filter (predicate, list) {
    return list.filter(predicate);
}

function map (fn, list) {
    return list.map(fn);
}

function reduce (fn, list) {
    return list.reduce(fn);
}

function isTaxable (record) {
    return record.taxable;
}

function computeSubtotal (record) {
    return record.price * record.quantity;
}

function salesTaxFactory (rate) {
    return multiply.bind(null, rate);
}

var getSalesTax = iteratingCompose(
                    filter.bind(null, isTaxable),
                    map.bind(null, computeSubtotal),
                    reduce.bind(null, add),
                    salesTaxFactory(0.075)
                  );

var saleItems = [
    {
        name: 'Paper Towels',
        quantity: 3,
        price: 2,
        taxable: true
    },
    {
        name: 'Paring Knife',
        quantity: 1,
        price: 7,
        taxable: true
    },
    {
        name: 'Bananas',
        quantity: 11,
        price: .7,
        taxable: false
    },
    {
        name: 'Trash Bags',
        quantity: 1,
        price: 11,
        taxable: true
    }
];

getSalesTax(saleItems); // 1.8
</pre>

Clearly this problem is more meaningful and substantial than simply performing a sequence of arithmetic operations. By using composition for function chaining, we can define a simple set of functions to perform small steps toward our goal.  Each of the novel functions are simple and easy to understand, yet we can combine them to perform a complex operation.

<h3>Reducing Composition</h3>

Now that we've seen the power that compose brings to our programming life, let's look at ways we can make the current implementation better.  Instead of using a looping structure like forEach and maintaining state outside of the composing operation, let's use reduce instead.  Since our function arguments are being converted into an array, this is a simple refactoring.

<pre class="language:javascript">
function identity (value) {
    return value;
}

function argsToArray (args) {
    return Array.prototype.slice(args, 0);
}

function compositor (f, g) {
    return function () {
        var args = argsToArray(arguments);
        return f.call(null, g.apply(null, args));
    };
}

function reducingCompose (f, g) {
    var args = argsToArray(arguments);
    return args.reduce(compositor, identity);
}
</pre>

This refactoring tightened up the whole definition pretty nicely.  We identified a shared behavior, converting arguments to an array, and abstracted it.  Then we replaced our forEach loop with a reduction, which helps us remove the burden of tracking state at each iteration.  The only problem we could run into now is if one of the arguments provided is not a function.

<h3>The Final Iteration</h3>

There are two different approaches which could be taken here.  First, we can stop here and say our reducingCompose function is all we want for our final compose function.  This means, if someone mistakenly passes an argument which isn't a function, they will get an error when they try to execute their newly created function.

Although getting an error is good, getting it early is better.  What if we were to throw an error while compose is constructing the new function and alert our user, immediately, that they did something wrong?  Arguably this is more programmatically interesting and I think it's the right thing to do.  Let's hop to it.

<pre class="language:javascript">
function identity (value) {
    return value;
}

function argsToArray (args) {
    return Array.prototype.slice(args, 0);
}

function compositor (f, g) {
    return function () {
        var args = argsToArray(arguments);
        return f.call(null, g.apply(null, args));
    };
}

function checkFunctionArgs (args) {
    var badArgs = args.filter(function (value) { typeof value !== 'function'; });
    
    if(badArgs.length) {
        throw new Error('Compose cannot be applied to non-function values', badArgs);
    }
}

function compose (f, g) {
    var args = argsToArray(arguments);
    
    checkFunctionArgs(args);
    
    return args.reduce(compositor, identity);
}
</pre>

Now we have constructed a compose function which gives us the kind of power we would want from function composition, but with the safety of a well-checked library.  Through writing this generic compose function, we now have a new tool which can be pulled from our toolbox when we want all the power with none of the bloat.  I compose my functions, do you?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1026</wp:post_id>
		<wp:post_date><![CDATA[2015-12-23 08:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-23 16:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[composition-and-compose]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420640;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:924;}i:1;a:1:{s:2:"id";i:1015;}i:2;a:1:{s:2:"id";i:988;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>598</wp:comment_id>
			<wp:comment_author><![CDATA[Bondi French]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bondifrench@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://plus.google.com/115796376963759334292</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[27.32.236.127]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-27 17:45:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-28 01:45:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice article, that's the way I like to refactor and structure my code. Although in your first definition of `compositor` and `iteratingCompose` you write `Array.prototype.slice(args, 0)`, shouldn't it be `arguments` instead of `args` as you haven't really defined `args` before?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451267139.2189159;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1451768590.605911;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>599</wp:comment_id>
			<wp:comment_author><![CDATA[newbie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[whello64@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.243.200.38]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-28 18:42:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-29 02:42:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[multiplySumByX(5)(6, 7); // 75
multiplySumByX(10)(9, 3); // 270
 tripleSum(15, 6); // 63
tripleSum(8, 4); // 96

 ??????????????????????????????????????????

multiplySumByX(5)(6, 7); // 65
multiplySumByX(10)(9, 3); // 120
tripleSum(15, 6); // 63
tripleSum(8, 4); // 36]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1451768465.827981;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451356939.415972;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>600</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-01-02 13:02:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-01-02 21:02:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[D'oh on all accounts! I was distracted while doing math in my head, this is what I get for not taking more care.  Thanks for pointing that out.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>599</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1451768525.1858821;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>601</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-01-02 13:03:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-01-02 21:03:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Probably so. I'm going to have to go back and fix some issues in this code. Clearly I was way off that day.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>598</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1451768590.9350121;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>602</wp:comment_id>
			<wp:comment_author><![CDATA[newbie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[whello64@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.243.200.38]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-01-03 17:53:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-01-04 01:53:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Chris,

First, I'm not good at english, I hope you understand my english.

I think the compose method composes the arguments in the reverse direction.

So, 
It is correct "doSomeArithmetic = iteratingCompose(divideBy10, subtract5, double, add3);", not "doSomeArithmetic = iteratingCompose(add3, double, subtract5, divideBy10);"

(also in your code, the reverse direction is correct.)

And the pipe method composes the arguments in normal direction.

What do you think?

Thanks.


https://medium.com/@collardeau/intro-to-functional-programming-concepts-in-javascript-b0650773139c]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451872390.4444151;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Stupid Javascript Object Tricks</title>
		<link>http://www.chrisstead.net/archives/1030/stupid-javascript-object-tricks/</link>
		<pubDate>Wed, 30 Dec 2015 16:00:12 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1030</guid>
		<description></description>
		<content:encoded><![CDATA[I usually write something meaty for my posts, but sometimes it's worthwhile to just see some of the strange stuff you can do with a language because it's informative. I remember one of the most enlightening things I experienced while I was working on my degree was taking a class on Assembly.  I don't use Assembly at all in my day to day, but there was a lot of good knowledge I gained just from taking the class.  

Probably the most profound item I experienced in that class was creating a struct in C and watching it take up real memory in the debugger.  It's one thing to say "such and such takes a double word" but to actually see it happen in real time is something completely different.

Today we are going to play with a feature of Javascript that is earmarked for deprecation in ES-next, however, it is so valuable to gaining greater insight into how the language works, I hope its never actually removed.  The feature I am talking about is hand-instantiation of base objects.

Before we dive in, let's back up a little and take a look at some code which should be familiar for people who have written any OO Javascript.  This is just a basic object setup, so don't get too excited.

<pre class="language:javascript">
function Greeter (greeting, name) {
	this.defaultGreeting = this.cleanString('Hi', greeting);
	this.defaultName = this.cleanString('person', name);
}

Greeter.prototype = {
	cleanString: function (defaultValue, value) {
		return typeof value === 'undefined' ? defaultValue : value;
	},
	
	greet: function (greeting, name) {
		var cleanGreeting = this.cleanString(this.defaultGreeting, greeting),
			cleanName = this.cleanString(this.defaultName, name);
		
		return cleanGreeting + ', ' + cleanName + '.';
	}
};

var myGreeter = new Greeter('Hi', 'Chris');

myGreeter.greet(); // Hi, Chris.
myGreeter.greet('Hello'); // Hello, Chris.
myGreeter.greet('Dammit', 'Jim'); // Dammit, Jim.
</pre>

Tell Jim, I'm a programmer, not a magician.

Anyway, this is essentially intro to Javascript object creation for OO programming. The interesting thing is, we can actually look up the chain and see the same kind of code repeated at the language definition level. Let's dig in and have a look at the Object object.  (Yes, I just said that.)

<pre class="language:javascript">
typeof Object; // function
typeof Object.prototype; // object
Object.prototype.toString(Object.prototype); // [object Object]
</pre>

The reason this is interesting is this, we can actually do some strange stuff with our base object. Normally if we wanted an object, we could just create an object literal.  There are actually two other ways we can create an object as well.  Behold!

<pre class="language:javascript">
// Common object creation:
var myNormalObj = {};

// Object instantiation:
var myObjectInstance = new Object();

// Object creation through function calling:
var myFirstObjCall = Object();
</pre>

Okay, here's where it starts to get weird.  You can do this, not only, with Object, but also with Function. Let's create a Function without using the function keyword.  Like Samuel L. Jackson said in Jurassic Park, "hold on to your butts."

<pre class="language:javascript">
var firstAdd = new Function(['a', 'b'], 'return a + b;');
var secondAdd = Function(['a', 'b'], 'return a + b;');

firstAdd(1, 2); // 3
secondAdd(4, 5); // 9
</pre>

These are actually just creating anonymous functions with a global scope, but the fact that you can do this at all is kind of amazing.  It gets even weirder, though.  Let's actually dig into the inheritance hierarchy of the Javascript language a little bit and see what lives underneath it all.

<pre class="language:javascript">
function identity (value) {
	return value;
}

typeof identity; // function
identity instanceof Function; // true
</pre>

So far, so good.  We know that identity is a simple function and that any function should be an instance of the parent object Function. This all strings together nicely.  It also means we get all of the standard function-related behaviors like call and apply as we would expect.  This makes things reasonably predictable and sane. If we dig a little deeper, though, we discover something surprising.

<pre class="language:javascript">
identity.valueOf() === identity; // true

Function.prototype.hasOwnProperty('valueOf'); // false
Object.prototype.hasOwnProperty('valueOf'); // true (!!!)

Function instanceof Object; // true

// Testing because of the transitive property of equality
identity instanceof Object; // true
</pre>

Translating from abstract weirdness to English, what this means is Function inherits from Object.  More to the point, functions are not only data, they are actually objects!

Let that soak for a moment.

This helps the idea we could attach properties to functions make a lot more sense.  In fact, if numbers and strings weren't evaluated through and converted to their rough primitive equivalents, they would actually be Object instances too.  A good way to see this is to open a REPL and try the following:

<pre class="language:javascript">
Object(8) + Object(9); // 17
Object('foo') + Object('bar'); // foobar
</pre>

All of a sudden everything in Javascript wraps up a lot more nicely.  Literally any value we deal with in Javascript originates from an object with inherits from Object.  This literally means we deal in objects everywhere.  This, in turn means, creating new types is as straightforward as generating new objects, which is really what objects are largely about in Javascript anyway.

Let's play one last game.  Let's create a function which returns a base value and attaches an error state if something goes wrong, otherwise the error is null.  This kind of behavior is something that can be performed in Go.  Given the power we get with the Javascript Object hierarchy, we can really do some amazing things.

<pre class="language:javascript">
isValid(7).error; // null
isValid(15).valueOf(); // true
isValid(999).error; // Number must be positive and less than 100.
</pre>

This kind of programming wanders dangerously close to the meta-programming world, so we should probably stop before we spin off into madness. At the end of the day, Javascript has some really amazing, powerful features which are not generally publicized, but can provide for as rich and powerful a programming experience as you might ever want. The next time you wonder if you can do something, open up a REPL and try it out. The worst that will happen is your idea doesn't work. The best is you will discover a new, relatively unexplored corner of the language.  What's to lose?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1030</wp:post_id>
		<wp:post_date><![CDATA[2015-12-30 08:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 16:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stupid-javascript-object-tricks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551420656;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1109;}i:1;a:1:{s:2:"id";i:620;}i:2;a:1:{s:2:"id";i:1106;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anonymous Functions: Extract and Name</title>
		<link>http://www.chrisstead.net/archives/1035/anonymous-functions-extract-and-name/</link>
		<pubDate>Wed, 06 Jan 2016 16:00:52 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1035</guid>
		<description></description>
		<content:encoded><![CDATA[It's really great to see functional patterns become more accepted since they add a lot of really powerful tools to any programmer's toolbox. Unfortunately, because functional programming was relegated primarily to the academic world for many years, there aren't as many professional programmers who have developed a strong feel for good patterns and share them with more junior programmers. This is not to say there are none, but it is important to note that most programmers think of functional programming and say "it has map, filter and reduce; it's functional."

Though having those three higher-order functions does provide a functional flavor, it is more important that there are higher-order functions at all.  With higher-order functions come the use of anonymous functions.  Anonymous functions (also known as lambda functions) provide a great facility for expressing singleton behavior inline.  This kind of expressiveness is great when the function is small and does something unexciting, like basic arithmetic or testing with a predicate expression.  The problem is anonymous functions introduce cognitive load very quickly which makes them a liability when code gets long or complex.

Today I'd like to take a look at a common use of anonymous functions and how they can cause harm when used incorrectly.  There are many times that anonymous functions are assigned directly to variables, which actually introduces one of the same issues we are going to deal with today, but I am not going to linger on that topic.  Please consider this a more robust example of why even assigning anonymous functions to variables is dangerous.

<h3>Jumbled Anonymous Functions - Our First Contestant</h3>

In Javascript, people use promises; it's a fact of life. Chris Kowal's Q library is a common library to see used in a variety of codebases and it works pretty well. Now, when someone writes an async function, it's common to return the promise so it can be "then'ed" against with appropriate behavior. The then function takes two arguments, a resolve state function and a reject state function. These basically translate into a success and error state.  I've created a common promise scenario so we have something to refer to.

<pre class="language:javascript">
    function doAsyncStuff(condition) {
        myAsyncFn(condition).then(function (data) {
            var moreConditions = {
                foo: data.foo,
                bar: data.bar.baz
            };
            return anotherAsyncFn(moreConditions);
        }, function (error) {
            logger.log(error);
        }).then(function (data) {
            updateState(data.newValue);
        }, function (error) {
            logger.log(error);
        });
    }
</pre>

<h3>Extract Method</h3>

The very first thing I see here that is a problem is, we have two functions logging an error. This behavior is not DRY which is a code smell and violates a commonly held best practice.  There is a known refactoring for this kind of redundancy called "extract method," or "extract function."  Technically we already have a function in place, so we can simply lift it and name it.  This will reduce our footprint and make this code cleaner already.  Let's see what this would look like with our logging behavior extracted.

<pre class="language:javascript">
    function logError (error){
        logger.log(error);
    }

    function doAsyncStuff(condition) {
        myAsyncFn(condition).then(function (data) {
            var moreConditions = {
                foo: data.foo,
                bar: data.bar.baz
            };
            return anotherAsyncFn(moreConditions);
        }, logError).then(function (data) {
            updateState(data.newValue);
        }, logError);
    }
</pre>

With this simple extraction, we now know more about what our function does and our code has become more declarative. Although logError is a one-line function, the fact that it does exactly one thing makes it both easy to reason about and easy to test. We can inject a fake logger and capture the logging side effect, which gives us direct insight into what it does.  Another benefit we get is that we can hoist this function further if need be, so we can reuse it across different modules or files.

<h3>Debugging Problems</h3>

Now we get to the real nitty gritty.  We have two anonymous functions which do not explicitly tell us what they do.  Instead, they just contain a much of code which performs references into an object. We run up against two different issues because of this.  First, the lack of declarative code means the next person who looks at this, which might be you, will have to sit and stare at this to understand what is happening.

Another, bigger issue than immediate comprehension is debugging.  Suppose we take this file and concatenate it with all of the other files in our project and then uglify the whole thing and deploy it out for use in someone's browser.  All of our code now lives on a single line and may not even have meaningful variable names anymore.  Now, suppose one of the data objects comes back null.  Our debugging error will contain something like "error at line 1:89726348976 <anonymous> cannot treat null as an object."

This is bad, bad news. Now we have an error which we can't easily identify or triage. One of the calls we are making no longer does what we think it does and it's causing our code to break... somewhere. Whoops! We can actually use the same pattern we used for our error logging to extract our methods and make sense of the madness. Let's take a look at what our refactoring would look like.

<pre class="language:javascript">
    function logError (error) {
        logger.log(error);
    }

    function getChainedCondition(data) {
        var moreConditions = {
            foo: data.foo,
            bar: data.bar.baz
        };
        return anotherAsyncFn(moreConditions);
    }
    
    function captureNewState (data){
        updateState(data.newValue);
    }
    
    function doAsyncStuff (condition){
        myAsyncFn(condition).then(getChainedCondition, logError)
                            .then(captureNewState, logError);
    }
</pre>

Now that we have lifted our last two functions out of our promise chain, everything makes a little more sense. Each of our behaviors is easy to reason about, we can test each function independently and all of our functions have a unique identifier in memory which saves us from the insidious debugger issue which can cost time and money.

There are other places we could go from here with our code to make it more fault tolerant, but that's outside of the scope of this article.  Instead, when you look at your code, see if you can easily understand what is going on.  Look at it like you've never seen it before.  How many anonymous functions are you using? How many different steps are crammed into a single function?

When you see this kind of muddy programming, think back on our reduction to simpler functions, avoid complex anonymous functions and think "extract and name."]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1035</wp:post_id>
		<wp:post_date><![CDATA[2016-01-06 08:00:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-06 16:00:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anonymous-functions-extract-and-name]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551409117;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1109;}i:1;a:1:{s:2:"id";i:1133;}i:2;a:1:{s:2:"id";i:683;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript Refactoring and Visual Studio Code</title>
		<link>http://www.chrisstead.net/archives/1039/javascript-refactoring-and-visual-studio-code/</link>
		<pubDate>Wed, 13 Jan 2016 16:00:10 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1039</guid>
		<description></description>
		<content:encoded><![CDATA[About a month ago, I started working at Hunter. Now, I have been pretty aware of refactoring, design patterns, good practices and common practices.  I don't always agree with what everyone else says or does, but I typically have a good reason to do it the way I do.  For whatever I do, Hunter does more so. I am a notorious function extractor and deduplicator, but never more than what I have seen or done in the last month, or until now.

C# has a bunch of really cool tools and toys, the likes Javascript developers have never known, until now. Over the last couple of weeks, I have been working on an extension for Visual Studio Code to help even the odds.  I'm no full-time tool builder, so I won't be matching the quality of Jet Brains or the like, but I'm giving it my best go.

In future posts I will start covering some of the discoveries I have made while building this plugin, but this week is all showboat. I haven't gotten my extension released on the Visual Studio Marketplace... yet. While that gets finished up, I do have everything together in a <a href="https://github.com/cmstead/js-refactor" target="_blank">github repository</a>.

Currently, I think the issues list is actually longer than the list of things JS Refactor (my extension) does, but what it does is kind of nifty. How many times do you discover you actually want to pull some code up and out of a function, into its own function? Probably a lot. The worst part of it all is all the goofing around you have to do with going to the top of the code, adding a function declaration, going to the bottom of the code and closing the function definition, making sure you matched all your braces and finally, when everything looks just right, you finally indent everything to the right place...

Nevermore!

JS Refactor has an action called "wrap in function." Wrap in function will ask for a function name, wrap up your code, and indent everything using your preferred editor settings.

I KNOW, RIGHT? It's awesome!

Seriously, though, wrap in function is nice except when it gets the job wrong. Sorry, it's not perfect, yet, but I am working on it. Along with that, there are also a wrap in anonymous function and extract to function actions.  These are a first go, so they still need some love, but they make things faster all the same.

Another part of this plugin, which generally works more reliably than the the actions, are the snippets.  Fortunately, the snippets rely on code written by the good folks on the Visual Studio Code team. The snippet functionality really shines through when you start writing lots of code. It's like having a miniature code generator living in your editor.

Currently I have a handful of snippets available for use and they work pretty darn well.  Strict declarations, functions, and a couple other things I have actually noticed a significant increase in the speed of code generation, which gives me more time to spend just thinking about the problem I am most interested in solving.

I am not going to give a rundown of all the features of JS Refactor, instead I would encourage you to go play with it. Take a look at the code that drives the whole thing. Give me feedback. It's part solving a problem and part learning how to even do the code analysis to make things work. I won't promise to solve all of the issues quickly, but I will sure try to solve them eventually.

So, until next week, please take a look at <a href="https://github.com/cmstead/js-refactor" target="_blank">JS Refactor</a> and use it on your code. I think you'll like it and I hope it will make your life easier. Next week we will start taking a look at building VS Code extensions and some of the stuff that I wish someone had put in a blog so to make the discovery process easier.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1039</wp:post_id>
		<wp:post_date><![CDATA[2016-01-13 08:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 16:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-refactoring-and-visual-studio-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1544067718;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1160;}i:1;a:1:{s:2:"id";i:806;}i:2;a:1:{s:2:"id";i:1082;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Started Writing Visual Studio Code Extensions: Action Handlers</title>
		<link>http://www.chrisstead.net/archives/1043/getting-started-writing-visual-studio-code-extensions/</link>
		<pubDate>Thu, 21 Jan 2016 00:19:50 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1043</guid>
		<description></description>
		<content:encoded><![CDATA[I started writing a Visual Studio Code extension about two and a half weeks ago and, as is little surprise, writing an extension with new, uncharted functionality takes more knowledge than you can find in the basic tutorial for creating a hello world extension. As I learned, I thought, I should write what I learned down so other people would have a little more illumination than I had.

If you haven't read the Hello World tutorial, <a href="https://code.visualstudio.com/docs/extensions/example-hello-world" target="_blank">you should</a>. It has a handy step-by-step recipe for creating a baseline extension. No, really, go read it. I'll wait.

Great, now that you have Hello World set up, we're ready to start really building something. So the first thing that I ran into was I wanted to change things a little and see if everything still worked. Text changes were obvious, so I decided I wanted to scrape something out of the editor and show that instead.

I made small changes... and broke the extension.

The first challenge I ran into is, these extensions give you almost no visibility into what you are doing.  You can use the debugger, but, if you are like me, you probably have one screen to work on, so you will have a lot of flipping back and forth to spot the broken stuff.  The best friend you have during this entire process is your debugger output. Log to it. A lot.

This is kind of like old school web development. If you want to see what you are doing, use console log. If you want to see what the data looks like you are tinkering with, use console log.  When you really need to dig deep, hey, you're already in an editor!

Anyway, like I said, I broke my extension right away. The first thing I did wrong was I messed up the action name. Don't worry about what a disposable function is for now. We can cover that next time.  The important issue is I mismatched my action name. Let's take a look at a bit of the code in my main extension file.

<pre class="language:javascript">
context.subscriptions.push(vscode.commands.registerCommand('cmstead.jsRefactor.wrapInCondition', function () {
    wrapInCondition(vscode.window.activeTextEditor);
}));
</pre>

<h3>Action handler names</h3>

Our action name tells VS Code what our action is named. Our action name is shared between the extension file where we set up our action behaviors and two locations in our package file. I may have missed it, but I didn't see anything in the documentation regarding lining up the name in several locations. Here's what it looks like in the package file:

<pre class="language:json">
"activationEvents": [
    "onCommand:cmstead.jsRefactor.wrapInCondition"
],
"commands": [
    {
        "command": "cmstead.jsRefactor.wrapInCondition",
        "title": "Wrap In Condition",
        "description": "Wrap code in a condition block"
    }
]
</pre>

All of these separate lines need to match or when you try to test run your extension, your new action won't work. This is surprisingly hard to debug. There is no unit test, scenario or any other process to properly check that all of the command name strings properly match. This is probably the first problem you are going to run into.

If you try to run a named action that isn't fully declared, you will get an error.  "No handler found for the command: 'cmstead.jsRefactor.wrapInCondition'. Ensure there is an activation event defined, if you are an extension."

The takeaway of today's post is this: if you see this handler error, check that your action is declared in your extension Javascript, in actionEvents and in commands.  If any of these identifiers are missing, your action will fail.  By double checking your action declarations, you will have a smoother experience getting your extension up and running. Happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1043</wp:post_id>
		<wp:post_date><![CDATA[2016-01-20 16:19:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-21 00:19:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-writing-visual-studio-code-extensions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551414511;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1082;}i:1;a:1:{s:2:"id";i:1039;}i:2;a:1:{s:2:"id";i:1091;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Math for Programmers: Arrays, Objects and Sets</title>
		<link>http://www.chrisstead.net/archives/1050/math-for-programmers-arrays-objects-and-sets/</link>
		<pubDate>Wed, 27 Jan 2016 16:00:03 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1050</guid>
		<description></description>
		<content:encoded><![CDATA[I've had conversations with a programmers with varied backgrounds and experience levels. One thing which has come up in several conversations is math, and how much math a programmer needs to be effective. I have a formal background in math, so I tend to lean heavily on the side of more math is better. Other programmers argue that only select topics in math are important to make a professional programmer effective.

Arguably, for day to day programming needs, it is unlikely you will need to demonstrate a strong understanding for the proof of indefinite integrals over n-space, however there are topics which seem to come up often and would be useful for a programmer to understand.  I decided that the first in the series of math for programmers should cover something that ever programmer has to think about at one time or another: sets.

If you are working with data coming from persistent storage like a database, sets should be your bread and butter. Most of your time will be spent thinking about how sets work together and how to combine them to capture a snapshot of the data you need. On the other hand, if you are working with data at another layer somewhere above data access, your interactions with sets are going to be a little more subtle. Arrays and maps are sets of data with added restrictions or rules, but they are, at their core, still sets in a very real way.

If we look at an array of integers, it's not immediately obvious you are working with a set.  You could, in theory, have a duplicate number in an array.  Arrays also have the characteristic of being ordered.  This means that each element will come out of an array in the same order each time.  Let's take a look at an array of integers.

<pre class="language:javascript">
var myIntegers = [1, 2, 3, 4, 2, 5, 1, 1, 7];
</pre>

Honestly, this array is most reminiscent of a vector in mathematics. This could easily describe a point in a nine-dimensional space, which is kind of hard to get a visual on.  Nevertheless, we can do just a little bit of reorganization and turn this into a set which adheres to all the normal rules a given mathematical set has.

<h3>Rules of a Set</h3>

All sets are unordered.  This means two sets are equal if both sets contain the same members, regardless of the order.  For instance, {1, 2, 3} and {3, 2, 1} are the same set since they each contain the members 1, 2 and 3 and ONLY those members. Regardless of the order chosen to represent the elements, the set is guaranteed to be unique given the elements it contains alone.

Sets may not contain duplicate values.  Each value in a set is uniquely represented, so {1, 1, 2, 3} would be correctly represented as {1, 2, 3}. This uniqueness makes sets well defined. Well defined simply means our sets are unambiguous, or any set can be constructed to be clearly defined and distinctly represented.

Sets may be constructed with individual values, like our set of integers, or with more complex structures like a set of sets or a set of vectors. This means {{1}, {2}, {3}} is not the same as {1, 2, 3} since the first set is a set of sets containing 1, 2 and 3 respectively, while the second set is a set containing the numbers 1, 2 and 3.  Understandably, this is kind of abstract, so think about an array of arrays, versus an array containing integers. The relation is quite close.

<h3>Thinking of Arrays as Sets</h3>

Let's take another look at our original array. If we were to take our array and interpolate it into an object literal instead we can start to see the relation between a set and an array.  Let's see what our object literal would look like.

<pre class="language:javascript">
var myIntegerObject = {
    0: 1,
    1: 2,
    2: 3,
    3: 4,
    4: 2,
    5: 5,
    6: 1,
    7: 1,
    8: 7
};
</pre>

Now we can see how each element in our array maintains uniqueness.  Our object has a key, which represents the array index and a value, which is the original value in an array. This data formation makes creating a set trivial.  We can describe each value in our array as a vector containing two values, <index, value>.  By using vector notation, we can make our array conform exactly to the definition of a set.  Our array can be rewritten as a set this way, {<0, 1>, <1, 2>, <2, 3>, <3, 4>, <4, 2>, <5, 5>, <6, 1>, <7, 1>, <8, 7>}.

This vector notation helps us to tie together two separate data structures into a single, unified mathematical form. By understanding this form, we can see how values could be easily stored and organized in memory to either be sequential, or fragmented throughout memory with pointers stored in a sequential data structure for faster access.

Being able to move between the array or object formations we use day to day to set notation gives us a lot of power.  We can abstract away the physical computer and think less about the language constructs, in order to solve data set problems in a language agnostic way first and then weave the solution back into our code in order to improve our thought process and, ideally simplify the logic we use to organize our thoughts in a program.

This is a first slice cutting across programming and its relation to math. There are techniques which can be used to dissect problems and solve them directly without code as well as different programming paradigms which abstract away the nuts and bolts of loops, conditions and other detail-related behaviors in favor of a more general approach, simply declaring the operation to be done and then working with the result.  We will explore these techniques and the math related to them in upcoming posts.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1050</wp:post_id>
		<wp:post_date><![CDATA[2016-01-27 08:00:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-27 16:00:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[math-for-programmers-arrays-objects-and-sets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407718;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:896;}i:1;a:1:{s:2:"id";i:1142;}i:2;a:1:{s:2:"id";i:864;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Math for Programmers: Union and Intersection</title>
		<link>http://www.chrisstead.net/archives/1054/math-for-programmers-union-and-intersection/</link>
		<pubDate>Wed, 03 Feb 2016 16:00:23 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1054</guid>
		<description></description>
		<content:encoded><![CDATA[Last week we talked about sets and how they relate to arrays. This week we will take a look at how to interact with arrays and apply two common mathematical operations on them to produce new, refined sets of data with which we can interact.

Two of the most common and well known actions we can take on sets are union and intersection. The union operation combines two sets and creates a new single set containing the elements of each of the original sets. Intersection is also a combinatorial operation, but instead of combining all elements, it simply returns a set containing the shared elements of each set.

<h3>Uniqueness</h3>

Before we can address union and intersection, we have to deal with the state of uniqueness.  Last week we looked at how an array can be converted into a set by viewing each index and value as a vector.  Though this is useful for seeing the relation between mathematical sets and arrays in programming, it is not quite so useful when trying to actually accomplish set operations.

The biggest issue we encounter when looking at an array is that it is more closely related to a vector in nature and behavior.  If we discard the importance of array ordering, it becomes a little more set like.  Let's take a look at what this means.

<pre class="language:javascript">
    // ≁ -- mathematically dissimilar
    // ~ -- mathematically similar

    var myVector = [1, 3, 2, 5, 7, 1, 1, 2];
    myVector ≁ {1, 2, 3, 5, 7}; // This is true since a vector is ordered and requires all elements

    var myArray = [1, 3, 2, 5, 7];
    myArray ~ {1, 2, 3, 5, 7}; // true because our array contains only unique elements
</pre>

Our second array closely matches our needs for a set, so it would be ideal to have a function which takes an array of values and returns a list with all duplicated values removed. We can annotate this function like this: (array) -> array

Although this function has been implemented in several libraries, it is easy enough to create we'll just build it here. This not only gives us insight into how a "unique" function could be built, but it also gives us a vanilla implementation of our functionality so as we build on top of our behaviors, we know where we started and how we arrived at our current place.

<pre class="language:javascript" id="helper-functions">
    function addToMap (map, value){
        map[value] = true;
        return map;
    }

    function buildSetMap (list){
        return list.reduce(addToMap, {});
    }

    function unique (list){
        return Object.getKeys(buildSetMap(list));
    }    
</pre>

Now we have a clear way to take any array and create an array of unique values in linear, or O(n), time. This will become important as we move forward since we want to ensure we don't introduce too much overhead. As we introduce new functions on top of unique, it would be easy to loop over our loop and create slow functions which can be disastrous when we rely on these functions later for abstracted behavior.

<h3>Union</h3>

To really talk about the union operation it can be quite helpful to take a look at what a union of sets might look like. In words, union is an operation which takes two sets and creates a new set which contains all members, uniquely. This means, the union of {1, 2, 3} and {2, 3, 4} would be {1, 2, 3, 4}.  Let's look at a Venn diagram to see what this means graphically.

<img src="/wp-content/uploads/images/union-and-intersection/union.png" alt="Venn diagram of a union of sets" />

For small sets of values, it is pretty easy to perform a union of all values, but as the sets grow, it becomes much more difficult.  Beyond this, since Javascript does not contain a unique function, i.e. the function we built above, nor does it contain a union function, we would have to build this behavior ourselves.  This means we have to think like a mathematical operator to create our function.  What we really need is a function with accepts two sets and maps them to a new set which contains the union of all elements.  Using a little bit of visual mathematics, our operation looks like the following:

<img src="/wp-content/uploads/images/union-and-intersection/union-function.png" alt="Black box diagram of a union function" />

This diagram actually demonstrates one of the core ideas behind functional programming as well as giving us a goal to work toward.  Ultimately, if we had a function called union which we could use to combine our sets in a predictable way, we, as application developers, would not need to concern ourselves with the inner workings.  More importantly, if we understand, at a higher abstraction level, what union should be doing we will be able to digest, fairly immediately, what our function should take as arguments and what it will produce.  Our union function can be annotated as (array, array) -> array. Let's look at the implementation.

<pre class="language:javascript">
    function union (lista, listb) {
        return unique(lista.concat(listb));
    }
</pre>

With our unique function already constructed, this is a pretty trivial function to implement.  There is, of course an item of interest here. Union is almost done for us by the concat function. Concat makes the same assumption our original exploration of converting an array to a set does: arrays are sets of vectors, so a concatenation would be an introduction of two sets of vectors into a new set, reassigning the indices in each vector to map to a new unique set.

This concatenation behavior can be quite useful, but it is not a union operation. In order to perform a proper union of the values in each array we will need to ensure all values of the returned array are actually unique.  This means we need to execute a uniqueness operation on the resulting set to get our array which is similar to a set.  I.e. if we have an array representing set A, [A], and an array representing set B, [B], then union([A], [B]) ~ A &Union; B.

<h3>Intersection</h3>

Much like the union operation, before we try to talk too deeply about the intersection operation, it would be helpful to get a high-level understanding of what intersection means. Intersection is an operation which takes two sets and creates a new set which contains only the shared elements of the original sets.  This means the intersection of {1, 2, 3} and {3, 4, 5} is {3}.  Visually, intersection looks like the following diagram.

<img src="/wp-content/uploads/images/union-and-intersection/intersection.png" alt="Venn diagram of an intersection of sets" />

The darker region represents the intersection of sets A and B, which, from our first example, is a set containing only the value 3, or {3}.  Much like the union operation, we can create a function intersect which takes two sets and returns a new set containing the intersection.  We can diagram this in the same way we did with union.

<img src="/wp-content/uploads/images/union-and-intersection/intersection-function.png" alt="A black box diagram of an intersection function" />

This diagram shows us the close relation between intersect and union functions. The annotation for our intersection function is, actually, identical to our union function: (array, array) -> array. This means they share the same contract and could be used on the same sets to produce a result which, incidentally, will match the contract for any function which takes a set of values as a list.  Let's have a look at what the implementation of intersect looks like in Javascript.

<pre class="language:javascript">
    function addIfIntersect (map, accumulator, value){
        return map[value] ? accumulator.concat([value]) : accumulator;
    }

    function intersect (lista, listb){
        var mapb = buildSetMap(listb);
        return unique(lista).reduce(addIfIntersect.bind(null, mapb), []);
    }
</pre>

As expected, the difference between union and intersection is in the details. Where union performed the combination before we performed a unique operation, intersections can only be taken if all of the values are already unique, This means intersections are slightly more computationally complex than a union, however, in the large, intersection is still a linear operation.  We know this by performing the following analysis:

<ol>
<li>unique is O(n) as defined before</li>
<li>reduce is O(n) by the nature of reduction of a list</li>
<li>buildSetMap is also O(n) as it was the defining characteristic of unique.</li>
<li>intersect is the sum of three O(n) operations, or intersection performs 3n operations, making it, also, O(n)</li>
</ol>

This algorithmic analysis is helpful in understanding the general characteristic of a function and how it will impact execution time in a larger system.  Since union and intersect are both O(n) functions, we can easily use them in a chained way, resulting in a new O(n) function. What this also tells us is, union and intersection are sufficiently performant for small sets of data and acceptable for medium sets.  If our sets get large enough we might have to start looking at ways to reduce the number of computations needed to complete the process, but that's another blog post.

<h3>Summary</h3>

We can actually use our union and intersect functions together to quickly perform complex mathematical behavior on even non-optimal arrays. Since these functions perform normalization on our sets of data, we can use rather poorly defined arrays and still get meaningful results. Let's take a quick look at a small example where we set A, B and C as poorly defined arrays and then perform A &xcup; B &xcap; C.

<pre class="language:javascript">
    var A = [1, 2, 4, 3, 7, 7, 8, 3],
        B = [5, 4, 7, 9, 4, 10],
        C = [1, 2, 3, 2, 4];

    intersect(union(A, B), C); // [1, 2, 3, 4]
</pre>

In this post we discussed performing union and intersection operations on arrays of data, as well as implementations for each and their performance characteristics.  By understanding these core ideas, it becomes easier to understand how data can be quickly and descriptively modified programmatically. This core understanding is useful both for working with arrays inside of your application as well as better understanding the way data is interrelated in database considerations. Now, go munge data and make it work better for you!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1054</wp:post_id>
		<wp:post_date><![CDATA[2016-02-03 08:00:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-03 16:00:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[math-for-programmers-union-and-intersection]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1544120297;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1074;}i:1;a:1:{s:2:"id";i:1050;}i:2;a:1:{s:2:"id";i:1086;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>603</wp:comment_id>
			<wp:comment_author><![CDATA[Math for Programmers: Difference of Sets]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/1074/math-for-programmers-difference-of-sets/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-02-10 08:02:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-02-10 16:02:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] post we discussed union and intersection of sets. These two functions are common and well used, so they are quite important to understand at [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1455120133.1757829;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1455402732.450067;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Math for Programmers: Difference of Sets</title>
		<link>http://www.chrisstead.net/archives/1074/math-for-programmers-difference-of-sets/</link>
		<pubDate>Wed, 10 Feb 2016 16:00:04 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1074</guid>
		<description></description>
		<content:encoded><![CDATA[Last post we discussed <a href="http://www.chrisstead.com/archives/1054/math-for-programmers-union-and-intersection/" target="_blank">union and intersection</a> of sets. These two functions are common and well used, so they are quite important to understand at a deep level, especially if you work with databases on the regular. It can also be helpful to understand these behaviors if you have lots of sets of simple data which need to be combined in a straightforward way.

<h3>Difference Explanation</h3>

One last, critical, function which is typically used on two or more sets is the difference operation. The difference of sets can be characterized as <em>A - B</em> where the outcome is the set A with all elements shared with set B removed. We can visualize the difference of sets with the following diagram.

<img src="/wp-content/uploads/images/difference-of-sets/difference.png" alt="Venn diagram of a difference of sets" />

Unlike union and intersection which are commutative, the difference of two sets is not.  This means that <em>A &xcap; B</em> and <em>B &xcap; A</em> are the same operation; the same can be said for <em>A &xcup; B</em> and <em>B &xcup; A</em>. The difference <em>A - B</em> is not the same as <em>B - A</em>. We can create a concrete example as follows.

<pre class="language:default">
A = {1, 2, 3, 4, 5}
B = {3, 4, 5, 6, 7}

A - B = {1, 2}
B - A = {6, 7}
</pre>

Clearly these two differences are distinct and different. It is quite helpful to understand the order result of set difference when trying to apply functionality to it. we can create a function, called difference, and apply it to two sets.  The action would behave like the following diagram:

<img src="/wp-content/uploads/images/difference-of-sets/difference-function.png" alt="Visualization of a difference function" />

In order to apply our difference function, we need to use a couple of <a href="http://www.chrisstead.com/archives/1054/math-for-programmers-union-and-intersection/" target="_blank">helper functions</a> we introduced in the last post: unique and buildSetMap. These will be important for isolating unique elements and eliminating or keeping them according to our difference functionality.

<h3>Predicates as Sets</h3>

We can describe a set by way of a predicate function.  Effectively, anything which matches the condition of the predicate can be viewed as part of the set while anything which does not match the predicate is not included.  A good example of this kind of set partitioning would be the set of even numbers.  We could pick values with a function called isEven, which would give us a set like this: {2, 4, 6, 8, ...}.

We can describe a more general purpose predicate which simply tests if a value is contained in a set built by our buildSetMap function.  The behavior would be simple: test that any value which is provided exists in our set and does not resolve to undefined. Let's have a look.

<pre class="language:javascript">
    function isInSet (set, value){
        return typeof set[value] !== 'undefined';
    }
</pre>

We can, now, easily test if a value is contained in a set.  This simplifies our problem significantly.  Now all we really care about to take a difference is whether a given value is not contained in our set; i.e. then it is part of the difference.

Javascript has a function, filter, which is very closely related to both the intersection and difference of sets.  If we choose a predicate which includes all values contained in a set, filter will return the intersection of the set of all values which match our predicate value and the set of values we are testing. If, on the other hand, we use a predicate which only keeps values which are NOT in the set, we get the difference instead.

We can use the factory pattern to keep our code clean and readable, while building a useful difference predicate function. Let's have a look at the code that makes this work.

<pre class="language:javascript">
    function diffFactory(set, value) {
        return function (value) {
            return !isInSet(set, value);
        };
    }
</pre>

<h3>Implementing Difference Function</h3>

Now we are ready to take the difference of two sets. We have a difference predicate factory, a unique function and a buildSetMap function. Bringing filter into the mix means the code almost writes itself. Let's build our difference algorithm.

<pre class="language:javascript">
    function difference(lista, listb) {
        return unique(lista).filter(diffFactory(buildSetMap(listb)));
    }
</pre>

This difference function will produce the difference of any two lists of primitive values. This means our original example of <em>A - B</em> can be done with a small, easy to read line of code; <em>difference(A, B);</em>.

<h3>Symmetric Difference Explanation</h3>

There is another difference operation which has a special name in computer science, the symmetric difference. Mathematically a symmetric difference can be written one of two ways, <em>(A - B) &xcup; (B - A)</em> or <em>(A &xcup; B) - (A &xcap; B)</em>. Both of these operations resolve the same way, which can be visualized by the following diagram.

<img src="/wp-content/uploads/images/difference-of-sets/symmetric-difference.png" alt="Venn diagram of a symmetric difference of sets" />

To make this more clear, let's have a look at a concrete example of a symmetric difference using our original sets A and B.

<pre class="language:default">
A = {1, 2, 3, 4, 5}
B = {3, 4, 5, 6, 7}

symmetricDifference(A, B) = {1, 2, 6, 7}
</pre>

What all of this really means is the symmetric difference takes everything from sets A and B and excludes the elements they share. A common example is a graph of students taking Math and English but none of the students which are taking both. We can create a function symmetricDifference which performs this operation and lives between the definition of sets A and B and the resulting set.

<img src="/wp-content/uploads/images/difference-of-sets/symmetric-difference-function.png" alt="Visualization of a symmetric difference function" />

<h3>Symmetric Difference Implementation</h3>

To create our implementation, I opted for the difference of the union and intersection of A and B. This means we will first compute the union and intersections of our two sets and then take the difference of the two resulting sets.

<pre class="language:javascript">
    function symmetricDifference(lista, listb) {
        return difference(union(lista, listb), intersect(listb, lista));
    }
</pre>

Once again we see the code practically writes itself. Since we already have functions to perform each of these operations on their own, all we have to do is simply chain them together in a meaningful way and our output simply emerges with nearly no effort at all.

<h3>Summary</h3>

This closes up the introduction of basic sets and operations including algorithms for acting on lists as sets of data. We discussed how lists and maps relate to sets, what a union and intersection are as well as how to write linear implementation of union and intersection algorithms.  We addressed how sets can be defined conceptually with predicate functions and how they interact with concrete sets of data in our programs. Finally, we looked at the difference and symmetric difference operations as well as functions which perform our difference functions in linear time. With all of this closed up, we are ready to start performing more complex manipulations of data using higher order functions which we will discuss in upcoming posts. Until then, keep your code clean and use sets to make your programs better!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1074</wp:post_id>
		<wp:post_date><![CDATA[2016-02-10 08:00:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-10 16:00:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[math-for-programmers-difference-of-sets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures-foundation"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1543937234;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1054;}i:1;a:1:{s:2:"id";i:992;}i:2;a:1:{s:2:"id";i:1050;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Visual Studio Code Extensions: Editing the Document</title>
		<link>http://www.chrisstead.net/archives/1082/visual-studio-code-extensions-editing-the-document/</link>
		<pubDate>Wed, 17 Feb 2016 16:00:23 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1082</guid>
		<description></description>
		<content:encoded><![CDATA[I have been supporting an extension for Visual Studio Code for about a month now. In that time I have learned a lot about building extensions for an editor and static analysis of Javascript. Today is more about the former and less about the latter.  Nevertheless, I have found that creating snippets, modifying the status bar and displaying messages is trivial, but modifying the current document is hard when you don't know how to even get started.

The other important thing I have noted about writing extensions for VS Code is, although the documentation exists and is a, seemingly, exhaustive catalog of the extension API, it is quite lacking in examples and instructions. By the end of this post I hope to demystify one of the most challenging parts of document management I have found so far.

<h3>The VSCode Module</h3>

The first thing to note is anything you do in VS Code which interacts with the core API will require the vscode module. It might seem strange to bring this up, but it is rather less than obvious that you will have to interact with the vscode module often.

Under the hood, the vscode module contains pretty much everything you need to know about the editor and its current state. The module also contains all of the functions, objects and prototypes which you will need in order to make any headway in your code whatsoever.  With that in mind, there are two ways you can get this module or any of its data into your current solution.  The first option is to require it like any other node module.

<pre class="language:javascript">
var vscode = require('vscode');
</pre>

As of the latest release of VS Code, you now have to explicitly specify the vscode module in dev-dependencies in your packages.json file. Below is what my dependencies object looks like:

<pre class="language:javascript">
  "devDependencies": {
    "chai": "^3.4.1",
    "mocha": "^2.3.4",
    "mockery": "^1.4.0",
    "sinon": "^1.17.2",
    "vscode": "^0.11.x"
  },
</pre>

For now, don't sweat the other stuff I have required. It is all test library stuff, which we will look at in a future post. Anyway, that last line is my vscode requirement. By adding this dependency, vscode will be available in your development environment, which makes actually getting work done possible. To install and include vscode, copy and paste the following at the command line inside your extension project:

<pre class="language:default">
npm install vscode --save-dev
</pre>

<h3>Making a Document Edit</h3>

The reason it was important to briefly cover the actual vscode module is, we are going to live on it for the rest of the post. It will be in just about ever code sample from here to the end of the post.

So...

By reading the VS Code extension API it is really, really easy to get lost when trying to push an edit into the view. There are, in fact, 5 different object types which must be instantiated in order and injected into one another to create a rather large, deeply nested edit object hierarchy. As I was trying to figure it out, I had to take notes and keep bookmarks so I could cross-compare objects and sort out which goes where.

I will start off by looking at the last object in the sequence and then jump to the very first objects which need to be instantiated and work to our final implementation. When you want to make an edit to the code in the current document, you need to create a new WorkspaceEdit which will handle all of the internal workings for actually propagating the edit.  This new WorkspaceEdit object will be passed, when ready, into an applyEdit function.  Here's what the final code will look like, so it is clear what we are working toward in the end:

<pre class="language:javascript">
    function applyEdit (vsEditor, coords, content){
        var vsDocument = getDocument(vsEditor);
        var edit = setEditFactory(vsDocument._uri, coords, content);
        vscode.workspace.applyEdit(edit);
    }
</pre>

In this sample code, the _uri refers to the document we are interacting with, coords contains the start and end position for our edit and content contains the actual text content we want to put in our editor document. I feel we could almost spend an entire blog post just discussing what each of these pieces entails and how to construct each one. For now, however, let's just assume the vsEditor is coming from outside our script and provided by the initial editor call, the coords are an object which we will dig into a little more soon, and content is just a block of text containing anything.

<h3>The Position Object</h3>

In our previous code sample, there is a function called setEditFactory. In VS Code there are two types of document edits, set and replace. So far I have only used a set edit and it seems to work quite nicely. With that in mind, however, there is a reason we are using a factory function to construct our edit. A document edit contains so many moving parts it is essential to limit exposure of the reusable pieces to the rest of the world since they largely illuminate nothing when you are in the middle of trying to simply add some text to the document.

Let's actually dig into the other end of our edit manufacture process and look at the very first object which need to be constructed in order to actually produce a change in our document: the position. Every edit must have a position specified. Without a position, the editor won't know where to place the changes you are about to make.

In order to create a position object, you need two number values, specifically integers. I'm not going to tell you where, exactly,  to get these numbers because that is really up to the logic of your specific extension, but I will say that a position requires a line number and a character number. If you are tinkering with code in your own extension, you can actually make up any two numbers you want as long as they exist as coordinates in your document. line 5, char 3 is a great one if it exists, so feel free to key the values in by hand to get an idea of how this works.

Anyway, once we have a line and a character number, we are ready to construct a position.

<pre class="language:javascript">
    function positionFactory(line, char) {
        return new vscode.Position(line, char);
    }
</pre>

That's actually all there is to it. If you new up a Position object with a line and character number, you will have a new position to work with in your extension.

<h3>The Range Object</h3>

The next object you will need to display your document change is a range object. The range object, one would think, would simply take bare coordinates.  Sadly this is not the case. What range actually takes is a start and end position object. The range tells VS Code what lines and characters to overwrite with your new content, so it must go from an existing line and character to an existing line and character, otherwise known as a start position and end position. Here's how we create a range object.

<pre class="language:javascript">
    function rangeFactory(start, end) {
        return new vscode.Range(start, end);
    }
</pre>

So far our factories are nice and clean, which makes their intent pretty obvious. This is handy because it gets really strange and hard to follow quickly without some care and feeding of clean code. Anyway, our range takes two positions, so we provide them as named above, start and end.

<h3>The TextEdit Object</h3>

The TextEdit object is where things start to really come together. Now that we have a range made of two positions, we can pass our range and our text content through to create a new edit object. The edit object is one of the key objects we need to actually perform our document change. It contains almost all of the necessary information to actually make a document change.  Let's look at how to construct a TextEdit object.

<pre class="language:javascript">
    function textEditFactory(range, content) {
        return new vscode.TextEdit(range, content);
    }
</pre>

Keep in mind, though we have only written a few short lines of code we have now constructed an object tree containing 4 nested objects. Are you still keeping up?

<h3>Building an Edit</h3>

Now that we have gotten through the nitty gritty of constructing individual objects for our tree, we are ready to actually build a full edit and pass it back to the caller. This next function will make use of our factories in order to construct an object containing all dependencies in the right nesting order.

Does anyone else feel like we are putting together a matryoshka doll?

Anyway our next function will also follow the factory pattern we have been using so we get a clean string of function calls all the way up and down our stack which will, hopefully, keep things easy to follow.

<pre class="language">
    function editFactory (coords, content){
        var start = positionFactory(coords.start.line, coords.start.char);
        var end = positionFactory(coords.end.line, coords.end.char);
        var range = rangeFactory(start, end);
        
        return textEditFactory(range, content);
    }
</pre>

As you can see, we are assembling all of the pieces and the stacking them together to build our document edit. The fully constructed edit will contain all of the instructions VS Code needs to modify the selected document. This will be useful as we construct our next object to interact with.

Yes, there's more.

<h3>The WorkspaceEdit Object</h3>

In order to introduce our edit into a document, we need to build a workspace edit to interact with. This workspace edit is, you guessed it, another object. A workspace has no required dependencies up front, so we are safe to construct this bare and interact with it later.  Here's our factory:

<pre class="language:javascript">
    function workspaceEditFactory() {
        return new vscode.WorkspaceEdit();
    }
</pre>

This new workspace edit is where we will do our final setup before applying our edits into the document we started with, originally. Once we have a workspace edit, we can perform behaviors like set and replace.  Here's our last factory of the day, where we actually kick off the process. This actually brings us full circle, back to our edit application we looked at in the very first example.  Let's look at the code.

<pre class="language:javascript">
    function setEditFactory(uri, coords, content) {
        var workspaceEdit = workspaceEditFactory();
        var edit = editFactory(coords, content);

        workspaceEdit.set(uri, [edit]);
        return workspaceEdit;
    }
</pre>

Now we can see where all of our coordinates, content and that mysterious uri went. Our setEditFactory takes all of our bits and pieces and puts them together into a single edit which we can then apply to our workspace edit object, which is then passed back for the program to operate on.

<h3>Summary</h3>

Even after having figured this out from the VS Code documentation and implementing it in an extension, this is a lot to keep in your head. The bright side of all this work is, if done correctly, this can be wrapped up in a module and squirreled away to just be used outright. The surface area on this module is really only a single function, setEditFactory. This means, once you have it running correctly, it should be simple to call a single function with the right parts and get back a fully instantiated, usable object which can be applied to the editor.

Hopefully this is useful for someone. Identifying this and putting it all together with clear intent was a challenge with no examples. If there were ever one place I would complain about VS Code it is the documentation. I hope my post helps clear up the obscurities and makes it easier for people to dig into making their own extensions or contributing to an extension someone else has built.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1082</wp:post_id>
		<wp:post_date><![CDATA[2016-02-17 08:00:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-17 16:00:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visual-studio-code-extensions-editing-the-document]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="internet-culture"><![CDATA[Internet Culture]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551664166;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1043;}i:1;a:1:{s:2:"id";i:1039;}i:2;a:1:{s:2:"id";i:1160;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>604</wp:comment_id>
			<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[social@qedgaming.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[101.164.203.106]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-03-11 04:10:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-03-11 12:10:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I still can't get this to work, I get a 'getDocument undefined' error. I think you missed a step. How do you actually call the function to add text to a document? I'm doing this:
applyEdit(editor,0,0,"Hello"); where editor is var editor = vscode.window.activeTextEditor;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1457698205.8659079;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1457930784.78161;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>605</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[steadster@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.113.68.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-03-13 20:48:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-03-14 04:48:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry about that!  I missed a convenience function which is really important to get the whole thing working:

<pre class="language:javascript">
function getDocument (vsEditor) {
    return typeof vsEditor._documentData !== 'undefined' ? vsEditor._documentData : vsEditor._document
}
</pre>

This is particularly important because the method for accessing the document changed between 0.10.x and 0.11.x, so this gives you backwards compatibility.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>604</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1457930932.579998;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Types and Functions in Javascript</title>
		<link>http://www.chrisstead.net/archives/1086/types-and-functions-in-javascript/</link>
		<pubDate>Wed, 24 Feb 2016 16:00:02 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1086</guid>
		<description></description>
		<content:encoded><![CDATA[A while ago we talked about <a href="http://www.chrisstead.com/archives/949/data-types-objects-and-creating-a-new-generic-type/" target="_blank">creating a custom type in Javascript</a> using object inheritance. There were a couple of fundamental issues with this post: first it was fairly academic and was unlikely to be applicable to the real world; second we didn't actually do anything with our resulting type.

I decided it was time to revisit the topic, spending less time on the hows of creating a new type more time on the whys. I created a gist with a full definition of a Vector object so we could start looking at how we can interact with a type and why it's valuable to isolate object-oriented patterns to type system related activities rather than bundling everything in a class because "it's the way things are done."

<script src="https://gist.github.com/cmstead/504184633bf0d5b402ff.js"></script>

<h3>A First Look</h3>

Something you might note right away is we have done some fancy finger work with our definition and created a combination of inheritable behaviors and static functions. This gives us the ability to fall back to the factory pattern for our object instead of instantiating it directly in the middle of our code. This kind of action is similar to how someone writing Scala might handle an object.

In fact this very kind of behavior is precisely the reason I really, REALLY want to love Scala. I don't but I want to.

Vector also has both valueOf and toString methods which override the base object definition behaviors. This is really important since we don't want some giant object output blob if we stringify our vector. Really, we want something akin to the mathematical representation, so if we can get this kind of behavior: <i>Vector.build(1, 2, 3).toString(); // &lt;1,2,3&gt;</i>

In much the same way we want a sane output when we call toString, valueOf should also give us something useful. Instead of returning the whole vector object, which is not easy to interact with in code, it would be preferable if valueOf actually gave us a meaningful data structure like an array.  ValueOf will be especially important as we get into interacting with our vector.

Finally, we want our vector to be something we can interact with directly if necessary. Hiding the data away into a list somewhere is far less useful than putting it somewhere predictable.  By using numeric indices on our object, if we reference <i>Vector.build(4, 5, 6)[1];</i> we get 5, which is what we were hoping for. Our Vector object is looking less and less like a classical object and more like a real type with strong intention driving the API.

<h3>Writing Functions for Vectors</h3>

Vectors are a mathematical construct which means we have real actions we might want to do with them. In a classical approach to development, we would start adding methods to our Vector and extending the API through dumping a bunch of functionality on our final output data type.

The real world doesn't work like that. A vector is simply a set of ordered values describing a mathematical idea. Vectors don't actually do anything and they definitely don't add or magnitude. At most it makes sense to ask a vector its length and a point at an index. Anything else is really an action we do TO a vector.

A common action to take with a vector is to figure out its size, better known as its magnitude. This is a pretty simple process and is directly related to the Pythagorean theorem we learned in grade school: a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup> or (a<sup>2</sup> + b<sup>2</sup>)<sup>1/2</sup> = c.

Let's take an implementation of a generic magnitude function for a vector.

<pre class="language:javascript">
    function addSquare(sum, value) {
        return sum + Math.pow(value, 2);
    }

    // (Vector) -> number
    function magnitude(vector) {
        var sumOfSquares = vector.valueOf().reduce(addSquare, 0);

        return Math.pow(sumOfSquares, 0.5);
    }

    // Magnitude example
    var vector = Vector.build(3, 4);
    magnitude(vector); // 5
</pre>

I'd like to point out the annotation above the magnitude function.  What this says is magnitude is a function which takes a vector and returns a number. The reason this annotation is so important is it describes an action we can take on a Vector type which will return a usable value. Our function is not interested in the object-orientedness of Vector, it assumes Vector is a type just like any other and acts upon it accordingly.

The other particularly important item is where we refer to <i>vector.valueOf()</i>.  Vectors don't get nice functions like reduce, since they aren't inherited from the Object prototype.  Instead, valueOf gives us a Javascript core data type we can interact with. This means we can limit the amount of custom code we must write in order to actually accomplish work with our vector.

<h3>Expanding Our Vector Functions</h3>

A better example, even, than magnitude when working with vectors is the concept of adding vectors together.  In a purely object-oriented world, adding vectors involves either creating an object which has no real relation to vectors aside from the purpose of housing functions which act on vectors, or adding an add method to our vector creating a syntax that looks like this: <i>vector1.add(vector2)</i>.

At best this kind of syntax is kind of odd looking since it doesn't read quite right, where we would probably say something like "add vector1 and vector2," this says "vector1 add, vector2" which is kind of awkward to write let alone say.  What's worse is there is an implied order of operations here. Vector addition, much like regular addition, is commutative. This means whether we do vector1 + vector2 or vector2 + vector1, we get the same result.  It's a good thing too. Could you imagine if changing the order you added two things together actually changed the outcome? Bad news.

Let's take a look at a functional implementation to add two vectors.  In this case we will, again, make use of the valueOf method and we will also take advantage of the fact that our vectors are indexed appropriately, so we can capture values without needing to perform valueOf just to get an array.  Let's have a look at the code.

<pre class="language:javascript">
    function addParallelValue (vector, value, index){
        return vector[index] + value;
    }

    // (Vector, Vector) -> Vector
    function addVectors(vector1, vector2) {
        if (vector1.length !== vector2.length) {
            throw new Error('Cannot add two vectors of different lengths.');
        }
        
        var newPoints = vector1.valueOf().map(addParallelValue.bind(null, vector2));

        return Vector.build.apply(null, newPoints);
    }

    // Addition example
    var vector1 = Vector.build(1, 2, 3);
    var vector2 = Vector.build(4, 5, 6);
    addVectors(vector1, vector2).toString(); // <5,7,9>
</pre>

Our annotation this time states addVectors is a function which takes two vectors and returns a vector. Add vectors is actually a far more complex operation than taking the magnitude since we have to interact with two different vectors simultaneously, adding the values.  Once we have the new values for our resulting vector, we must create a vector to return.

With the kind of variadic behavior our Vector constructor follows, performing this operation in a purely object oriented manner would be rather challenging, though not impossible. By building our Vector object with a factory, we get the added benefit of using the built-in apply function which all functions inherit.  This makes creation of a new vector a trivial affair.  In the end, we actually manage to accomplish the core computation in the same number of lines as our simpler magnitude computation.

<h3>Summary</h3>

Javascript's blended object oriented/functional paradigm provides a lot of power when we redraw computation and type lines. Instead of bundling all functionality into objects and trying to force-fit a single solution, we get the greatest power object-orientation gives us, flexible type definitions, with the power functional programming provides, declarative, powerful computation syntax.

As you develop applications with Javascript take a look at what you are trying to accomplish and consider whether your current work is data- or computation-centric.  Let this differentiating characteristic guide your hand and develop your apps to be powerful, clean and well defined.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1086</wp:post_id>
		<wp:post_date><![CDATA[2016-02-24 08:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-24 16:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[types-and-functions-in-javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407465;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1119;}i:1;a:1:{s:2:"id";i:1133;}i:2;a:1:{s:2:"id";i:1109;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Javascript Differently</title>
		<link>http://www.chrisstead.net/archives/1091/learning-javascript-differently/</link>
		<pubDate>Wed, 02 Mar 2016 16:00:40 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1091</guid>
		<description></description>
		<content:encoded><![CDATA[On Thursday and Friday I was at a convention called Agile Open San Diego. The core idea is people getting together and having two full days of water cooler discussions about agile development and leadership. It's pretty cool and you should go to one near you.  Anyway, something happened on Friday morning: I realized we need a new way of approaching language learning.

Currently there are a number of ways people can learn languages including classes, videos, code schools, code katas and more. The most important thing I have noticed is this: none of these really do a good job of building the language into your brain quickly or permanently.

I have watched people who are new at programming struggle through code katas after working through videos and online learning processes. I think it's time for something different. Borrowing against the ideas of code cooking and the way martial arts are learned, I created the first form in a series of forms for Javascript learning.

<h3>What a Form Is</h3>

In in certain martial arts, a form (much like a kata) is a scripted set of motions which help to define a dictionary of movements the practitioner will use when sparring or in a fight situation. The form is important for developing muscle memory and deepening the mental relationship with the art.

When developing a relationship with a new language any experienced programmer picks a project to do which will force them to go through the motions of asking all the questions they need to ask to really understand how the new language ticks. This is the driving idea behind doing code katas. Katas force a programmer to look at the language they are working with and ask the same kinds of questions.

What if the new language is also the FIRST language?

A new programmer won't necessarily even know the first questions to ask to get to the right questions. This is why katas help sharpen developers but don't bring new developers up quickly.  This is what a form will help to fix. Instead of placing a problem in front of a new developer, it places the code and asks them "what does this do?"

Here's a quick start video I made to give a better idea:

<iframe width="420" height="315" src="https://www.youtube.com/embed/6G3PH4vb_gc" frameborder="0" allowfullscreen></iframe>

<h3>Creating the First Form</h3>

In the language forms design I envisioned a total of (probably) six forms. Of course before there are six, <a href="https://github.com/cmstead/jsLearnerForms/blob/master/forms/first-form.js" target="_blank">there must be one</a>.  I wanted to emulate a system I already understood, which meant that the first form should be the gateway to greater understanding. I wanted to introduce some of the most common aspects of the language and use a problem which had a lot of room to grow.

Ideally, if the language student were to work through only first form, they would have enough knowledge of the language to start solving problems. The solutions may not be elegant and they would likely not seem refined to the veteran programmer, but solutions and doing are the path to greater understanding.

With all of this in mind, I chose a problem which covered interaction with vectors. Though this sounds pretty "mathy," anyone who has completed an intermediate course in Algebra should be able to understand what is happening.  Vectors represent just the right amount of leg room that the problem would be understandable by the accomplished first form student and had plenty to grow on for the third form student.

After choosing a problem that met my needs, I started creating the code. I want first form to represent the way someone would actually work through the problem in an agile environment.  This means every step the student takes, there is a test to validate their progress. It becomes far less important for them to sit and scrutinize their code to make sure they got every character right on the first pass since the process is: read the test, write the code, run the code.  If the code runs and it looks like what the golden example presents, it must be right. This gives students early comfort through TDD and small-step development.

<h3>Leveling</h3>

Something I personally have a terrible time with when I am trying to teach someone something is setting aside what I know. I want to give the student everything and have them see why I take such joy in what I do. It doesn't ever work that way. Instead, I end up overloading them and they have trouble absorbing what I am trying to share.

Lynn Langit encourages the idea of leveling in her <a href="http://teachingkidsprogramming.org/" target="_blank">Teaching Kids Programming</a> process. Leveling is the idea of presenting a simple idea that does one thing. Once the core idea is understood, then enhancing the idea with a greater concept, while reinforcing the original idea. All programming builds on more foundational concepts. This means that any topic can be taught through a leveling approach.

Language forms should work this way.  The first form actually opens with a greeting. This mirrors the kung fu tradition of performing a greeting or salute to Buddha. The greeting is, essentially the foundational Hello World program, TDD style. We could call this a salute to the programming force, or something. I haven't come up with a name yet, but it's coming.

After the greeting, the very next thing first form does is it presents the concept of squaring a number. We don't need to understand the entire process yet and the full problem is largely academic so the student can focus more on growing to solve the entire problem instead of trying to understand what it does. As we said before, katas are great for sharpening problem solving, this is all about developing a relationship with the language itself.

As we move through the process of solving the entire problem, the student will go through the process of small-step design, abstraction, TDD, conditionals, loops, variables, functions and so on. First form is a guided tour though the way a professional programmer works without the fear and intimidation that comes with getting thrown in with the sharks.

<h3>Later Forms</h3>

After the first form student has successfully grown to proficiency, they will need to move to the next form.  Currently, only the first form is complete, but the second and third forms will actually make subsequent passes over the same code that was covered before.  This process of enhancing existing code provides direct insight into identifying patterns, refactoring and smoothing out the edges on legacy systems.

Later forms will pull in concepts like closures, object orientation, higher order functions and so on. The process of creating custom types will be brought to the fore and, by the third form, the student will start learning ways to escape common pitfalls and smells by using well known patterns. They will be able to use what they have learned to improvise on solutions and find their way out of sticky situations.

Forms beyond the third are still in the embryonic stage in my mind, so they will come as I discover how to develop them. So far, I know they will likely not cover the same ground, but will, instead, dig into deeper topics like Gang of Four patterns, algorithms and data structures and greater language mastery. Understandably, not all students will want to go this far with a single language, but ideally, this would provide a means for the dedicated language student to open up greater discovery channels they can follow on their own.

In the end, all of the forms should create a comprehensive system for teaching language through immersion, muscle memory, leveling and, in the end, understanding.  The forms are made, not to be done once, but to be repeated again and again to develop a comfort with the language without trying to force the student through solving puzzles and toy problems which they may not have the answers for yet.

Check out my progress creating <a href="https://github.com/cmstead/jsLearnerForms" target="_blank">Javascript forms on GitHub</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1091</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 08:00:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 16:00:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[learning-javascript-differently]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407445;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:1119;}i:2;a:1:{s:2:"id";i:1109;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Working with Strings and Regular Expressions</title>
		<link>http://www.chrisstead.net/archives/1099/working-with-strings-and-regular-expressions/</link>
		<pubDate>Wed, 09 Mar 2016 16:00:28 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1099</guid>
		<description></description>
		<content:encoded><![CDATA[An exchange at work got me thinking this last week. Someone said "I really hate regex." For those of you not in the loop on the lingo, regex means regular expressions.  After a little  prying, it turned out the reason they didn't like regular expressions was really rooted in the fact that they didn't have a chance to use them very often, so the concept is unfamiliar.

In this post I am not going to go into some of the more advanced parts of regular expressions because, a: they complicate things significantly and b: because I'm not experienced enough with them to give good guidance.  Foundational regular expressions are still more than enough to discuss for a single blog post, nonetheless. For now, I am going to cover how to leverage a lot of power from a very small subset of the entire set of tools.

Along with this post I am also going to give screen casting another go and provide a bunch of examples in a video which, hopefully, will be a good supplement to the information I will present in my blog.  In the video I am using approval testing to demonstrate the output from various regular expressions, which should make applying regex easier to do.

<iframe width="420" height="315" src="https://www.youtube.com/embed/5E9j_ZTyk-I" frameborder="0" allowfullscreen></iframe>

<h3>States and Strings</h3>

For the brave and the true, let's start at the beginning. Regular expressions are a form of finite state machine with an accept state.  What this means in English is, regular expressions go through a set of predefined states and, if enough of the characteristics are found in a string in the right order, then the pattern is considered a match.

A way to see this in action is the following:

<pre class="language:javascript">
var pattern = /abb/;
var testStr1 = 'abb';
var testStr2 = 'cabaabbac';
var testStr3 = 'ababcabadc';

testStr1.match(pattern) !== null; // true
testStr2.match(pattern) !== null; // true
testStr3.match(pattern) !== null; // false
</pre>

We can see the pattern of characters in the first test string matches the pattern exactly. We expect this to pass. The second string also contains abb roughly in the middle. This means our pattern will also result in a match. The third string comes very close three times, but abb is not actually found anywhere in the entire string.  Let's take a look at the way the search is conducted in the second string since it is the more interesting of the passing two:

<pre class="language:default">
c
aba
b
aa
abb <- accept.
</pre>

What this demonstration is showing is, the pattern matching mechanism starts verifying on a character and will continue to test until either a character does not pass one of the rules or a set of characters matches all of the rules and reaches what is referred to as an accept state. Regardless of how complex a regular expression ever gets, the underlying function always comes back to reaching an accept state or not. This means if something goes horribly awry and you can't figure out what happened, simplify your expression and build piece by piece, extending the states in your pattern one by one until you get to the pattern you need.

<h3>Special Case Behaviors</h3>

Regular expressions come with a whole array of special case definitions and characters which match those cases. For now we are going to look at some of the simpler parts which you can use to make your pattern matching more expressive as you go.

<h4>The Optional Pattern</h4>

The first special case is the optional modifier, '?'.  By adding a question mark after a character or expression, you can set a rule that the last part of the pattern was optional in nature and may or may not actually exist.  A very common example for this is the American versus British spelling of color/colour.  Here's how it works:

<pre class="language:javascript">
var pattern = /colou?r/;

'color'.match(pattern) !== null; // true
'colour'.match(pattern) !== null; // true
'coolour'.match(pattern) !== null; // false
</pre>

Obviously, the last string doesn't match a valid spelling of color for any English standard defined, so no matches are returned, i.e. the result of the match expression is null.  We can also see that both color and colour are considered valid matches, which means match will return correctly matched strings in the matches array.

<h4>Testing for Any Character</h4>

Sometimes you are less certain about the particular character which you want to match.  For instance, let's suppose we want to find any word which starts with ca, but we don't care what the last letter is.  We can use the '.' pattern to match any word of this form, even if they aren't valid words.  Here's an example:

<pre class="language:javascript">
var pattern = /ca./;

'car'.match(pattern) !== null; // true
'cam'.match(pattern) !== null; // true
'Occam\'s razor'.match(pattern) !== null; // true
</pre>

The last string actually demonstrates the problem we run up against with regular expressions of this type. Regular expressions are not particularly discriminatory. The only rules we provided were that there must be the characters c and a, followed by another character.  "Occam's" satisfies this just fine even though cam is in the middle of a string of characters.

<h4>Initial and Terminating Patterns</h4>

Next let's have a look at two more modifying patterns.  We can actually express position of a string by using '^' and '$'.  The '^' pattern expresses that anything which follows that character must be positioned at the very beginning of the string.  '$' is the polar opposite, saying that the string must match and terminate at that point. These are probably easiest seen in action.

<pre class="language:javascript">
var pattern1 = /^ca./;

'car mechanic'.match(pattern) !== null; // true
'cam shaft'.match(pattern) !== null; // true
'Occam\'s razor'.match(pattern) !== null; // false

var pattern2 = /ca.$/;

'riding in a cab'.match(pattern) !== null; // true
'a crow says caw'.match(pattern) !== null; // true
'Occam\'s razor'.match(pattern) !== null; // false
</pre>

As you can see, pattern 1 only matched patterns which started with ca and pattern 2 only matched strings ending with ca followed by another character. This can be really handy for testing that a string either starts or ends with an expected value. The initializing and terminating patterns are also very useful in testing that a given string contains only characters which match an acceptable pattern.  This is common for testing things like postal codes, phone numbers and email addresses.

<h4>Multiple Patterns</h4>

Where '?' will make a pattern optional, there are broader reaching patterns like '*' and '+'.  The '*' pattern means 0 or more matches of the previous character or pattern are acceptable. Similarly, the '+' pattern means 1 or more matches of the previous character or pattern are acceptable.

<pre class="language:javascript">
var pattern1 = /colou*r/;
var pattern2 = /colou+r/;

'color'.match(pattern1) !== null; // true
'color'.match(pattern2) !== null; // false

'colouuur'.match(pattern1) !== null; // true
'colouuur'.match(pattern2) !== null; // true
</pre>

With two pattern characters which are so close in meaning, it seems reasonable to ask why both?  As it turns out, the case of 1 or more is common enough it is actually quite valuable to address that situation directly.

<h4>Any In Matching</h4>

The last pattern we are going to cover, quickly, is the match any in case specified as '[]'.  Anything contained within the brackets will be used as an acceptable match. This means, if you have a very specific set of acceptable characters, it is easy to simply list them all and match against the definition. This is a common use case if numbers and letters are acceptable, but punctuation is not.

<pre class="language:javascript">
var pattern = /^ca[a-z]+$/;

'cabby'.match(pattern) !== null; // true
'cantina'.match(pattern) !== null; // true
'candl\'d'.match(pattern) !== null; // false
</pre>

Since cabby and cantina both start with ca and contain only letters, they were proper matches for our pattern.  Since candl'd (which is basically a nonsense spelling) has punctuation, it is not an acceptable match, so we get null as our match result.

<h4>Regex Flags</h4>

In Javascript (as well as Perl and potentially other languages) there are flags which accompany a regex search.  Up to this point we have been, largely, looking at lower-case matches. In regular expressions, case matters.  This means it is useful to be able to declare when case should or should not matter.  For example Chris and chris are different strings, so a search for /chris/ won't match Chris. That's not helpful when case is unimportant.  We can flag a pattern as case insensitive with 'i'.

<pre class="language:javascript">
'Occam\'s razor'.match(/occam/) !== null; // false
'Occam\'s razor'.match(/occam/i) !== null; // true
</pre>

The search string remains the same, but by adding the 'i' flag, we increase the allowable characters in our search and broaden the results which are returned.

In much the same way 'i' allows us to broaden our search by ignoring case, the 'g' flag will tell the regular expression engine to find all matches instead of just the first.  Let's have a look at that as well.

<pre class="language:javascript">
'Can we go to the can-can?'.match(/can/).length; // 1
'Can we go to the can-can?'.match(/can/g).length; // 2
'Can we go to the can-can?'.match(/can/ig).length; // 3
</pre>

As you can see, as we add flags to our search, the results expand to capture more cases and instances.  This is especially helpful when trying to replace values or split strings on complex patterns.

<h4>Summary</h4>

Regular expressions are a fairly rich way to describe string patterns for performing all kinds of matching and checks.  Along with matching and checks, regular expressions make it easy to perform complex find and replace operations and string tokenizing.

With particularly complex expressions, regex can look rather cryptic, but when small, focused checks and behaviors are being performed regular expressions can be a great benefit to the programmer for working with strings and reducing pain.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1099</wp:post_id>
		<wp:post_date><![CDATA[2016-03-09 08:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-09 16:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[working-with-strings-and-regular-expressions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407453;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1106;}i:1;a:1:{s:2:"id";i:820;}i:2;a:1:{s:2:"id";i:806;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pattern Matching in Javascript</title>
		<link>http://www.chrisstead.net/archives/1106/pattern-matching-in-javascript/</link>
		<pubDate>Wed, 16 Mar 2016 16:00:04 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1106</guid>
		<description></description>
		<content:encoded><![CDATA[For more than a year I have been considering the idea of pattern matching in Javascript. I know I am not the only one trying to solve this problem because there are a handful of resources where people have put together propositions for solutions, including a <a href="https://github.com/natefaubion/sparkler" target="_blank">Sweet.js macro called Sparkler</a>, and Bram Stein's <a href="https://www.bramstein.com/writing/pattern-matching.html" target="_blank">blog post</a> and <a href="https://github.com/bramstein/funcy" target="_blank">associated Github repo</a>.

Although I really, really like the idea of a macro to handle pattern matching, I fear people will throw it out immediately since pattern matching by itself is already an, sadly, obscure topic. This means anything that requires a macro package will probably turn the general populace off, especially since I haven't met anyone in my area who has heard of Sweet.js except me.

Although I like Bram's approach to handling macros with a function library, it looks like he didn't get a chance to make much headway.  That's really unfortunate since I think he was headed in a good, although kind of simple direction.

Before we go any further, it is important to discuss the idea of pattern matching for the uninitiated.  Pattern matching is a functional means to quickly look at the shape and signature of data and make a programmatic decision based on what is there.  In other words, pattern matching is like conditionals which have spent the last 10 years at the gym.

Imagine, if you will, conditional statements which looked like this:

<pre class="language:javascript">
match(vector) {
    case [1, 2, 3]:
        return 'Low number sequence';
    case [_, _, 0]:
        return '2D vector in 3d plane';
    default:
        return 'I have no idea what you gave me';
}
</pre>

Even this isn't really powerful enough to truly capture what pattern matching does, but I think it gives a little insight.  Nonetheless, if we had a construct which would give us the ability to match on an entire set of conditions within our data structures, the face of Javascript programming would be a very different place.

Pattern matching is not just about reducing keystrokes, but it actually redefines what it means to actually describe and interact with your data altogether. It would do for data structures what regular expressions have done for string manipulation.

Pattern matching is the dream.

So, after doing a lot of thinking, I think I have settled on a means to give this dream the breath of life.  Unfortunately, I believe it is unlikely that the path to data Nirvana will be easy.  I have a suspicion, this is the same issue Bram encountered. Looking at the ~1400 lines of code that make up the Sparkler macro, pattern matching could be a tricky problem.

<h3>Function and Contract</h3>

I looked at the Sweet.js macro, Bram Stein's early exploration and the match behavior in both Scala and Racket.  I decided I needed something which felt like fluent Javascript instead of succumbing to the Racket nut which lives inside me, so I opted to avoid the hardcore Lisp syntax.  Scala had a closer feel to what I wanted so I kept that in mind.  Bram's example felt close, but a little too muddy and the Sweet.js macro just felt a little too much like operators instead of functions.  What I landed on was this, () => () => any; that is to say a function ($match) which returns a function (pattern assembly) which returns the final result of the pattern matching. Here's an example of a simple exploration, drawing against Bram's factorial implementation.

<pre class="language:javascript">
    function factorial(n) {
        return $match(n)(function (pattern) {
            return [
                [0, 1],
                [pattern.else(), () => n * factorial(n - 1)]
            ];
        });
    }
</pre>

It's easy to see the first call is just $match(n).  This returns another function which takes a function as an argument; i.e. $match is a higher-order function which returns a higher order function, which takes a function as an argument, which then does stuff and returns a result. Another way of looking at this is $match is a function which chains to a function which is designed to perform pattern assembly.  Once the pattern is assembled, everything is executed and we get a result.

Clear as mud?

<h3>Expanding the Concept</h3>

This small example seems pretty simple.  Check for equality and if nothing works, then use the else clause. This is a little condition-block feeling, but I think people will understand the else clause better than anything else I might have put in there.

Anyway, digging in a little further, I wanted to also be able to quickly and easily match arrays, objects or other things as well. This simple equality checking was not enough, so I started expanding, moving into some sort of factory behavior to create matchers on the fly.  This brought me to an example which was a little more interesting and a lot more complex.

<pre class="language:javascript">
    function vectorMatcher(vector) {
        return $match(vector)(function (pattern) {
            [[pattern.number(), 0], 'x'],
            [[0, pattern.number()], 'y'],
            [[pattern.number(), pattern.number()], 'x,y'],
            [pattern.else(), new TypeError('invalid vector')]
        });
    }
</pre>

Here I am returning a string based on the pattern of a pair (2-valued array) array being treated like a vector.  If the first three patterns match, we get a string describing the axes the vector lives on.  If the vector is not a pair, or it contains something other than numbers, I want to return a type error with a message explaining the provided vector was invalid.

This bit of logic is significantly more complex than our previous factorial example and leaves us in a place where the code is descriptive, but perhaps not as readable as we would like.  Moreover, I thought about what I really want to be able to say and it made more sense to, perhaps, create something of a pattern matching DSL. (domain specific language)

<h3>Matching on a DSL</h3>

If I was going to invent any kind of simple language for expressing matching behaviors, I wanted it to be less cryptic than regular expressions, but I also wanted it to be terse enough that it didn't become some giant, sprawling string someone would have to mentally parse to really understand what was happening.  What I landed on was a simple near-Javascript expression of what the values should look like when they properly match our criteria.  This turns our earlier expression into the following.

<pre class="language:javascript">
    function vectorMatcher(vector) {
        return $match(vector)(function (pattern) {
            [pattern('[<n>, 0]'), 'x'],
            [pattern('[0, <n>]'), 'y'],
            [pattern('[<n>, <n>]'), 'x,y'],
            [pattern.else(), new TypeError('invalid vector')]
        });
    }
</pre>

I reduced the type descriptor for brevity, opting for an angle-bracketed character.  Now we can wrap up our expression in a single pattern call and get something the matcher can quickly and easily execute to verify whether the vector matches our requirements or not.  This, however, also means I am responsible for generating an AST (abstract syntax tree) for these expressions. Of course, if I am going to do that, it would be best to create one by hand so I can see what I am actually contending with.

<h3>Matcher Abstract Syntax Tree</h3>

The AST for my matcher language would, ultimately, link in with an underlying state machine of some sort, but I won't dig that deep right now. Nonetheless, what I ended up with, when constructing an AST is long, but relatively declarative. This means, I could, theoretically, start the entire process NOT at the language level, but instead at a place which people would more readily understand. Let's have a look at the AST replacement for our matching behavior.

<pre class="language:javascript">
    function vectorMatcher(vector) {
        return $match(vector)(function (pattern) {
            [pattern.array([
                pattern.number(),
                pattern.number(0)
            ]), 'x'],
            [pattern.array([
                pattern.number(0),
                pattern.number()
            ]), 'y'],
            [pattern.array([
                pattern.number(),
                pattern.number()
            ]), 'x,y'],
            [pattern.else(), new TypeError('invalid vector')]
        });
    }
</pre>

It's long, and probably overkill for the problem presented here, but it gives us a real view into the guts of the problem and a way out of the mud.  This is, also, unfortunately all I could pull together in time for this post, but I feel like we covered a tremendous amount of ground.  I will continue to experiment with pattern matching and, perhaps, by next time we could even have a working object model to build our tree with. Until the next post, keep coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1106</wp:post_id>
		<wp:post_date><![CDATA[2016-03-16 08:00:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-16 16:00:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pattern-matching-in-javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="applied-math"><![CDATA[Applied Math]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures-foundation"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407442;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:1133;}i:2;a:1:{s:2:"id";i:933;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is Functional Programming?</title>
		<link>http://www.chrisstead.net/archives/1109/what-is-functional-programming/</link>
		<pubDate>Wed, 23 Mar 2016 16:00:42 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1109</guid>
		<description></description>
		<content:encoded><![CDATA[For the past couple of years I have been trying to put my finger on a crystalline idea which I could use to explain what functional programming is for someone who doesn't understand.  Along the way I have given lots of explanations, some were merely confusing and others were actually bad.  My goal, with this post, is to give a clear, concise picture of what functional programming is really about.

It is common for a programmer, today, to have a good grasp on Classical Object Oriented programming.  What this means, at the heart of it, is they understand managing objects through a class and inheritance system. I know I was taught a classical approach when I was in college and many programmers, even those who didn't attend a formal, degree-granting institution experienced a similar path of education.

Functional programming has, in fact, been around quite a bit longer than object orientation of any kind, but it was largely either implemented in a language that was geared for research, or it was implemented in a college project (typically Lisp) to explore creating a programming language.  Due to the academic nature of early functional languages, and the fact that programming, in the large, was something which was still in a discovery process, nobody tried to provide a small idea to state "this is what we are doing."

With all of this in mind, it is useful to have a setup which will be accurate and, at the same time, descriptive to Classical OO people.  I thought about how Scheme was introduced in "The Little Schemer," and though there was no crystalline idea, the approach really helped to clarify what functional programming really is.  With all of this in mind, let's take a look at the small idea.

Functional programming is made up of three parts:

<ul>
<li>Inquiry</li>
<li>Declaration</li>
<li>Abstraction</li>
</ul>

What I mean by this is, though functional programming contains ideas like closures, first class functions, higher-order functions and so on, that is not ACTUALLY what functional programming is.  I feel that the person who wrote "The Little Schemer" (nee "The Little Lisper") understood this clearly.  Unfortunately, I have never seen this written anywhere.

The remainder of this post will be an inspection of this three-part idea and how we can look at Javascript and either see or build the pieces we need to make this idea clear.

<h3>Inquiry</h3>

The first concept in our list is the concept of inquiry.  Another way we can say this is, we can ask questions.  Conditional blocks are already designed around the idea we want to know if something is true or false, but we construct our conditions with (sometimes) cryptic operators which force people to think while they read the code instead of simply reading the code like English.

We can start by asking very core questions, which are handled by operators in Javascript.  Checking the type of a variable in Javascript cloaked in operator soup which creates a long line which someone has to read later.  It would be preferable if our expressions were closer to natural language.  Here's a way we can wrap our operator soup and be more expressive about the questions we are asking.

<pre class="language:javascript">
    function areEqual (a, b) {
        return a === b;
    }
    
    function isType (type, value){
        return areEqual(type, typeof value);
    }

    function isInstance (obj, value) {
        return value instanceof obj;
    }

    // Here are these functions in use

    areEqual(5, 5); // true
    areEqual(10, 'A'); // false
    isType('string', 'foo!'); // true
    isInstance(Number, {}); // false
</pre>

Although these functions are, potentially, a few more characters, they are much more transparent in their intent. By wrapping our operators, the code we write will actually state precisely what it does in English, making the time to understand a program shorter.  Here's taking this a step further:

<pre class="language:javascript">
    function isNumber(value) {
        return isType('number', value);
    }

    function isZero(value) {
        return isNumber(value) && areEqual(0, value);
    }

    function isEven(value) {
        return isNumber(value) ? isZero(value % 2) : false;
    }

    function isArray(value) {
        return isInstance(Array, value);
    }

    // Examples of use:

    isNumber(99); // true
    isNumber('bar'); // false
    isZero(0); // true
    isZero('A cat'); // false
    isEven(6); // true
    isArray({}); // false
</pre>

By wrapping up the original operators in functions, we can actually build on top of them, creating new functions which also read clearly and add quite a bit more utility.  One of my all-time favorites in this list is isArray, where we simply ask if our current value is an instance of the base Array object.  This really beats the commonly suggested:

typeof value === 'object' && Object.prototype.toString.call(value) === '[object Array]'

<h3>Declaration</h3>

It could be said that asking questions is a special case of declaring intent, but I prefer to keep these separate because it helps shine a light on two different aspects of the programming process. Sometimes we want to ask questions, but, often, we really just want to get something done.

The act of getting something done is what I like to refer to as intent.  When we create a function, called sum, which sums the numbers in an array, we are actually declaring, in code, that we want to add up a bunch of numbers.  In much the same way, we might want all the even numbers from an array.  This would lead us to creating a function called getEvens.

This kind of programming is typically referred to as declarative programming.  Instead of writing out large blocks of conditions and sprawling loops, we can declare our intent and allow the underlying system to actually interpret our intent and perform the correct action. Let's have a look at creating a few declarative functions.

<pre class="language:javascript">
    function first(values) {
        return isArray(values) ? values[0] : null;
    }

    function rest(values) {
        return isArray(values) ? values.slice(1) : [];
    }

    function add (a, b){
        return a + b;
    }

    function sum (values){
        return isArray(values) ? values.reduce(add, 0) : 0;
    }

    function getEvens(values) {
        return isArray(values) ? values.filter(isEven) : [];
    }

    // Examples of use

    first([1, 2, 3, 4]); // 1
    rest([1, 2, 3, 4]); // [2, 3, 4]
    sum([1, 2, 3, 4]); // 10
    getEvens([1, 2, 3, 4]); // [2, 4]
</pre>

Right now seems like a good time to point out, although we took a few extra characters to bundle up our operators in functions, the bodies of all our functions, including sum and filter, which would typically be loops wrapped in a conditional, are actually only a single, very short line. This brevity is NOT because the goal is to be terse, but rather because that is all it takes to express our intended behavior.  All of the remaining braces, parentheses and operators are just cryptic language cruft we can abstract away.

<h3>Abstraction</h3>

Picking up right where we left off, abstraction is the final piece of the functional puzzle.  So far we have seen functions floating free, detached from objects and made available just as they are.  Abstraction is where we take those functions and really make them shine.

In functional languages, and languages which support functional programming, functions are first class.  What this means is, a function is a free-standing entity which is handled as data.  In Javascript, this is facilitated by the prototypal inheritance system which actually news up a function object and provides it free from the boilerplate and constraints which are put in place by Classical OO languages.

This first-class, data-centric behavior is what really makes abstractions strong in Javascript.  In the declaration section above, we created a function called getEvens, I'll paste the code below, so it's handy.

<pre class="language:javascript">
    function isEven(value) {
        return isNumber(value) ? isZero(value % 2) : false;
    }

    function getEvens(values) {
        return isArray(values) ? values.filter(isEven) : [];
    }
</pre>

I made sure to bring the isEven function along for the ride because it's an important part of this puzzle.  Inside the getEvens function, we call a method on the values array called "filter."  Filter is an example of what is referred to as a higher-order-function.

Higher-order functions are functions which take a function as an argument with the intent that the function is to be executed (as opposed to treated like a string or number).  This means we can write highly abstract, very generic functions like reduce which provide a tremendous amount of power for our programming pleasure.

If we were to write filter ourselves it could look like the following:

<pre class="language:javascript">
    function getLength(values) {
        return isArray(values) ? values.length : 0;
    }
    
    function append (valueArray, value) {
        var result = isArray(valueArray) ? valueArray.slice(0) : [];
        
        return isType('undefined', value) ? result : result.concat([value]);
    }
    
    function filter (predicate, values, result){
        result = isType('undefined', result) ? [] : result;
        
        if(predicate(first(values))) {
            result = append(result, first(values));
        }
        
        return isZero(getLength(rest(values))) ? result : filter(predicate, rest(values), result);
    }
</pre>

That code might be a bit much to choke down, but the idea is we don't actually have to see it.  Fortunately Javascript already has filter already built in.  With that in mind there is a real benefit that comes with abstractions like this.

If a generic function has a well defined contract, we can actually change the implementation under the hood.  This idea can be seen in Classical OO programming as well, but rarely with the level of genericising we have here. We could write a new filter function which takes advantage of a multi-core processor.  We could also use a distributed computing system to compute the result.  Ultimately, as long as the function contract remains the same, the calling code will never know the difference!

The abstraction portion of functional programming is a rather expansive topic including higher-order functions, closures, metaprogramming, types and more, but even without digging into all of the various topics, we can see the abstraction model is something that definitely sets functional programming apart from Classical OO.

<h3>Summary</h3>

This has been a whirlwind survey of some of the bits and pieces of functional programming itself, but hopefully the core ideas of inquiry, declaration and abstraction have clarified what seems to be a rather murky discussion of what functional programming really is.

If there is anything I would like you to take away from this discussion today, it is the idea that the three ideas presented here, for as sparse as they are, actually provide the ability to do tremendously powerful programming, while providing the ability to make code clear and descriptive of intent.

This is merely the tip of the iceberg, but I hope this tickled something in your brain that made you want to go out and learn more.  Until next time, happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1109</wp:post_id>
		<wp:post_date><![CDATA[2016-03-23 08:00:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-23 16:00:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-is-functional-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407447;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:683;}i:1;a:1:{s:2:"id";i:795;}i:2;a:1:{s:2:"id";i:620;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Objects Are Still Shared State</title>
		<link>http://www.chrisstead.net/archives/1114/objects-are-still-shared-state/</link>
		<pubDate>Wed, 30 Mar 2016 16:00:12 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1114</guid>
		<description></description>
		<content:encoded><![CDATA[Dear programmers coming from Classical Object Oriented programming, please stop thinking that encapsulation of variables eliminates the "globalness" of your variable. It's a hard truth, but you had to hear it from someone; you have a problem. Consider this an intervention.

I had a conversation a couple months ago where I looked at some code a senior developer had written and asked, "why are you using a global variable?"  The response I got was "it's the exposing module pattern, so it's local and encapsulated. It's not global."  The variable was a cache object exposed outside of the module; and it was global anyway.

When I say global, it is not about whether the entire program, or the entire world, can access your value, it's about how your variable gets managed and modified. Really, the problematic aspect of a global variable comes from the fact that global variables, in many popular languages, represent shared, mutable state.

Consider a world where every variable is actually immutable, i.e. once you create a variable, you can't change the value.  In this particular case, a global variable is really nothing more than a globally readable value.  You can't write to it, so you can't impact the rest of the running program.  Is that global variable actually a problem?  Decidedly less so, that's for sure.

<h3>Mutating Object State</h3>

Let's take a look at a very simple, though rather common, example of the way variables are often managed inside objects.

<pre class="language:javascript">
    function SneakyObj () {
        this.value = 0;
    }
    
    SneakyObj.prototype = {
        getValue: function () {
            var current = this.value;
            this.value++;
            return current;
        }
    };
</pre>

There are two things wrong with this if value is actually important to the internal state of the object.  First, since Javascript does not support private variables (explicitly, but we'll come back to that), then this suffers from the Indecent Exposure code smell.  Essentially, anyone in the world can directly access and modify the internal state of this object.  That's bad news.

The second issue with this object is the getter actually modifies the internal value of our object and returns a representation of the previous object state.  Effectively, our getter is modifying the internal state of the object and lying to us about it.

Before you proclaim "I never do that! How very dare you," keep in mind that this pattern shows up all the time.  Popular frameworks like Angular and Ember actually encourage this kind of thing through the controller pattern.  This is a sneaky trap that is hard to avoid.

Although we can't quickly resolve the code smell, let's take a look at a remedy for the lie that is our "get" method name.

<pre class="language:javascript">
    function LessSneakyObj () {
        this.value = 0;
    }
    
    LessSneakyObj.prototype = {
        getAndUpdateValue: function () {
            var current = this.value;
            this.value++;
            return current;
        }
    };
</pre>

Now we understand and declare what the method does.  For some people this is enough and we need to go no further.  I, on the other hand, feel this is still rather suspect and would prefer to see a cleaner, more elegant construction.

<h3>Separate The Activity</h3>

The issue I draw with our updated object is, we have one method which does all the things.  This is a really bad idea since it really doesn't protect the programmer from a micro-god function.  (Hey, You can have micro-frameworks and micro-services.) Effectively we have fixed the naming problem, but we haven't actually resolved the smelly code which lives within our method.

Typically I prefer a single function which will return the current state of affairs and other function, if you MUST, which modifies the internal state.  This kind of separation of concerns actually helps to keep object state sane and useful.  If not for the exposed internal value of the object, we would be on our way to saner code.

<pre class="language:javascript">
    function ObviousObj () {
        this.value = 0;
    }
    
    ObviousObj.prototype = {
        get: function () {
            return this.value
        },
        
        update: function () {
            this.value++;
        }
    };
</pre>

We can see this code actually separates the functionality and has the lovely side effect of making the code more readable. If I were working in a project using an MVC paradigm, I would call this good and move on.  We have separated the behaviors and tried to keep everything clean, tidy and meaningful.  Our view would be able to access the values it needs and we keep our state management safe from accidental update.

<h3>Turn Up The Encapsulation</h3>

From here we can start looking at working on our fine detail.  Up to now, we have accepted that our internal values are exposed and available for the world to manipulate, AKA Indecent Exposure.  It's time to fix that little bit of nastiness and make our object water- and tamper-proof.

The only way to actually protect a variable from external access in Javascript is through closures.  Since functions are objects and objects are built atop function constructors, we can perform a little scope management surgery and make our object really safe and secure.  Let's take a look and see what we can do to lock things down.

<pre class="language:javascript">
    function EncapsulatedObj () {
        var internalState = {
            value: 0
        };
        
        this.get = this.get.bind(null, internalState);
        this.update = this.update.bind(null, internalState);
    }
    
    EncapsulatedObj.prototype = {
        get: function (state) {
            return state.value;
        },
        
        update: function (state) {
            state.value++;
        }
    };
</pre>

This code does a little fiddling around with scope by partially applying the object's internal state to our get and set functions.  This protects our variable from being accessed by the outside world, but allows our get and update methods to access our value freely.  When your data must be locked away, this will get you there.

<h3>Our Code Goes to 11</h3>

In order to finish up this journey, it seemed only right to create a completely pure, immutable object just to see where it would lead us.  If we were to really go all the way, we would need to do a little more work to ensure everything still worked as we would expect.

We know the variable "value" maintains a count for some reason, so it will be important to ensure value is always an integer.  We also want to make sure the get method always gives the current count.  Finally, update should do just that: update the count value. What does it mean to make an update if everything is immutable?  Let's have a look and find out.

<pre class="language:javascript">
    function isNumber (value){
        return typeof value === 'number';
    }
    
    function isInt (value){
        return isNumber(value) && Math.floor(value) === value;
    }
    
    function SafeObj (initialValue) {
        var value = SafeObj.cleanValue(initialValue);
        
        this.get = this.get.bind(null, value);
        this.update = this.update.bind(null, value);
    }

    SafeObj.cleanValue = function (value) {
        return isInt(value) ? value : 0;
    };
    
    SafeObj.prototype = {
        get: function (value) {
            return value;
        },
        
        update: function (value) {
            return new SafeObj(value + 1);
        }
    };
</pre>

This is just chock full pure functions and added behavior. With all of that added behavior, we get something magical.  Instead of having an object which is mutable and, ultimately, somewhat unpredictable and hard to test, we end up with an object which has the following properties:

<ul>
<li>Immutable</li>
<li>Contains pure methods</li>
<li>Has a single, pure, static method</li>
<li>Is compositionally built</li>
<li>Updates through new object construction</li>
</ul>

This whole object construction could lead us down many discussions which would get into types, values, mutability, function composition and more.  For now, it will suffice to say, this kind of development creates the ideal situation for developing safely and really turns our code up to 11.

<img src="http://media.tumblr.com/10430abfede9cebe9776f7de26e302e4/tumblr_inline_muruf3LBUw1qlasi4.gif" alt="The numbers all go to 11." />

<h3>Summing Up</h3>

Although we got a little spacey at the end, the important thing to take away from this whole thing is, any time an object is built and modifies its own state through method calls, the methods are actually relying on shared, mutable state.

Shared mutable state in an object really is just a micro-global and should be viewed as such.  This means, any value which can be accessed and modified should be considered unsafe and untrustworthy.  Untrustworthy data should never be viewed as the source of truth.

From here forward, if you start to add a variable to an object or module, ask yourself, does this really need to be global, or can I localize it?  Perhaps you will find a better way to keep your code clean and easy to reason about.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1114</wp:post_id>
		<wp:post_date><![CDATA[2016-03-30 08:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-30 16:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[objects-are-still-shared-state]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures-foundation"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407446;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1;}i:1;a:1:{s:2:"id";i:735;}i:2;a:1:{s:2:"id";i:955;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Typed Thinking in Javascript</title>
		<link>http://www.chrisstead.net/archives/1119/typed-thinking-in-javascript/</link>
		<pubDate>Wed, 06 Apr 2016 16:00:16 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1119</guid>
		<description></description>
		<content:encoded><![CDATA[Javascript is a dynamically typed language. I suspect this is not news to anyone reading this. The reason this is important, however, is I have heard people say Javascript is untyped.  This statement is most definitely false. Javascript has and supports types, it simply does not actively expose this to the world at large.

Javascript is in good company when it comes to dynamically typed languages.  Python and Ruby are also popular languages which are dynamically typed. Other venerable languages which are dynamically typed include Clojure, Elixir, Io and Racket. People coming from statically typed languages often say that Javascript's dynamic typing is a hindrance to good programming. I disagree. Bad programming is a hindrance to good programming. I feel programmers coming from the languages listed above would probably agree.

<h3>What's the Difference?</h3>

Several popular languages today, including C#, Java and C++, are statically typed. This means the programmer declares the values they plan on using to accomplish a task when they define a method. There are distinct benefits to this kind of programming, specifically, the compiler can quickly determine whether a method call is valid.  This kind of validation is useful and can prove a good tool for programmers, no doubt.

<pre class="language:java">
// Somewhere in a static class...
    public Int add(Int a, Int b) {
        return a + b;
    }
</pre>

As you can see above, everything is explicitly annotated with a type definition.  This kind of annotation is effectively a note to anyone who reads this code, including the compiler, et al, that this function behaves this way. Unfortunately, this convenience comes with a price.  Suppose you wanted an add function for any sort of number including mixed arguments...

<pre class="language:java">
public Int add(Int a, Int b){
    return a + b;
}

public Double add(Double a, Double b){
    return a + b;
}

public Double add(Int a, Double b){
    return (Double) a + b;
}

public Double add(Double a, Int b){
    return a + (Double) b;
}

// And it goes on and on and on...
</pre>

Modern improvements on type values has helped improve this problem (don't shoot me, Java people), but it becomes obvious rather quickly that having restricted type flexibility means there is a lot more work which must be done to accomplish a seemingly simple task. We have to make a trade to get this compile-time help from the language.

Dynamic typing, on the other hand, does not have this restriction.  In Javascript (or Python, Clojure, etc.) no type annotation is needed.  This means the language will perform what is called <a href="https://en.wikipedia.org/wiki/Type_inference" target="_blank">type inference</a> to do the right thing.  Languages like Python or Clojure are less forgiving if types don't line up correctly.  If, for instance, you attempted to add a number and an array in either of these languages, an error would occur and everything would go downhill from there.

Javascript works a little harder to do the right thing; perhaps a little too hard.  In a strange twist of fate I, once, attempted to demonstrate that Javascript would throw an error when trying to add a string and a function.  Instead I got a string containing the original string, and the source code for the function. Suffice to say, this is not what I expected.

Nevertheless, this kind of type management is both the weakness and the strength of a dynamically typed language.  Rather than having to spend time really thinking about strings, ints, doubles, bools and so on, you can spend more time thinking about the way your program works...

Until it doesn't.

<h3>Correctness and Types in a Dynamic World</h3>

One of the most important things to consider in Javascript is intent.  Although the kinds of strange things can be accomplished by applying common actions to unexpected values can be entertaining, it is not particularly helpful when attempting to write a correct program.

<a href="https://en.wikipedia.org/wiki/Correctness_(computer_science)" target="_blank">Correctness</a> in programming is when a program performs the expected action and, within the domain of acceptable values, returns the correct output.  In other words, an adder would be incorrect if it always returned 9, regardless of the input; an adder which always returned a valid sum would be considered correct.

By considering correctness, we must consider input and output types.  Let's keep using our add function because it's easy to understand.  Above, when we discussed types annotations, we looked at an add function in Java.  We said that the input values a and b were both integers and the output is an integer.  This forces the idea of correctness upon our function which, actually, could be defined as correct in a broader sense.  What if, instead of declaring all of the different types and overloading the function again and again, we made up a new type.  Let's call this type Addable.  Suppose we had an addable type in Java and could rewrite our function accordingly:

<pre class="language:Java">
// type Addable includes all Int, Float, Double, Long, etc. values

public Addable add(Addable a, Addable b){
    return a + b;
}
</pre>

We can actually define a notation which will help us to understand the correct input/output values of our function.  We can say add has a function signature which looks like this: Addable, Addable => Addable.  In other words, our function takes two Addable values and returns a new, Addable, value.  All of this is true and we could test this function via various methods to prove the specific addition behavior is correct.

This new Addable type is effectively what we get in Javascript with the type "number."  We know that any number can be added to any number, so whether one number is an integer and another is a floating point value, we know they can still be added together. This means we can actually go so far as to eliminate the type annotations altogether and simply write our function as follows:

<pre class="language:javascript">
function add (a, b) {
    return a + b;
}
</pre>

Of course, the problem we face here is there is no annotation to tell the next programmer what types a and b should be.  Moreover, Javascript is quite forgiving and will allow a programmer to pass anything in which might be usable with a "+" operator. There are solutions to each of these, though we will only look at solutions for telling the next programmer what we intended.

<h3>Ad Hoc Properties to the Rescue</h3>

Under the hood, Javascript shares some really interesting characteristics with <a href="https://en.wikipedia.org/wiki/Smalltalk" target="_blank">Smalltalk</a>. Specifically, everything in Javascript, when managed within the runtime, is an object.  This means we can do all kinds of neat things with functions, like assign properties.

What this means is we can actually do something real about making our programming intentions more clear. What if we took our add function and assigned an ad hoc property to the Function object instance called "signature?"  By creating a property which declared what the function should do we get two benefits. First, anyone reading the source can immediately see what we meant to do and, second, we can actually create an artifact in our code which can be called upon elsewhere to get immediate feedback on what our behavior should look like.  Here's an example:

<pre class="language:javascript">
function add (a, b) {
    return a + b;
}

add.signature = 'number, number => number';
</pre>

Now, looking at our code we can see what add does.  It takes two numbers and returns a number.  We can use this same property to our advantage elsewhere in our code.  If we were planning to use add and wanted to see what the expected input and output are, we can simply output the signature.  Here's how we could do that:

<pre class="language:javascript">
console.log(add.signature); // number, number => number
</pre>

Now we know!  Better yet, if add was somewhere deep in a third-party library, we wouldn't have to dig through third-party code to understand what the contract for add might be.

<h3>Thinking Types</h3>

The really important idea here is, even if they aren't expressed in code, types live within everything we do in Javascript.  As we develop software, it becomes really easy to simply not think about what a function signature looks like and call it with whatever we have, hoping it does what we expect.

Programming this way is dangerous and can lead to bugs which are hard to triage and fix.  Instead of using the spray and pray approach, it is helpful to understand, more fully, what you intend to do and work with the types which are intended in a functions activity.

What this means to the dynamic programmer is, we have to be more vigilant, more cautious and more prepared while solving a problem than someone working with a statically typed, explicitly annotated language.

There are two ideas we must always keep in mind when programming, the goal of a correct program and what we must do to get there. The first idea is related to the company goal related to whatever problem we are actually trying to solve. The second idea encompasses types and actions almost exclusively.

<h3>Summary</h3>

Regardless of the typing mechanism for the chosen language with which we solve a problem, types are part of the solution.  Javascript does not express the value and function types explicitly in the source code, but the types we use are equally important to anything used in a statically typed language.

We can solve the problem of expressing our function signature through using comments or adding a property which can be read and understood by other programmers.  This will help alleviate the challenges which arise from misunderstanding source code.

Finally, as we work we must always be aware of the types we are interacting with and how they lead to the solution for whichever problem we are solving at the time.  Instead of throwing things at the wall and seeing what sticks, let's work carefully and with intent to write correct, valid programs.

P.S. If you don't want to remember all of the metadata stuff you have to do, <a href="https://www.npmjs.com/package/signet" target="_blank">check out signet</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1119</wp:post_id>
		<wp:post_date><![CDATA[2016-04-06 08:00:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-06 16:00:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[typed-thinking-in-javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407436;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1133;}i:1;a:1:{s:2:"id";i:766;}i:2;a:1:{s:2:"id";i:1187;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>606</wp:comment_id>
			<wp:comment_author><![CDATA[Intent: Why Types Are Important]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/1133/intent-why-types-are-important/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-04-20 08:16:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-04-20 16:16:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] couple of weeks ago, we looked at a way to add a little metadata to our function in order to communicate information to programmers who use our API in the future. I also introduced [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461168976.420619;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1461527385.641504;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Unit Testing Express Routing</title>
		<link>http://www.chrisstead.net/archives/1128/unit-testing-express-routing/</link>
		<pubDate>Wed, 13 Apr 2016 16:00:58 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1128</guid>
		<description></description>
		<content:encoded><![CDATA[If you are unit testing your code, and you should be, then it is likely you have encountered certain patterns which make testing more difficult. One of the patterns which pops up often is centered around Express.js routes.  Although the router has a nice, simple API to code against, the actual testing of the route action code can be a little challenging if you aren't used to using tools such as mocks, fakes and stubs.

Today we are going to explore using the Mockery library and an express router fake module to simplify the process of reaching into our modules and getting ahold of the route actions we provide to express for the sake of testing and ensuring program correctness.

<h3>The Libraries</h3>

The post today will make use of Mocha, Mockery and Express Route Fake.  The first two you may have heard of, the last you likely have not.  Let's walk the list and get a handle on what each of these tools does for us at a high level.

<h4><a href="https://www.npmjs.com/package/mocha" target="_blank">Mocha</a></h4>

If you have done any <acronym title="Test Driven Development">TDD</acronym> or unit testing in Javascript and especially in Node, you have likely already encountered Mocha.  Mocha is a popular <acronym title="Behavior Driven Development">BDD</acronym> tool for testing Javascript.  We will have examples of what test code in Mocha looks like later.

<h4><a href="https://www.npmjs.com/package/mockery" target="_blank">Mockery</a></h4>

Mockery is a tool for manipulating packages and modules which are required within script files for Node. Although Mockery is quite useful for breaking tight coupling, it is not as well known as Mocha.  Unit testing scripts which are tightly coupled through require statements is challenging since there is no clean way to inject a dependency into a dependency chain without a third party tool.  Mockery is key to getting good tests around Express route actions as we will see.

<h4><a href="https://www.npmjs.com/package/express-route-fake" target="_blank">Express Route Fake</a></h4>

Express Route Fake is a module I wrote to emulate behavior we use at Hunter to gain access to our route actions as we get tests written around our code.  The core idea of Express Route Fake is to substitute the fake module in for Express in order to capture references to the actions which are assigned to different routes. We will explore this shortly.

<h3>Registering Replacements with Mockery</h3>

I am assuming you are already familiar with a testing framework, so I am not going to cover the basics of using Mocha.  Instead we are going to start off looking at how to register a faked module with Mockery so we can break a dependency in Node.

Mockery actually manipulates the Node module cache and updates it with code of our choosing.  This gives us the ability, at test time, to dig in and create a fake chunk of code which we control so we can ensure our tests actually send and receive the right output without doing dangerous things like interacting with a network connection or a database.  We want the scope of our unit tests to be as tight as is reasonable so we can ensure the code under test actually performs the correct action every time.

This kind of guarantee around tests is called <em>determinism</em>. Deterministic tests are tests which, when provided a single input, always return the same output.  Ideally any interactions which would break the determinism of our functionality should be stripped away and replaced with code which always does the same thing.  This gives us guarantees and makes it easier to identify and test a variety of different cases.  Let's have a look at an example of breaking a dependency with Mockery and replacing the code with something else.

<pre class="language:javascript">
    beforeEach(function() {
        var mysqlFake = {
            query: function(query, params, callback) {
                callback(null, []); // Returns a null error and an empty array
            }
        };

        mockery.enable({
            warnOnReplace: false,
            warnOnUnregistered: false
        });

        mockery.registerMock('mysql', mysqlFake);
        myModule = require('../app/myModule');
    });

    afterEach(function() {
        mockery.deregisterAll();
        mockery.disable();
    });
</pre>

The beforeEach block sets up a fake MySQL module with a query method which immediately calls a passed callback. Mocking MySQL does two things for us.  First it removes the asynchronous behavior which comes from interacting with a database, ensuring all of our tests run inside the event loop.  The second thing this does for us is it allows us to provide a guarantee that the results passed back from our MySQL fake are always the same.  This means we don't have to set up and tear down an actual database instance.  We can simply test the code we care about and assume the database library does what it is supposed to.

Important items to note about the code in the beforeEach and afterEach blocks: Mockery takes a certain amount of work to get working.  The enable call in beforeEach starts Mockery working in memory and tells it not to post warning messages every time it does something.  It is safe to assume, if you see the results you want, that Mockery is working.  The code in afterEach returns the cache back to its original state, leaving everything clean for the following test.

<h3>Faking Router For Great Good</h3>

Now that we have looked a little bit at how Mockery works, we are ready to start digging into what we really care about.  Let's start testing our Express route actions. The first thing we should look at is a little bit of example Express routing code. Below is a simple route example which just receives a request and then responds with 200 and a little message.  It's not exciting code, but we can actually test it.

<pre class="language:javascript">
    'use strict';
    
    var router = require('express').Router();

    router.get('/mypath/myentity', function(req, res) {
        // Do stuff here
        res.status(200).send('Everything worked out fine').end();
    });
    
    module.exports = router;
</pre>

We can see a few things here which will be really important to get the tests right.  First, Router is a factory function.  This means anything that is going to stand in for express will have to implement this correctly.  The next thing we know is, the router object which is returned has methods on it like 'get.' We will want our fake object to replicate this as well.  Now is probably a good time to take a look at the source code for Express Route Fake.

<script src="https://gist.github.com/cmstead/9353f8cd5f2de44f10f6b05a446efdd0.js"></script>

Express Route Fake is a small module which packs a pretty massive punch.  Everything is set up for us to quickly capture and test our route actions.  The very first thing we have is a cache object which will store key/value pairs so we can request whichever function we want to test easily.

After the cache object we have a simple function which captures the route method, the route path and the route action.  This function is the real workhorse of the entire module. Every route call will go through this one function and be stored in our cache.  It is critical to understand that all of the methods, paths and actions will be captured and related so we can test them later.

Finally we have the Router factory fake, getRouteAction and reset functions.  Reset is exactly what one might expect, it resets the cache to empty so the entire process can be repeated without starting with a dirty object.  getRouteAction performs two critical activities.  First, it verifies the route exists and throws an error if it doesn't.  Secondly, it passes back the route action so we can test the function outside of the express framework.

A side note on the getRouteAction error behavior; it is important and useful to get clear errors from our fake in this case.  Over time my team has run into confusing situations because our implementation was home-grown and does not throw useful errors.  This means we get an error stating "undefined is not a function" which does not really tell us what is wrong.  By getting an error which informs you the route doesn't exist, you can immediately verify whether the route is being created correctly and not need to troubleshoot your tests.

<h3>Putting the Setup Together</h3>

Now that we have the tools and have taken a look at them, let's start constructing what our tests would look like. We know Mockery is going to substitute in our fake module and we also know that Express Route Fake will capture the actions.  All we really need to do is a little setup to get things rolling.

<pre class="language:javascript">
    describe('Testing Express Routes', function() {
        var myRoutes;
        var req;
        var res;

        beforeEach(function() {
            req = {};
            res = {
                resData: {
                    status: 0,
                    response: ''
                },
                status: function(status) {
                    res.resData.status = status;
                },
                send: function(response) {
                    res.resData.response = response;
                },
                end: function() { }
            };

            mockery.enable({
                warnOnReplace: false,
                warnOnUnregistered: false
            });

            expressFake.reset();

            mockery.registerMock('express', expressFake);

            // It is critical to require our module AFTER we inject our fake, or Node will use the
            // original module, which defeats the entire purpose of this setup.
            myRoutes = require('../routes/myRoutes');
        });

        afterEach(function() {
            mockery.deregisterAll();
            mockery.disable();
        });

    });
</pre>

In our setup we have a little bit of extra setup.  Since Node and Express interact with the http module through request and response objects (typically called req and res respectively), we will need to create objects we can pass through and use as well.  Considering the calls we are making on res, I just included the bare minimum functionality to actually test our route action: status, send and end.

Please note we are actually requiring the module under test AFTER we perform our Mockery setup.  It's really important to do this, otherwise Node will provide the actual Express module and our fake code won't be used.

Now that we have our code set up and ready to go, let's take a look at what our tests look like.

<pre class="language:javascript">
        it('should set status to 200', function() {
            var routeAction = expressFake.getRouteAction('get', '/mypath/myentity');

            routeAction(req, res);

            assert(res.resData.status === 200);
        });

        it('should respond with appropriate message', function() {
            var routeAction = expressFake.getRouteAction('get', '/mypath/myentity');

            routeAction(req, res);

            assert(res.resData.message === 'Everything worked out fine');
        });
</pre>

We can see that actually testing the actions, now, has become three simple lines of Javascript.  What is happening in each of these tests is, our module is registering actions against routes, which are stored by our Express Route Fake module. Once the test starts, we simply ask for the function and execute it as if it were called by Express because of an HTTP request.  We pass in our fake objects and capture the result of our action behavior.  This allows us to see directly inside of our method and test the interesting parts, throwing away the stuff that would be, otherwise, obscured by frameworks, libraries and Node itself.

A second, important item to note is that we get extra guarantees around our route paths.  If someone were to come along and change the path in our module, but not update the tests, or vice versa, we would get immediate feedback since getRouteAction would throw an error telling us the path does not exist. That's a whole lot of security for a little bit of up-front work!

<h3>Summing Up</h3>

Today, wee looked at how to use just a couple of modules to insert a fake for Express and get better tests around our code.  By using Mockery and Express Route Fake, you can capture route actions and get them under test.  Moreover, you can do this while only writing code that is specific to the tests you are writing.

As you write more tests, it might become useful to create a factory for creating custom request and response objects which would simplify the test code even more.  Of course, with all of this abstraction it does become more challenging to see what is happening under the covers.  Ultimately, this kind of tradeoff can be useful in situations like this where repeated code is more of a liability than a help.

The next time you sit down to create new functionality and wire it into an Express route, consider starting off with Mockery and Express Route Fake.  They will simplify the tests you need to write and limit the amount of code you have to change in order to get tests in place.  Happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1128</wp:post_id>
		<wp:post_date><![CDATA[2016-04-13 08:00:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-13 16:00:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unit-testing-express-routing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407365;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1238;}i:1;a:1:{s:2:"id";i:670;}i:2;a:1:{s:2:"id";i:1217;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Intent: Why Types Are Important</title>
		<link>http://www.chrisstead.net/archives/1133/intent-why-types-are-important/</link>
		<pubDate>Wed, 20 Apr 2016 16:00:43 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1133</guid>
		<description></description>
		<content:encoded><![CDATA[A common complaint from both the Javascript religious and the newcomers alike is Javascript is tremendously difficult to debug when things go sideways.  When a null or undefined reference is passed, the stack trace can be illuminating or it can be completely obscure.  Couple this with the growing popularity to use anonymous functions assigned to variables in lieu of named functions and you have a recipe for tremendous difficulty.

In modern compiled languages like C# and Java or F# and Scala, there is an enforced, static type system in place which ensures values which would cause a malfunction are disallowed from function calls.  This does not guarantee program correctness, but it does help eliminate strange errors.

Of course, the really important thing which comes from static typing is less about the compile-time checking as it is the integration of typed thinking into the entire development process. While developers working in statically typed languages are thinking about the logic for their programs, they are also considering the data types they are using to arrive at their results.

<h3>Revealing Intent</h3>

When a programming language provides type annotations, it means the programmer can declare what they intend the program to do up front. Most statically typed languages typically have an editor (or two) which provide insight into what the annotations say elsewhere in the codebase, possibly quite far from where the programmer is currently looking.

What these editors are really providing is a look into the intent of the work which was done before. I refer to this kind of behavior as <em>revealing intent</em>.  By revealing intent to the programmer, they can make choices which simplify the work of understanding other objects, functions and behaviors.

Javascript, for better or worse, does not allow for revealing intent other than variable names. This means that either each variable name must contain information about its type so people can opt to conform to the expected types or, alternatively, misbehave and intentionally break the function being called.  I am a noted fan of dynamic languages and like my functions free-flowing, but sometimes I long for a good, strong contract.

Let's pick a simple function written in Javascript and see what our baseline is.

<pre class="language:javascript">
    function addJS (a, b) {
        return a + b;
    }
</pre>

Our function could add two numbers, but it could also be called upon to do other things the name does not specifically call out.  AddJS could concatenate strings, coerce numbers to strings or act upon functions, objects and many other data types.  Clearly this is not what we intended.

Microsoft designed a language called TypeScript which transpiles to Javascript and includes features from ES Next as well as a quasi-static type system.  The type system in TypeScript is a step in the right direction when types are used, but there are still some problems.  Let's have a look at our function rewritten in TypeScript.

<pre class="language:javascript">
    function addTS (a: number, b: number): number{
        return a + b;
    }
</pre>

Our new add function declares it takes two numbers and returns a number.  This is really handy when we are exposing a function as an API to the rest of the world because other programmers can then capture this type information as they program and use it to make their calls conform to the expectation declared in the type contract...

Unless they aren't using Typescript in the rest of their application.

Typescript really only solves the problem if someone has bought into the entire ecosystem and uses modules which exclusively have TypeScript annotations attached or a TypeScript Definition file.  Atop all of this anyone who wants to access these annotations will need to use an editor which supports that kind of behavior.

<h3>A Type By Any Other Name...</h3>

As functional programming continues to gain traction, patterns like function currying become more common in codebases.  This means we now have functions which could return other functions (higher-order functions) which run 2 or more layers deep.  This kind of behavior can be demonstrated by a small rewrite of our add function.

<pre class="language:javascript">
    function curriedAddJS (a) {
        return function (b) {
            return a + b;
        };
    }
</pre>

With this setup in vanilla Javascript, we have really challenged the next programmer to try and decode our intent if they aren't familiar with a currying pattern.  Due to the lack of types and intent declaration in Javascript, this function, for as simple as it is, tells us almost nothing about intent since even the input variables are separated across different functions and the result is the product of a closure.

If we were working in Scala we would get intent and behavior bundled in, possibly, too terse a form.  Nonetheless, the full intent of our behavior is described by the following line of code.

<pre class="language:scala">
    def add(a:Int)(b:Int) = { a + b }
</pre>

This function definition actually declares not only data types for the function, but how they interact.  We could almost say add moves out of the range of function definition and into a type definition on its own.  That is, however, a little more esoteric than we need to be.

Of course, moving back to TypeScript, we can see where data types, function definitions and intent start to fall apart.  Although data types are declared and displayed, it is difficult to write a curried function in a way that is both clear and declarative of intent.  Let's have a look at our curriedAdd function in TypeScript.

<pre class="language:javascript">
    function curriedAddTS (a: number): Function {
        return function (b: number): number {
            return a + b;
        }
    }
</pre>

That's kind of like a punch to the eyeball, isn't it?

<h3>Tying Intent and Implementation</h3>

At the end of the day, the challenge we keep coming up against is the fact that our intent is either declared, vaguely, in code and lost before execution, or it is not declared at all.  Really, though, data types are not intent. This is one of the biggest problems we have.

Although programming deals in data and behavior, the problem we have introduced is we have become obsessed with the data types and we have forgotten that they are only meaningful within the context of behavior.

A couple of weeks ago, we looked at <a href="http://www.chrisstead.com/archives/1119/typed-thinking-in-javascript/" target="_blank">a way to add a little metadata to our function</a> in order to communicate information to programmers who use our API in the future.  I also introduced a small library called <a href="https://www.npmjs.com/package/signet" target="_blank">Signet</a>, which helps to simplify the process of attaching metadata so we don't have to litter our code with a bunch of Object.append calls.

By using the language we introduced in Typed Thinking, we can actually get a full declaration around our function and add meaning and context to our API in general.  Let's try applying our full type, declaring intent, to our vanilla JS implementation of curriedAdd.

<pre class="language:javascript">
    const curriedAdd = signet.enforce('number => number => number', curriedAddJS);
</pre>

This definition helps us to fully understand what curriedAdd will do.  When we get back our final function, we can query the signature from anywhere in our code, including execution time, and get a full report back on what our function will do.  Let's take a look.

<pre class="language:javascript">
    console.log(curriedAdd.signature); // number => number => number
</pre>

This is a simple riff on the previous post since we already knew this was possible.  Where our simple type language becomes useful is when we start working with curriedAdd.  Instead of getting back an untyped function, which gives us no more information than we ever had before, we have a fully parsed AST which comes along for the ride with our function.  This means we will actually get all of our other types for free all the way through our entire execution path.  Let's have a look at what happens when we call curriedAdd with a single value and check the signature.

<pre class="language:javascript">
    console.log(curriedAdd(1).signature); // number => number
</pre>

This means our initial type declaration actually allows us to understand the return types without any further declaration anywhere else!

Our enforced type declaration has given us a way to communicate our intent to anyone interacting with our code whether we are available to answer questions or not.  This type assignment reveals intent and helps to make library APIs and code in other files easier to work with.

On top of the ability to clearly identify intent and keeping our APIs static and safe, we still get to keep the dynamic nature of Javascript and all of the convenience that comes with it anywhere we are using local functions.  This blended static/dynamic coding allows us to quickly and easily iterate on implementation details within a module or namespace while keeping the actual interface well-defined for the external user!

<h3>Summary</h3>

Languages and the way they manage types can be a really divisive topic, but with the flexibility built into Javascript, we can actually manage types on a case by case basis and surgically insert requirements without having to tie our hands elsewhere in our code.

Although TypeScript is a popular solution for trying to get a handle on the declaration of intent throughout our codebase, it starts to fray at the edges with advanced techniques, making it unsuitable for the move toward a more functional style of programming.

In the end, enforcing a type on our API endpoints with a strong, lightweight library like <a href="https://www.npmjs.com/package/signet" target="_blank">Signet</a> gives us the right blend of enforced static typing where we need it and a fully dynamic environment when we want it.  This seems like the only sane direction to go when working in a language as rich and flexible as Javascript.  Go declare your intent and make people awesome.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date><![CDATA[2016-04-20 08:00:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-20 16:00:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intent-why-types-are-important]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407383;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1119;}i:1;a:1:{s:2:"id";i:766;}i:2;a:1:{s:2:"id";i:1187;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Shodan Programmer (Reprise)</title>
		<link>http://www.chrisstead.net/archives/1142/the-shodan-programmer-reprise/</link>
		<pubDate>Wed, 27 Apr 2016 16:00:35 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1142</guid>
		<description></description>
		<content:encoded><![CDATA[Quite some time ago, Michael O. Church wrote a blog post about the <a href="https://web.archive.org/web/20140716004341/https://michaelochurch.wordpress.com/2013/04/22/gervais-macleod-23-the-shodan-programmer/" target="_blank">Shodan Programmer</a> (beginning degree programmer, or journey beginning programmer).  In this post he detailed a gradient system for identifying programmers with regard to skill, experience and knowledge.  Two or three weeks ago, I discovered his post was either removed or his site had been deleted.  I'm not entirely sure what led to his Shodan post going MIA, but it was an important idea in the greater discussion of progressing skill and ability.

The last remaining reference to his Dan idea is on a <a href="https://www.quora.com/What-do-the-top-1-of-software-engineers-do-that-the-other-99-do-not" target="_blank">Quora post about the top 1% of programmers</a>.  In this post, the person posing the question was trying to find out how some of the greatest developers think and work in order to identify common habits of skilled and high-performing programmers.

With all of this in mind, I decided it is important to provide a new voice to the discussion about the Shodan Programmer.  I believe that Church's metaphor for describing programmer skill and ability holds up quite well against scrutiny. Ultimately, the idea is, programmers come in three broad-scope forms and the line is blurred when digging in and identifying when someone has moved from one part of the scale to another.

Where I currently work, we have three conceptual roles in which a developer falls: learner, contributor and mentor.  Although this is, effectively, more closely related to the concept of apprentice, journeyman and master, it does line up, in part, with the greater idea Church presents in his Shodan Programmer post.

The Dan scale goes from 0.0 to 3.0 and, it could be said, this scale is logarithmic.  The closer you get to the highest point, the harder it is to actually move the needle and the closer to 0 you are, the more likely you are to see large amounts of measurable improvement.  This means it becomes increasingly more difficult to identify the gradation between two programmers with high proficiency.

Let's have a glance at the three levels of the Dan.

<strong>Level 1 programmers</strong>, or Adders, are programmers who typically perform the bulk of the programming work in a software shop, solving common problems and interacting with systems.  These programmers, given enough time, could eventually solve most problems which are necessary

<strong>Level 2 programmers</strong>, or Multipliers, are programmers who are capable, not only, of solving a problem, but are versed in higher-level ideas like architecture or library development and maintenance.  Multipliers provide means to solve more general problems in order to reduce the amount of time spent solving the same problem over and over.

<strong>Level 3 programmers</strong>, or Global Multipliers, are programmers who tend to think beyond the scope of the immediate problem and look to solve large-scale problems.  Although level 3 programmers can perform the tasks of level 1 and 2 programmers, they tend to take research positions and work on conceptual or innovative new technologies which proliferate through the entire community over time.

<h3>Level 1 Programmers</h3>

Level 1 programmers are what people would typically think of as entry- and mid-level programmers.  These people are more focused on expanding their knowledge either through a learning program or day to day development projects which push their boundaries. Even programmers who have barely written their first Hello World program fall into Level 1, though they are usually not ready for production development for some time yet.

Church writes that a level 1 programmer is typically found on the scale between 0.0 and 1.4.  If we were to consider the least experienced developer being hired as a junior or associate developer, we would likely be looking at developers who are at ~0.8 on the scale.  Any programmer falling above 1.4 is starting to move into the realm of a Level 2 programmer.

We can see, of course, that this scale leaves a rather wide division between Level 1 and Level 2 since Level 2 actually begins well before a programmer actually reaches the 2.0 mark.  It's highly likely that someone who is working at a 1.2 level is probably starting to move into a mid-level programmer position and they are able to start looking at larger, more complex problems, though they are unlikely to be prepared to do architectural analysis

Church states that many programmers don't progress beyond 1.2 because they stop actively investing in their own knowledge and education. It is common for someone to become comfortable with the technology stack and problem space they know and settle in.

<h3>Level 2</h3>

As you might imagine, a programmer who is at 1.5 is lumped into a Level 2 programmer. This does not mean that everyone who has reached level 1.5 is prepared to take on all tasks a Level 2.0 programmer would be able to accomplish, but they are starting to learn methods and techniques for tackling more challenging problems.

Level 2 programmers fall between 1.5 and 2.4 on the scale and perform a variety of tasks which might be considered too difficult, or too obscure for a Level 1 programmer.  This does not imply any sort of superiority, however.  More often reaching Level 2 is a product of independent learning, and industry experience. Level 2 programmers, typically, tap into knowledge which comes exclusively through time.

Church states that Level 2+ programmers can be identified through a variety of outlets such as library development or maintenance, speaking at conferences and mentorship. Due to the nature of their output, Level 2 programmers tend to multiply the efforts of a team rather than simply adding to it.  This is where we can really see the difference between the Level 1 and Level 2 programmers.

Simply stated, by bringing Level 1 programmers onto a team the team is likely to benefit in an additive way. It is not uncommon to have a development team made up, exclusively, of Level 1 programmers, who produce working software. Typically, by introducing Level 2 programmers, the code quality will increase and the overall team will learn new skills and become a more effective team.  This kind of improvement is greater than an additive effect, giving Level 2 programmers the Multiplier name.

The important aspect of a Multiplier is they provide large scale benefit to a company and are often as influential to an organization as a manager or executive. High-performing Multipliers not only raise the skill and ability of the people around them, but they steer projects clear of known pitfalls or dangers and empower the programmers they work with to take the software they touch to greater vistas.

<h3>Level 3</h3>

Church calls Level 3 programmers Global Multipliers, but it might be easier to envision them as theorists and researchers. These programmers are at 2.5 and above in the Dan gradient and it is highly unlikely anyone will actually reach 3.0, given the logarithmic nature of the scale.

Typically, Level 3 programmers work on bleeding edge projects and provide the technical and theoretical vision for the result. Level 3 developers are often found working in the R&amp;D departments of large companies like Google, Microsoft or Apple or as high-paid, uniquely skilled contractors and trainers.

Level 3 programmers often have a deep understanding of more than just software development. They typically understand the deep underpinnings of computer science and mathematics. An academic equivalent would be a post-doctorate computer scientist leading research on a funded long-term project.

As with the gap between Level 1 and Level 2 programmers, a Level 3 programmer grows to their position through constant research, development and experience. Both Level 2 and Level 3 programmers have learned through a long process of failure and success.  There is no simple path to reaching Level 3 and many programmers may never reach Level 3 simply because they lack the desire to put forth the tremendous amount of effort needed to increase their place on the scale by one or two tenths of a point.

<h3>Level Analysis</h3>

The way Church originally designed this scale, the intent was to identify appropriate skill level for people working in the industry and understand how people might attack a particular problem.  Anyone who is at the whole number increments, e.g. 1.0 or 2.0, it is likely they would be able to solve 95% of the problems which could be identified at that skill level.

In other words, someone who is identified at a level of 2.0 would be able to successfully work on and solve 95% of Level 2 type problems.  In much the same way, they are likely only going to be able to solve about 5% of Level 3 problems.  This works the same way for someone at a level of 1.0, who would be able to solve 95% of Level 1 problems, but only 5% of Level 2 problems.

This means that for each point closer to the next level, a programmer would be able to solve a greater number of problems which would be distinct for that level. This kind of ability growth leads directly to the logarithmic nature of the graph.

Where this level designation comes in handy in day to day work is understanding the level of difficulty for a specific problem.  If something is a straightforward coding problem which can be solved through a brute force approach, the problem is likely a level ~1.0 problem.  On the other hand, if the problem is largely architectural or generic in nature it is probably more  of a level ~2.0 problem.

By understanding where a developer currently falls on the scale will provide insight into the likelihood they will succeed at solving a problem on their own.  In other words, if a developer is performing at level ~1.2, they will probably find a problem at level ~2.1 frustrating or inscrutable.  On the other hand, they will also, likely, find a level ~0.3 problem trivial or boring.

This gives us a heuristic for maintaining developer engagement. Church claims that developers seeking a challenge perform best at about 65-75% above their skill level. This means we could expect a developer to exhibit moderate growth with a healthy mixture of problems which they consider "simple" for confidence, or 50% below their level, problems at +/-10% of their level and problems which are up to 
50% above their level.

<h3>What it Means</h3>

Ultimately, this scale is not an indictment of anyone's skill or ability regardless of where they are in their career. Regardless of whether you are just starting out, or you are a multi-decade veteran of the software industry, your place in the Dan is uniquely your own. Some people enjoy the act of writing code and will happily continue forward on that path, while others have ambitions of experience beyond where they are today.  The choice is personal and it's not one I would be comfortable guiding in any way.

Ideally, Church's Dan should provide insight into the road a programmer could walk to achieve their desires and set a course for their career.  Level 1.0 or 1.1 could realistically be reached in a couple of years and, perhaps, a year or so for a particularly dedicated developer.  Church states that moving up the scale at 0.1 points per year after the first level is likely an aggressive schedule for many programmers. This means reaching level 2.0 will likely take a dedicated programmer 10 or 11 years on average, but might be achieved in about 8 for someone who is especially active in their research and experience.

I would suggest that the closer a programmer gets to 2.0, the slower the progress is going to feel simply because it takes more effort to cover the ground necessary for each tenth of a point. This is especially true since computer science is a field which is continually expanding and knowledge of topics continues to deepen year over year.

After reaching level 2.0, it could, realistically, take a lifetime to reach 2.5 or above.  This is completely dependent upon the programmer and what their desires are. This does not necessarily mean reaching for the pinnacle is not a worthy goal outright. Instead what this means is each person will have to decide on their own whether they want to continue to climb, and what it will mean for their career.

In the end, this scale is simply a means for every person to understand where they currently are in their career, and provide a way to assess problems which will crop up while working on a particular project. In much the same way, revisiting this idea and the scale that comes with it has helped me to understand how to, both, pick appropriate level problems for people I work with as well as understand problems I have yet to face for myself.

In the end, I hope this has helped others to get a taste of the scale Church presented and, perhaps, draw a clearer line from where they are now to where they want to be.  Everyone walks the path, the question is where does the journey ultimately lead?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date><![CDATA[2016-04-27 08:00:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-27 16:00:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-shodan-programmer-reprise]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407373;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1011;}i:1;a:1:{s:2:"id";i:1091;}i:2;a:1:{s:2:"id";i:1119;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Static Methods on Javascript Objects</title>
		<link>http://www.chrisstead.net/archives/1150/static-methods-on-javascript-objects/</link>
		<pubDate>Wed, 04 May 2016 16:00:28 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1150</guid>
		<description></description>
		<content:encoded><![CDATA[I'm a big proponent of unit testing. This means that any code I can test, I do.  When I work in the browser, however, it becomes more challenging to effectively unit test all of the code I write without spinning up an instance of PhantomJS. On top of that, most of the code I write in the browser, now, uses Angular as the underlying framework, which means my requirements are even more restricted since the go-to testing environment for Angular is Karma, which uses PhantomJS to satisfy Angular's dependency on a live DOM.

When we consider testing requirements along with the desire to share code between Node and client-side Javascript, it becomes critically important to decouple our core functionality from the framework and environment it runs within.  Although some projects can benefit from Browserify and Webpack, it is equally common for developers to fight against the build step which happens before running everything in the browser.

I have spent a fair amount of time off and on trying to find the best solution for each of these problems, which would solve all of them together. Ultimately, the solution came to me while working with Scala.  In Scala, it is possible to define a class and an associated object.  The object exposes functions as static methods on a namespace, while the class acts as an instantiable object which can be used in Classical OO applications.

<h3>A Basic Object</h3>

This inspired my thinking and I started looking at ways I could drop this same philosophy into Javascript. Ultimately, I landed on the concept of static functions on an object.  In order to get some perspective on where this train of thought will take us, let's take a look at a simple controller object like we might create in Angular.

<pre class="language:javascript">
    function TransactionController(transactionList) {
        this.transactionList = transactionList;
        this.setTotal();
    }

    TransactionController.prototype = {
        deleteItem: function (itemId) {
            this.transactionList = this.transactionList.filter(function (item) {
                item.id !== itemId;
            });
        },

        setTotal: function () {
            this.total = this.transactionList.reduce(function (total, item) {
                return total + item.price * item.quantity;
            }, 0);
        }

    };
</pre>

This controller is actually pretty typical.  There is a little bit of functionality which goes through and modifies the controller state. In order to properly test this behavior, we have to modify the controller state, then run each method and test that the mutation was correct.  In a world where good functional practices are possible, this seems unnecessarily fiddly.

<h3>Moving to Static</h3>

If we rewrite this controller just a little bit, we can start separating behaviors and decouple the computational bits from the state mutation.  This means the bulk of the work can be bundled up inside a pure function which is easy to test and think about.  Once that is complete, the mutation behavior becomes trivial to test and reason about because it is merely setting a variable.

<pre class="language:javascript">
function TransactionController(transactionList) {
        this.transactionList = transactionList;
        this.setTotal();
    }

    TransactionController.removeItem = function removeItem(itemId, transactionList) {
        return transactionList.filter(function (item) {
            return item.id !== itemId;
        });
    };

    TransactionController.getTotal = function getTotal(transactionList) {
        return transactionList.reduce(function (total, item) {
            return total + item.price * item.quantity;
        }, 0);
    };

    TransactionController.prototype = {
        deleteItem: function (itemId) {
            this.transactionList = TransactionController.removeItem(itemId, this.transactionList);
        },

        setTotal: function () {
            this.total = TransactionController.getTotal(this.transactionList);
        }
    };
</pre>

This change is important because we are actually modifying the base object which introduces functions which are not part of the instantiable object.  Due to this, we can actually start moving the functionality out of the primary object scope altogether and, instead, only reveal the parts of our code which we really want to expose for use.

<h3>Full Extraction and Namespacing</h3>

Once we have extracted the base functionality, we can actually move all of our logic into a factory function.  This will allow us to close over utility functions and reveal just the resulting composite functions which can be attached to our object just in time.

<pre class="language:javascript">
    function getTransactionBehaviors() {
        function isNotSelected(itemId, item) {
            return item.id !== itemId;
        }

        function removeItem(itemId, transactionList) {
            return transactionList.filter(isNotSelected.bind(null, itemId));
        }

        function addToTotal(total, item) {
            return total + item.price * item.quantity;
        }

        function getTotal(transactionList) {
            return transactionList.reduce(addToTotal, 0);
        };
        
        return {
            getTotal: getTotal,
            removeItem: removeItem
        };
    }
</pre>

We can actually call our factory function within our tests to ensure the logic is correct, meanwhile, nothing is exposed to the outside world accidentally.  This means we can attach these functions to the controller, if desired, just before we use them in our prototypal functions.

By attaching the functions as static methods, we give them a unique namespace, perform safe data hiding and ensure that our controller functions can refer to them without needing to be bound to a local context.  This actually frees us quite a bit since much of the complexity related to Classical OO in Javascript is related to context switching depending on whether a function is called within the object scope or not.

I created a <a href="https://gist.github.com/cmstead/0c3acdae372380baf4c3e703069fd66e" target="_blank">small utility to perform a no-frills merge</a> of properties onto an object.  This is only for illustration and would probably be best done with a reliable library like lodash or JFP.  Let's take a look at attaching our functions to our object for namespacing purposes.

<pre class="language:javascript">
    function TransactionController(transactionList) {
        this.transactionList = transactionList;
        this.setTotal();
    }

    TransactionController = simpleMerge(TransactionController, getTransactionBehaviors());

    TransactionController.prototype = {
        deleteItem: function (itemId) {
            this.transactionList = TransactionController.removeItem(itemId, this.transactionList);
        },

        setTotal: function () {
            this.total = TransactionController.getTotal(this.transactionList);
        }
    };
</pre>

We can see here the attachment of our functions is exclusively for the purpose of namespacing, much the same way we might see this in Scala or other functional language. Now that our functions are separated and declared within a factory function, we can actually work toward our second goal.

<h3>Externalizing Our Code</h3>

By separating our functionality, we can actually lift the entire factory function into a conditionally exported node module.  On top of that, we get extra security because our factory function closes over our functions, making them completely inaccessible to tampering.  This means, once our app is loaded in a browser, we get the same kind of separation from the world we normally see from an IIFE.

Moreover, because our code can be conditionally exported, we can require our behaviors directly and test them outside of the browser context.  This means our tests will run faster and we don't need to rely on as many, potentially flaky, integration tests.  Here's our final behavior code.

<pre class="language:javascript">
var getTransactionBehaviors = (function () {
    'use strict';

    function getTransactionBehaviors(transactionController) {
        function isNotSelected(itemId, item) {
            return item.id !== itemId;
        }

        function removeItem(itemId, transactionList) {
            return transactionList.filter(isNotSelected.bind(null, itemId));
        }

        function addToTotal(total, item) {
            return total + item.price * item.quantity;
        }

        function getTotal(transactionList) {
            return transactionList.reduce(addToTotal, 0);
        };

        return {
            getTotal: getTotal,
            removeItem: removeItem
        };
    }

    if(typeof module !== 'undefined' && typeof module.exports !== undefined) {
        module.exports = getTransactionBehaviors;
    }

    return getTransactionBehaviors;

})();
</pre>

<h3>Summary</h3>

In the face of a new world for Javascript, it is important to capture every advantage we can in order to make our code clean, efficient and stable.  By splitting our behaviors out of the strict confines of a framework structure and pulling them into a file for easy testing, we simplify the testing story and make it easier to share behavior between the browser and the server.

We can use simple patterns to build well defined, pure functions which give us a clear way to write and share code, while keeping it safe from attackers and stable for our users. The next time you find yourself working on a full-stack Javascript application, how are you going to split your app?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1150</wp:post_id>
		<wp:post_date><![CDATA[2016-05-04 08:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-04 16:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[static-methods-on-javascript-objects]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551597435;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:907;}i:1;a:1:{s:2:"id";i:644;}i:2;a:1:{s:2:"id";i:655;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Enforcing Endpoints: Types and Signet</title>
		<link>http://www.chrisstead.net/archives/1160/enforcing-endpoints-types-and-signet/</link>
		<pubDate>Wed, 08 Jun 2016 16:00:09 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1160</guid>
		<description></description>
		<content:encoded><![CDATA[What a ride! I spent the last month preparing a talk for and presenting at Lambdaconf.  If you haven't been, you should. Of the conferences and coding-related events I have been to, this was probably the coolest, toughest, mind-bendiest one. It was awesome.  I learned a lot about myself while I was there and a lot about the world beyond the horizon of what we consider "conventional production development." More than that, it's all coming to a developer shop near you sooner than you think.

You should go.

I have been talking about types in Javascript lately and this post continues the tradition. As I have been working on, and with, Signet, it becomes more and more obvious why types and signatures are fantastic in simple, raw Javascript code.

There is a lot of discussion about languages which compile to Javascript which support types.  This includes Elm, TypeScript and PureScript, though there are more out there.  Although I feel these languages may bring something interesting to the table, I feel they are largely akin to writing a language which compiles to C. If there is a flaw in the underlying language, compiling to the flawed language without actually addressing the problem is a band-aid, not a fix.  We actually need real types in real Javascript.

I am not a die-hard type convert who wants everything to be typed to a ridiculous degree.  Instead, I actually believe that blended dynamic and static typing can lead to an amazing, joyful programming experience. Imagine a world where you can bolt down the contract on things the world touches while leaving the internals to move fluidly through refactorings without having to worry about whether you're violating a contract.

<h3>Programming in a Dynamic World</h3>

Let's imagine you have a bit of code which takes a single purchase record and computes the final total for that record including tax.  The code might look a little like what I have outlined below:

<pre class="language:javascript">
    function computeTax(percent) {
        return function (total) {
            return percent * total;
        };
    }

    function computeTotal(taxCalculator) {
        return function (total) {
            return total + taxCalculator(total);
        };
    }

    function computePrice(purchase) {
        return purchase.price * purchase.quantity;
    }

    var api = {
        computeTax: computeTax,
        computeTotal: computeTotal,
        computePrice: computePrice
    };
</pre>

We're not going to dive into why some of the functions are curried, let's just accept that's the way they are for this post.

Everything in this code has a clear name and, ultimately, speaks to the intent of the behavior. I'll assume you are in an agile shop where your code is not thoroughly documented.  Instead, you are relying on tribal knowledge to ensure people understand what this code does and how to interact with it.

The likelihood is someone is going to do it wrong.

This brings us to the way Javascript behaves.  Javascript will, with all the best intent in mind, try to do the "right" thing.  This means, passing numbers instead of objects, strings instead of numbers and NaN could all result in a running, though wholly incorrect program.

The internals of this small module might not need to be protected since anyone working in the file will be compelled to read the code and make sense of the words on the screen, but people who have never seen this code, and perhaps never will, still need to understand what correctness means.  Do they know the functions are curried? No. Do they know the names of the variables? Probably not.

The fluid awesomeness of Javascript's dynamic nature just bit us. Hard.

<h3>If You Liked It You Should'a Put A Type On It</h3>

One of the greatest failings of assuming clear names will make things manageable is that the names are rarely if ever seen outside of code they are used in. Some editors like WebStorm and Visual Studio Code will pick up the names within modules given the programmer is working with node imports and everything is properly exported, named and referenced.

Even TypeScript can't save us from this kind of problem since the types are only supported at transpile time, so type erasure eats our one standing bastion of truth.  What if we added a little signature and type help to tell others what we are expecting and what they can expect in return?

This is where Signet comes in.  By using a modified Hindley-Milner type notation we can actually read what the API does and how we can interact with it.  On top of that, we get real, fast type checking at runtime, which means type erasure is a thing of the past.  Let's have a look at our API definition with type enforcement.

<pre class="language:javascript">
    var api = {
        computeTax: signet.enforce('number => number => number', computeTax),
        computeTotal: signet.enforce('function => number => number', computeTotal),
        computePrice: signet.enforce('object => number', computePrice)
    };
</pre>

The signature annotation not only tells us the kinds of values our function expects, it actually tells us that after the first execution we can expect a function back again. This means we can gain a tremendous amount of insight about our function without knowing anything about the internal workings of the function.  Instead of having a true black box, we now have a black box with instructions on the side telling us how to use the thing. We don't know how it is implemented, but we know it works the same way every time.

With this new enforcement, we get the following behavior:

<pre class="language:javascript">
console.log('computeTax: ' + api.computeTax.signature);
// computeTax: number => number => number

var computeLocalTax = api.computeTax(0.08);
console.log('computeLocalTax: ' + computeLocalTax.signature);
// computeLocalTax: number => number

computeLocalTax('9.99');
// Expected value of type number but got string
</pre>

<h3>Closing up Shop</h3>

In the end, the challenge in any programming project is not about whether or not you can write simply maintainable code, or whether you should use types or not.  Really, it is about making sure you are clearly communicating with the people who rely on your code to do what it says on the label.  This means, within the code itself, it should be clear, obvious and intentional. From the outside, any code which is accessible to others, including your future self, should declare what it does, and we should make use of every tool we can to simplify the process of gaining an understanding of what to expect.

By signing and enforcing your API, you get all the benefits of a type checker, plus signature metadata which means you don't have to go rifling through code that is not immediately related to the task at hand. Meanwhile, under the covers, we can rely on patterns, good naming and clean code to ensure our code continues to deliver value and convey meaning. Now, go add some types to your code and make life better for your team!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date><![CDATA[2016-06-08 08:00:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-08 16:00:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[enforcing-endpoints-types-and-signet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407360;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1119;}i:1;a:1:{s:2:"id";i:1133;}i:2;a:1:{s:2:"id";i:1187;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>607</wp:comment_id>
			<wp:comment_author><![CDATA[Types, Sets and Characteristics]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/1173/types-sets-and-characteristics/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-06-22 08:05:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-06-22 16:05:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] couple weeks ago, we looked at using Signet and some of the core types to add type information to function calls. Although it is handy to have a variety of base types available to provide signatures for your [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1466992989.150842;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1466611545.858927;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>608</wp:comment_id>
			<wp:comment_author><![CDATA[Domain Modeling For Better Contracts]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisstead.com/archives/1187/domain-modeling-for-better-contracts/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[205.186.187.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-06-29 08:01:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-06-29 16:01:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] the post about communicating contracts through enforcing endpoint contracts, we took a look at some basic types which are available in Signet. Today we are going to talk about [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1467483644.763222;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"chris";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1467216091.2087059;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Currying Matters: Clarifying Contracts</title>
		<link>http://www.chrisstead.net/archives/1166/currying-matters-clarifying-contracts/</link>
		<pubDate>Wed, 15 Jun 2016 16:00:06 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1166</guid>
		<description></description>
		<content:encoded><![CDATA[Function contracts are a tricky thing.  Ultimately what they define is an API for your application, but they also define how you write your internal behaviors. This balancing act can either lead to clear, well written code, or it can quickly devolve into ball of tangled string.

Walking the clean code, clean API line can seem to be a daunting task. It's common to hear people say this is precisely what Classical OOD is built for. By maintaining state, methods can accept partial requirements and allowing the developer to build their behavior in time.  I argue this kind of state management leads to extra cognitive load as the developer is required to keep track of the managed state.  By currying and clearly exposed intent, incremental behavior building becomes a trivial task done in a reliable set of steps.  It also leads to better program design and behavior determinism, making testing much easier to reason about.

<h3>A Small Example</h3>

Let's have a look at a slice function as an example.  It's common to want to call slice on arguments objects and arrays alike.  This means we have to vary our behavior for each different behavior.  Instead of showing example of different usages, I'm going to jump to a general slice implementation similar to what was written in JFP v2.x.

<pre class="language:javascript">
    function slice(start, values, end) {
        var cleanEnd = pickEnd(end, values.length);
        return Array.prototype.slice.call(values, start, cleanEnd);
    }
</pre>

This function makes use of a convenience function which we will continue to use throughout this post.  Here is the implementation of pickEnd.

<pre class="language:javascript">
    function isInt(value) {
        return typeof value === 'number' && value === Math.floor(value);
    }

    function pickEnd(end, valueLength) {
        return isInt(end) ? end : valueLength;
    }
</pre>

Let's have a look at how we might accomplish a few simple tasks using our original slice function.  We will create a function which will slice an arguments object or copy an array, a function which will drop the first three elements in an array and, finally, a function which will capture the elements from an array from indices 1 to 3.

<pre class="language:javascript">
    var argumentsToArray = slice.bind(null, 0);
    var dropFirstThree = slice.bind(null, 3);

    function takeFrom1to3 (values){
        return slice(1, values, 3);
    }
</pre>

As we can see, using our slice function forces us to either bind arguments, or actually wrap the entire behavior in a function.  This kind of inconsistency makes our slice implementation difficult to use.  There must be a better way!

<h3>Currying The Slice</h3>

The application inconsistencies in our new code leads me to believe we need a better solution.  When dealing with a single function API, currying can, often, be illuminating regarding argument order and function implementation.  At the very least we might land on a first uniform, stable application. Let's have a look at what currying is and how we can apply it to our existing function.

Formal currying is defined as converting a function of multiple arguments to a series of on-argument functions.  This means currying a function of 3 elements would go a little like this:

<pre class="language:javascript">
    function lambda (a, b, c) {
        return op(a, b, c);
    }
    
    function lambda (a) {
        return function (b) {
            return function (c) {
                return op(a, b, c);
            };
        };
    }
</pre>

If we apply this formal definition to our function, it will produce a new series of functions which are called in order.  This means each function progressively accumulates information about execution state without needing any external management system or object.  Let's take a look at a formal currying of slice.

<pre class="language:javascript">
    function slice (start){
        return function (values) {
            return function (end) {
                var cleanEnd = pickEnd(end, values.length);
                return Array.prototype.slice.call(values, start, cleanEnd);
            };
        };
    }
</pre>

If we use this new definition of slice, we will need to revise the implementation of our functions.  Let's dig in and see how currying makes application more uniform.

<pre class="language:javascript">
    var argumentsToArray = function (values) { return slice(0)(values)(); }; 
    var dropFirstThree = function (values) { return slice(3)(values)(); }
    var takeFrom1to3 = function (values) { return slice(1)(values)(3); };
</pre>

Although we have to wrap each new function in an anonymous wrapper, we now have complete uniformity in how we apply slice.  With this uniformity, we can now, safely, reorganize code and guarantee code depending on our API won't break.

<h3>Three Arg Monte</h3>

Since each of our derivative functions only take an array as an argument, we can fiddle with the inner workings so long as we don't alter the output.  Suppose we swap the order of the output functions, capturing values at different stages of execution.  It is, in fact, no different than if we had reordered the parameter list in the original function, but without the pesky .bind() bit.

Let's take our curried function and move our end parameter up the chain, next to the start parameter.  This means our function series will always take a start and end value, which makes our values parameter the last argument.  Let's see the resulting reorganization.

<pre class="language:javascript">
    function slice (start){
        return function (end) {
            return function (values) {
                var cleanEnd = pickEnd(end, values.length);
                return Array.prototype.slice.call(values, start, cleanEnd);
            };
        };
    }
</pre>

With this new parameter order, we actually move the values parameter to the correct position; in other words, we can apply all of our indices first and take the values argument last, leaving us in a position which is correct for creating a variety of novel behaviors directly.

<pre class="language:javascript">
    var argumentsToArray = slice(0)();
    var dropFirstThree = slice(3)();
    var takeFrom1to3 = slice(1)(3);
</pre>

Our application of slice has remained uniform, while allowing us to exclude the anonymous function wrapper for all three applications.  This is definitely closer to what we really meant to say at the beginning.  If only we could get rid of that required second call.

<h3>Collapsing The Calls</h3>

Now that we have found a parameter order which serves us the best, let's get rid of the extra function call.  It is useful for takeFrom1to3, but it actually makes the application of slice for argumentsToArray and dropFirstThree unnecessarily complicated since we call a function with no argument.  We want to eliminate confusion where possible.

Since curried functions can be expanded from multiple argument functions, what's to stop us from reversing the process?  Moreover, it is reasonable to collapse only the parameters we want at a given level.  Let's reverse the currying process for start and end and see what we get.

<pre class="language:javascript">
    function slice(start, end) {
        return function (values) {
            var cleanEnd = pickEnd(end, values.length);
            return Array.prototype.slice.call(values, start, cleanEnd);
        };
    }
</pre>

Slice has been collapsed back into a function which captures our indices early and applies them, lazily, to the final argument as we need execution to complete.  This means we can actually get the uniformity we saw in earlier reorganizations, with the API sanity of a well-defined function, which happens to optionally take an extra argument after a start index.  This is probably best viewed in an example.

<pre class="language:javascript">
    var argumentsToArray = slice(0);
    var dropFirstThree = slice(3);
    var takeFrom1to3 = slice(1, 3);
</pre>

Throughout the process, all three of our derivative functions have only ever taken a values argument, but the application of our deeper=level function has brought us to a point where the contract is most sensible for flexible application and reuse.  Better yet, each of the slice applications expresses the intent more closely since only the indices we intend to use are used at application time.

<h3>API Clarity, At Last</h3>

Someone said, recently, on Twitter that what most people call currying is actually partial application.  As it turns out this is only partially true.  The line between currying and partial application is so blurred, I am inclined to argue that partial application is merely a special case of the more general form of function currying.

Moreover, currying is not a one-way street.  Instead, it is a tool to help us identify better ways to express our programs through expanding and collapsing arguments.  By better understanding how currying works, we can actually experiment with different configurations of our functions, ideally, without overhauling contracts, types and the like.

When used with intent and care, currying enables us to create functions which have sane, meaningful and expressive contracts while also providing the flexibility to fluidly apply a general-purpose function in a variety of different situations.  In other words, if your function contract stinks, maybe it's time to apply a little currying and make your code awesome!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1166</wp:post_id>
		<wp:post_date><![CDATA[2016-06-15 08:00:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-15 16:00:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[currying-matters-clarifying-contracts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551407399;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1133;}i:1;a:1:{s:2:"id";i:939;}i:2;a:1:{s:2:"id";i:854;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Types, Sets and Characteristics</title>
		<link>http://www.chrisstead.net/archives/1173/types-sets-and-characteristics/</link>
		<pubDate>Wed, 22 Jun 2016 16:00:46 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1173</guid>
		<description></description>
		<content:encoded><![CDATA[A couple weeks ago, we looked at using Signet and some of the core types <a href="http://www.chrisstead.com/archives/1160/enforcing-endpoints-types-and-signet/" target="_blank">to add type information to function calls</a>. Although it is handy to have a variety of base types available to provide signatures for your functions, sometimes you want more control and finer-grained behavior.

At the most foundational level, applied types can be viewed as sets of values. This means, for any type, we can easily construct a set which will describe that type.  For instance, the type 'string' can be written as the set of all values which are strings.  Although this may seem like a trivial way to perform a conversion of a type to a set, it gives us a way to start rethinking the way we interact with type information.

<h3>Sets as Types</h3>

We can, somewhat informally, say that sets are types.  Although this doesn't capture the nuance of types, it allows us to capture a lot of power in a simple idea.  We looked at defining the string type as a set of values.  What this really means is, strings are a certain set of values within all values assignable.

If we begin our sets by considering all values assignable and available in within Javascript, we can refer to that set as our "universe."  Within that universe, we could choose a variety of different sets, but regardless of which set we choose, the new set will be contained completely within the original universe.

Using this universal definition, we can consider our strings again and consider how we might describe our set of all strings.  First of all, we can ask if a value is contained within our universe.  A good example of a value which is distinctly NOT in the Javascript universe is 1000! (1000 factorial). Although this is an integer which actually exists, Javascript will simply evaluate it as infinity. This is not something we will need to test for, it is simply the indication of an upper bound in Javascript.

We could, however, define a set of numbers we declare as our domain set.  We can call this an explicit set definition.  By turns, we can define a set by way of excluding items which are not in the set.  This inverse set can, equally, be declared explicitly, or we can define a function which will simply tell us whether something is in the set or not.  This implicit method of creating a set can be referred to as an induced set.

Let's take a look at a meaningful question we could ask. Let's ask if a value is a number.  This means we are going to call a function which accepts type of * and returns a boolean. This kind of function is called a characteristic function.

<pre class="language:javascript">
function isNumber (value) {
    return typeof value === 'number';
}
</pre>

Although this function, by itself, is not a big step away from what we already know, it lays the groundwork for defining a richer set of types we can interact with.  From the function isNumber, we get an induced set of all values which are numbers, rather than defining the type set explicitly.

<h3>Propositions and Predicates</h3>

It has been shown in the academic community that <a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0ahUKEwikjMjcq7LNAhVP7GMKHVTTADEQtwIIJjAB&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DIOiZatlZtGU&usg=AFQjCNG2bGRvqMzyXUgApuaNuMSwjiCMyQ&sig2=pZD9rwyiBUnL7Jh56z0zqg&bvm=bv.124817099,d.cGc" target="_blank">propositions are types</a>. What this means is we can actually consider propositions such as A and B in the expression A &or; B as types unto themselves.

Any proposition can either resolve to a theorem (&top;) or an antitheorem (&bottom;) which roughly equates to the idea of true or false.  In other words, we can ask a question and the answer will either be "yes" or "no."  Although this seems non-obvious, at its face, this is the foundation we will use to construct a richer set of types within Javascript.

We have already seen type construction where we use a predicate to manage inclusion in a type set. We are stating that a value &alpha; must be in the set of numbers if &alpha; is a number.  Even stronger than that, we can say, since our set contains ONLY values which are numbers that if &alpha; is in the set of numbers it has a type of number.  This relationship between sets and type implementations is important for capturing greater amounts of information about a value as we construct subsets from sets we have defined.  Let's have a look at the logical notation to see predicates in action, so we can tie that together with our predicate notation.

N<sub>js</sub> = the set of all values which are Javascript numbers
A: &alpha; is a Javascript number
B: &alpha; &in; N<sub>js</sub>;

A &rarr; B
B &rarr; A

Of course in our implementation we really only worry about the second relation, i.e. that if a value is in the set of values which conform to the number type, the value must also conform to the number type.  Given the definition of B, &alpha; &in; N<sub>js</sub>;, we can actually conclude that the first relation is true given the definition of N<sub>js</sub>.

We can actually reformulate this to express the type-set relation more generally.  If we simply replace our specific number set with a set of any type &Tau; we get a new, very useful formulation we can use to extend our type reach well beyond the specifics of the language.

&Tau;<sub>js</sub> = the set of all values expressible in Javascript of type &tau;
A: &alpha;<sub>&tau;</sub> is a Javascript value of type &tau;
B: &alpha;<sub>&tau;</sub> &in; &Tau;<sub>js</sub>

A &rarr; B
B &rarr; A

That's a lot of symbols, words and relations. What this really means is we can identify and define any arbitrary type logically and, in turn, define a set containing all values of that type, which will induce an "if and only if" (iff) relationship.  That's a lot of words and symbols. Let's take a look at how we might use this to implement our own type.

<h3>Defining a New Javascript Type</h3>

Clearly we won't be able to build our type into the core language without getting on TC39, issuing a new standard and waiting for several years while everyone adopts it, but we can induce our type through a new predicate function.  Let's suppose we want to define a new type, Integer. We could express our type in the following way:

Int<sub>js</sub> = the set of all values expressible in Javascript of type number which are integers
&alpha;<sub>int</sub> &in; Int<sub>js</sub>

With this, we can define a function expressing this relationship, which we can use to verify whether a value is in our set Int<sub>js</sub> or not.  With regard to the relation between types, expressible values in Javascript and our integer set, we can guarantee the stability of our type and the correctness of our verification.

<pre class="language:javascript">
    function isInt (value) {
        return typeof value === number && Math.floor(value) === value;
    }

    isInt(5); // true
    isInt(9.3); // false
</pre>

Although this function is sufficient for verifying whether a value is an integer, we are actually duplicating our efforts.  Moreover, it lacks a certain expressiveness which we might like to see.  Let's use our original isNumber function to say a little more about the meaning of our int type.

<pre class="language:javascript">
    function isInt (value) {
        return isNumber(value) && Math.floor(value) === value;
    }
</pre>

This new function performs the same check as the original, but it reflects a deeper relationship between our number set, N<sub>js</sub>, and our integer set, Int<sub>js</sub>.  In other words, what we can see expressed here is the typical inheritance property of the is-a relationship.

<h3>The Is-A Relationship of Types</h3>

As is true for objects in classical object oriented programming, types can also have an inheritance relationship where one type is a subtype of another.  This is what we mean by is-a relationship.  We can say an integer is a number, or a name is a string.  Although an integer can be a type in its own right, we know the number type is the foundation type in Javascript for any numeric representation.  This means, for any function which requires a number, an integer is an acceptable value.

Our isInt function demonstrates the is-a relationship by using the number set definition as the first requirement of our check for set inclusion.  Let's continue the chain and create a characteristic function to defining our natural number. Our natural number set will be a strict subset of our integer set.

<pre class="language:javascript">
    function isNatural (value) {
        return isInt(value) && value >= 0;
    }
</pre>

Now we can see that a natural number is an integer which is a number.  This, of course, is similar to OO subtyping with regard to relationship, but is compositional in nature.  In fact we can actually describe this type relationship as a relationship of sets, like so:

Natural<sub>js</sub> &sub; Int<sub>js</sub> &sub; Number<sub>js</sub>

With the repeated behavior of including a function call from the superset, we can start looking for a way to uniformly describe our sets and their relationships.  Let's create a new function, subtype, to help us create set relationships in order to streamline the process of defining type relationships.

<pre class="language:javascript">
    function subtype(parentCharacteristic) {
        return function (childCharacteristic) {
            return function (value) {
                return parentCharacteristic(value) && childCharacteristic(value);
            };
        };
    }
</pre>

Subtype allows us to define our types with functional composition and define our new characteristics with the assumption that we are already working from within a specific type.  Let's rewrite our isNatural check using subtype.

<pre class="language:javascript">
    function isNaturalType (value) {
        return value >= 0;
    }
    
    var isNatural = subtype(isInt, isNaturalType);
</pre>

Now the body of our characteristic function is expressed with an implicit relation to the superset of natural numbers, integers.  This kind of higher-order function use to express set relations is extremely powerful for defining and describing value types we can use in our development.

<h3>Wrapping Up</h3>

This was a somewhat dense tour of how we can construct types in Javascript, so don't worry if it takes a little while to pull the pieces together.  The important take-away is that we can construct our own types with meaningful names and clear relationships in order to better understand the way our programs work.

At the end of the day, we are human, so expecting us to actively deal in generalized abstractions such as strings and numbers may not be a reasonable request.  Instead, we can reclaim the reins and define our own type language which speaks to future developers in the language of our intent.  Go make types and make your programs better!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1173</wp:post_id>
		<wp:post_date><![CDATA[2016-06-22 08:00:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-22 16:00:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[types-sets-and-characteristics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="types"><![CDATA[Types]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551586064;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1187;}i:1;a:1:{s:2:"id";i:1133;}i:2;a:1:{s:2:"id";i:766;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Domain Modeling For Better Contracts</title>
		<link>http://www.chrisstead.net/archives/1187/domain-modeling-for-better-contracts/</link>
		<pubDate>Wed, 29 Jun 2016 16:00:52 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1187</guid>
		<description></description>
		<content:encoded><![CDATA[In the post about communicating contracts through <a href="http://www.chrisstead.com/archives/1160/enforcing-endpoints-types-and-signet/" target="_blank">enforcing endpoint contracts</a>, we took a look at some basic types which are available in Signet. Today we are going to talk about how to add more information to your types by creating your own data types.

Last week we took a look at <a href="http://www.chrisstead.com/archives/1173/types-sets-and-characteristics/" target="_blank">how to build types as sets</a> with characteristic functions.  This week we will apply that information in order to add extra information to our types.

By this point I'm certain there are plenty of people who are thinking I've gone completely off the rails.  Javascript, after all, is a dynamically typed language. Don't burden yourself with all of this type stuff and just write some code!

Although this is true, most people view types as a constraint which only causes pain.  Though this might be true if you are coming from a language like Java which contains lots of artificial constraints around type creation, and after all is said and done, the types are still weak and restrictive.

On the other hand, if we consider types as a way to add a layer of correctness checking and a tool for communicating with others, types become less a restriction and more a tool we can use to make our programs better.  Good types will make a program transparent and predictable.  These are traits we definitely want in our programs.

Just as a refresher, let's have a look at where we left off with our purchase API from the enforcing endpoints blog post.  This way we have a common position to understand where we started and where we're going.

<pre class="language:javascript">
    var api = {
        computeTax: signet.enforce('number => number => number', computeTax),
        computeTotal: signet.enforce('function => number => number', computeTotal),
        computeSubtotal: signet.enforce('array => number', computeSubtotal)
    };

    let computePurchaseTotal = signet.enforce(
        'number, array => number',
        function computePurchaseTotal(tax, purchases) {
            return enforcedApi.computeTotal(enforcedApi.computeTax(tax))(enforcedApi.computeSubtotal(purchases));
        }
    );
</pre>

Now that we have our API defined with regard to basic types, we can start to ask more meaningful questions.  Instead of asking things like "what does this function do," we can ask directed questions to inform our programming better:  What kind of numbers are they? What is in the array? What kind of argument must the function take?

The last two questions are easiest to answer since we don't have to look any farther than higher-kinded types.  This is, of course, scary sounding the first time you hear it. I had no clue what a higher-kinded type was the first time I heard the word.  Fortunately, many of you may already be familiar with them even if you don't know the word.  Java and C# both support higher-kinded types.

<h3>Higher-Kinded Types and You</h3>

First and foremost, let's discuss what a higher-kinded type actually is. (It's a type.)  Once we have a better grasp on that, we will use it in code to make everything a little more clear.

A higher-kinded type is simply a type which takes a type as an argument and returns a type. I know, that sounds weird.  How does a number take a string and return a type?  I asked the same thing.

It turns out, however, that it's not nearly as foreign as it might seem. One very common type we rarely think about in Javascript which could easily be handled as a higher-kinded type is an array. An array is, itself, a type, but it contains values which are also typed.  This means, if we had a language to express it, we could declare an array which contains only a single type.

As it turns out, there are potentially infinite different types which are, or could be, higher-kinded.  In this post we are going to look at just two: array and function.  With the type signature language available with signet, we can explicitly declare an array type as needed.  This means we can do things like the following.

<pre class="language:javascript">
var isArrayOfNumbers = signet.isTypeOf('array<number>');

isArrayOfNumbers([1, 2, 3, 4, 5]); // true
isArrayOfNumbers([1, 2, 3, 4, 'foo', 'bar', 'baz']); // false
</pre>

We can see both of the tested arrays are completely valid Javascript arrays, but the second is not an array of exclusively numbers.  There are ways we could create an array which would support numbers and strings, but that's beyond the scope of this post.

Just like we can declare information about arrays, we can also say something about the expectations around a function.  Instead of simply saying a value is "function," we can actually say a value is a "function which takes a number."  In much the same way we declare our types in arrays, our function type declaration is "function<number>."

Now that we have an expanded type language to draw upon, let's update our API and clarify the communication of our domain model.

<pre class="language:javascript">
    var api = {
        computeTax: signet.enforce('number => number => number', computeTax),
        computeTotal: signet.enforce('function<number> => number => number', computeTotal),
        computeSubtotal: signet.enforce('array<object> => number', computeSubtotal)
    };

    let computePurchaseTotal = signet.enforce(
        'number, array<object> => number',
        function computePurchaseTotal(tax, purchases) {
            return enforcedApi.computeTotal(enforcedApi.computeTax(tax))(enforcedApi.computeSubtotal(purchases));
        }
    );
</pre>

<h3>Subtyping With Characteristics</h3>

Now we just have the 'number' type scattered everywhere throughout our code. Although this is better than nothing, it would be SO MUCH better if we actually knew something about those numbers.  What do they mean? How are they used? What are the constraints?

It turns out we have just the thing to remedy this pain, it's called characteristic functions.  As we know from our <a href="http://www.chrisstead.com/archives/1173/types-sets-and-characteristics/" target="_blank">earlier discussions on characteristics</a>, we can add richness to our type system through set-describing predicate functions. (Protip: all predicates describe sets)

Before we dive into creating new types willy-nilly, let's take a moment to account for the different number types we have. By properly identifying the actual domain language we care about, we can create better types which will allow us to clearly describe our application to people who might know nothing about it.

Ultimately, we care about tax, price, amount of tax to pay (tax amount) and purchase total. If we were to simplify this list a bit, we can identify a couple of distinct bits of information.

First let's consider tax. Tax is a percentage amount.  Since, where I live, taxes are always greater than or equal to 0%, but always less than 100%, I am going to say tax is a percent value which will always fall between 0 and 1.  For example, in San Diego, sales tax is currently around 8% or 0.08.

Now, we can take a look at price, tax amount and purchase total.  Each of these is a value which is related to a value an amount our customer will be paying.  This means we can roll these all into some aspect of price.  We will say a price value will be greater than or equal to 0.  This describes our data pretty accurately for the moment, so let's go with that.

With our base types sorted out in a way we can jump off from, we can start building characteristics. By clearly defining our characteristics, we give our new types programmatic meaning. Let's see what our basic characteristic functions will look like for price and percent.

<pre class="language:javascript">
    function checkTax(value) {
        return 0 <= value && value <= 1;
    }

    function checkPrice(value) {
        return 0 <= value;
    }
</pre>

The other piece of this puzzle is, we need to register our types with Signet.  Fortunately, this is a simple process.  We know that each of these types is actually a number, so we can simply use the subtype function and declare these two functions as new types, inheriting from number.  This is also why we didn't need to test each value to see if it is a number, our subtyping will guarantee we only verify numbers.

<pre class="language:javascript">
    signet.subtype('number')('tax', checkPercent);
    signet.subtype('number')('price', checkPrice);
</pre>

We can use our price type to create our other two types by simply aliasing them and using the price definition to ensure our data constraints are clear.

<pre class="language:javascript">
    signet.alias('taxAmount', 'price');
    signet.alias('purchaseTotal', 'price');
</pre>

Let's have a look at our updated API and see how our types are coming along!

<pre class="language:javascript">
    var api = {
        computeTax: signet.enforce('tax => price => taxAmount', computeTax),
        computeTotal: signet.enforce('function<price> => price => purchaseTotal', computeTotal),
        computeSubtotal: signet.enforce('array<object> => price', computeSubtotal)
    };

    let computePurchaseTotal = signet.enforce(
        'tax, array<object> => purchaseTotal',
        function computePurchaseTotal(tax, purchases) {
            return enforcedApi.computeTotal(enforcedApi.computeTax(tax))(enforcedApi.computeSubtotal(purchases));
        }
    );
</pre>

<h3>Duck Typing our Object</h3>

At this point, our API is pretty clear, but there is still one last type which just doesn't quite convey the information we want to know.  Our array of purchases is still described, simply, as an array of objects.  This could be much better, if only there were a way to check it.

As it turns out, the Go language has popularized the notion of object similarity through duck typing and that is precisely what we are going to do here.  If we know enough information, we can tell whether our object satisfies the Liskov substitution principle, and can be used in place of our intended object.

Signet provides a means to perform duck typing as well, so we don't have to build our characteristic function from the ground up every time, because that could end up being a LOT of repeated code.  Let's build a duck typing characteristic and finish up our API types.

<pre class="language:javascript">
    let checkPurchase = signet.duckTypeFactory({ price: 'price', quantity: 'int' });

    signet.subtype('object')('purchase', checkPurchase);
</pre>

Now we have a name for our purchase object type, which means we can easily check whether our array of purchases actually adheres to our expectations.  Plus this will provide a way for others to understand what we intended when we wrote the code, making it much easier to write new code against the existing API.

<pre class="language:javascript">
    api = {
        computeTax: signet.enforce('tax => price => taxAmount', computeTax),
        computeTotal: signet.enforce('function<price> => price => purchaseTotal', computeTotal),
        computeSubtotal: signet.enforce('array<purchase> => price', computeSubtotal)
    };

    computePurchaseTotal = signet.enforce(
        'tax, array<purchase> => purchaseTotal',
        function computePurchaseTotal(tax, purchases) {
            return enforcedApi.computeTotal(enforcedApi.computeTax(tax))(enforcedApi.computeSubtotal(purchases));
        }
    );
</pre>

<h3>Wrapping Things Up</h3>

Although this just scratches the surface of using types in your program, hopefully this exercise helps you communicate intent and define a clear domain model. By taking core types we already know and applying a small amount of predicate logic, we surface a new way to talk about our program and the data we use.

Instead of simply using old code as a reference for what it does, add a little annotation, a little bit of logic and get a lot more bang for your buck.  In the end, types don't make everything correct all the time, but they do a lot to make you and others like you a lot more awesome!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1187</wp:post_id>
		<wp:post_date><![CDATA[2016-06-29 08:00:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-29 16:00:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[domain-modeling-for-better-contracts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="data-structures-foundation"><![CDATA[Data Structures]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="foundation"><![CDATA[Foundation]]></category>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="types"><![CDATA[Types]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551595706;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1133;}i:1;a:1:{s:2:"id";i:1119;}i:2;a:1:{s:2:"id";i:1173;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why Should I Write Tests?</title>
		<link>http://www.chrisstead.net/archives/1200/why-should-i-write-tests/</link>
		<pubDate>Wed, 08 Feb 2017 16:00:34 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1200</guid>
		<description></description>
		<content:encoded><![CDATA[There has been an ongoing discussion for quite some time about whether automated tests are or are not a good idea.  This is especially common when talking about testing web applications, where the argument is often made that it is faster to simply hack in a solution and immediately refreshed the browser.

Rather than trying to make the argument that tests are worthwhile and they save time in the long run I would rather take a look at what it looks like to start with no tests and build from there.  Beyond the case for writing tests at all, I thought it would be useful to take a look at the progression of testing when we start with nothing.

Without further ado, let's take a look at a small, simple application which computes a couple of statistical values from a set of sample numbers. Following are the source files for our stats app.

<script src="https://gist.github.com/cmstead/cb4328c627fedb3ccad9467e68af4416.js"></script>
<script src="https://gist.github.com/cmstead/837bcf73f87136bd6fe16eb6b25758f5.js"></script>
<script src="https://gist.github.com/cmstead/53f684144a13d4d1b213c06c32594570.js"></script>

Now, this application is simple enough we could easily write it and refresh the browser to test it.  We can just add a few numbers to the input field and then get results back.  The hard part, from there, is to perform the computation by hand and then verify the values we get back.

[caption width="390" align="aligncenter"]<img src="http://www.chrisstead.com/wp-content/uploads/2017/02/ui-manual-test.png" width="390" height="190" alt="Example of manual test output" class /> Manual test example[/caption]
<br clear="all"/>

Doing several of these tests should be sufficient to prove we are seeing the results we expect.  This gives us a reasonable first pass at whether our application is working as it should or not.  Beyond testing successful cases, we can try things like putting in numbers and letters, leaving the field blank or adding unicode or other strange input.  In each of these cases we will get NaN as a result.  Let's simply accept the NaN result as an expected value and codify that as part of our test suite.  My test script contains the following values:

<table>
<tr>
<th>Input</th>
<th>Mean</th>
<th>Standard Deviation</th>
</tr>
<tr>
<th colspan="3">Success Cases</th>
</tr>
<tr>
<td>1, 2, 1, 2</td>
<td>1.5</td>
<td>0.5</td>
</tr>
<tr>
<td>1, 2, 3, 1, 2, 3</td>
<td>2</td>
<td>0.816496580927726</td>
</tr>
<tr>
<th colspan="3">Failure Cases</th>
</tr>
<tr>
<td></td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>a, b</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</table>

Obviously, this is not a complete test of the system, but I think it's enough to show the kinds of tests we might throw at our application. Now that we have explored our application, we have a simple test script we can follow each time we modify our code.

This is, of course, a set up. Each time that we modify our code, we will have to copy and paste each input and manually check the output to ensure all previous behavior is preserved, while adding to our script.  This is the way manual QA is typically done and it takes a long time.

Because we are programmers, we can do better. Let's, instead, automate some of this and see if we can speed up the testing process a little.  Below is the source code for a simple test behavior for our single-screen application.

<script src="https://gist.github.com/cmstead/6547be46df5a92dbfa5f7b7989bcd701.js"></script>

With our new test runner, we can simply call the function and pass in our test values to verify the behavior of the application.  This small step helps us to speed the process of checking the behaviors we already have tests for and we only need to explore the app for any new functionality we have added.

Once the app is loaded into our browser, we can open the console and start running test cases against the UI with a small amount of effort.  The output would look something like the image below.

[caption width="518" align="aligncenter"]<img src="http://www.chrisstead.com/wp-content/uploads/2017/02/simple-ui-test-runs.png" width="518" height="238" alt="Single-run tests scripted against the UI" class /> Single-run tests scripted against the UI[/caption]
<br clear="all"/>

We can see this adds a certain amount of value to our development effort by automating away the "copy, paste, click, check" tests we would be doing again and again to ensure our app continued to work the way we wanted it.  Of course, there is still a fair amount of manual work we are doing to type or paste our values into the console.  Fortunately we have a testing API ready to use for more scripting.  Let's extend our API a little bit and add some test cases.

<script src="https://gist.github.com/cmstead/418dd9844292709cdfb173a8754141c8.js"></script>

Now, this is the kind of automated power we can get from being programmers.  We have combined our test value table and our UI tests into a single script which will allow us to simply run the test suite over and over.  We are still close enough to the original edit/refresh cycle that our development feels fast, but we also have test suites we can run without having to constantly refer back to our test value table.

As we write new code, we can guarantee in milliseconds whether our app is still working as designed or not.  Moreover, we are able to perform exploratory tests on the app and add the new-found results to our test suite, ensuring our app is quick to test from one run to the next.  Let's have a look at running the test suite from the console.

[caption width="704" align="aligncenter"]<img src="http://www.chrisstead.com/wp-content/uploads/2017/02/batched-ui-test-runs.png" width="704" height="198" alt="Test suite run from the browser console" class /> Test suite run from the browser console[/caption]
<br clear="all"/>

Being able to rerun our tests from the console helps to speed the manual write/refresh/check loop significantly.  Of course, this is also no longer just a manual process.  We have started relying on automated tests to speed our job.

This is exactly where I expected we would end up.  Although this is a far cry from using a full framework to test our code, we can see how this walks us much closer to the act of writing automated tests to remove manual hurdles from our development process.

With this simple framework, it would even be possible to anticipate the results we would want and code them into the tests before writing our code so we can simply modify the code, refresh and run our tests to see if the new results appear as we expected.  This kind of behavior would allow us to prove we are inserting required functionality into our programs as we work.

Though I don't expect this single post to convince anyone they should completely change the way they develop, hopefully this gives anyone who reads it something to think about when they start working on their next project, or when they go back to revisit existing code.  In the next post, we'll take a look at separating the UI and business logic so we can test the logic in greater depth. Until then, go build software that makes the world awesome!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1200</wp:post_id>
		<wp:post_date><![CDATA[2017-02-08 08:00:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-08 16:00:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[why-should-i-write-tests]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="automated-testing"><![CDATA[Automated Testing]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551590596;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1217;}i:1;a:1:{s:2:"id";i:1238;}i:2;a:1:{s:2:"id";i:919;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Case for Quickspec</title>
		<link>http://www.chrisstead.net/archives/1217/a-case-for-quickspec/</link>
		<pubDate>Mon, 02 Oct 2017 16:00:33 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1217</guid>
		<description></description>
		<content:encoded><![CDATA[Any software community has a contingent which agrees that tests are a good thing and testing first leads us to a place of stable, predictable software.  With this in mind, the biggest complaint I've heard from people is "testing takes too long!"

This blog post covers the testing library <a href="https://www.npmjs.com/package/quickspec" rel="noopener" target="_blank">Quickspec, which can be installed from NPM</a>, so you can follow along!

All tests in this post will be written to test the following code:

<script src="https://gist.github.com/cmstead/0cfbc6c9993a547ccc406bef0a071bb3.js"></script>

<h3>Testing a Composition With Mocha and Chai</h3>

Coming from a background of testing first, I am used to writing tests quickly, but even I have to concede, there are times I just don't want to write all of the noise that comes with multiple use cases.  This is especially true when I am writing tests around a pure function and I just want to verify multiple different edge cases in a computation.

If we were going to test several cases for the composition multiplyThenDivide, the output would look a lot like the following:

<script src="https://gist.github.com/cmstead/aa3e3bb2c85e7b8915f65913662279e4.js"></script>

<h3>Testing a Composition with Mocha and Quickspec</h3>

Although testing a simple composition like this is not particularly hard, we can see representing all interesting cases actually requires a whole bunch of individual tests.  Arguably, there are enough cases, we'd get bored testing before the testing is actually done (and we did!).

What if we could retool this test to be self contained and eliminate the testing waste?

This is the question is precisely what Quickspec aims to answer.  Let's have a look at what a simple Quickspec test might look like:

<script src="https://gist.github.com/cmstead/e07dc87c70d326be44e0fe8dd5e5bf4f.js"></script>

<h3>Why Is This Better?</h3>

<h4>Separation of Setup and Execution</h4>

The first benefit we get from using Quickspec is we can see, up front, what all of the cases are we are going to test.  This makes it much easier to see whether we have tested all of the cases we care about.  This means we have a clear picture of what our tests care about and it is completely separated from the execution of the code under test.

<h4>Deduplication of Test Execution</h4>

The second benefit we get is, we eliminate duplicate code.  In this example, the duplication is simply a call to multiplyThenDivide and a call to verify, but this could have represented a full setup of modules or classes, dependency injection and so on. It's common to have this kind of setup in a beforeEach function, but this introduces the possibility of shared state, which can make tests flaky or unstable.

Instead, we actually perform our setup and tie it directly into our test. This means we have a clear path of test execution so we can see how our specifications link to our test code.  Moreover, we only have to write any test boilerplate once, which means we reduce the amount of copy-paste code which gets inserted into our test file.

<h4>Declarative Test Writing</h4>

Finally, if it is discovered a test is missing all it takes is the definition of a test case and we're done.  There is no extra test code which needs to be written, or extra boilerplate to be introduced. Each test is self contained and all specifications are clearly defined, which means our tests are more declarative and the purpose is clear.

<h3>Other Testing Capabilities</h3>

<h4>Async Testing</h4>

Quickspec is written around the idea that code is pure, thus deterministic, but it is also built to be usable in asynchronous contexts, which is a reality in Javascript.  This means things like native Javascript promises and other async libraries won't make it impossible to test what would, otherwise, be deterministic code.

<h4>Testing with Theorems</h4>

Writing theorem tests with Quickspec could be its own blog post, so I won't cover the entirety here, though this is an important point.

Instead of hand-computing each expected value, Quickspec allows you to write tests where the outcome is computed just in time.  This applies especially well where outcomes are easily computable, but the entire process to handle special cases could lead to extra winding code, or code which might actually use an external process to collect values in the interim.

<h3>What this all means</h3>

In the end, traditional unit tests are great for behaviors which introduce side effects like object mutation, state modification or UI updates, however, when tests are deterministic, Quickspec streamlines the process of identifying and testing all of the appropriate cases and verify the outcomes in a single, well-defined test.

Install <a href="https://www.npmjs.com/package/quickspec" rel="noopener" target="_blank">Quickspec from NPM</a> and try it out!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1217</wp:post_id>
		<wp:post_date><![CDATA[2017-10-02 08:00:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-02 16:00:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-case-for-quickspec]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551682493;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1200;}i:1;a:1:{s:2:"id";i:1128;}i:2;a:1:{s:2:"id";i:655;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating Programmer Joy with Type Enforcement</title>
		<link>http://www.chrisstead.net/archives/1226/creating-programmer-joy-with-type-enforcement/</link>
		<pubDate>Fri, 29 Dec 2017 18:22:13 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1226</guid>
		<description></description>
		<content:encoded><![CDATA[It's extremely common for developers who work in statically typed languages to talk about how much easier their code is to maintain and that the code is self-documenting because of the type system.  However, these same programmers often talk about the amount of "ceremony" they have to overcome to work within the type system and language of their choice.  The ceremony issue seems to be reduced to zero within the Javascript community because of the dynamic type system.  On the other hand it is common to hear JS developers complain about the level of difficulty regarding maintaining a codebase which brought them so much joy while they were creating it.

In a project I have been maintaining for the last couple of years, I started off with the creation joy only to find myself fearing the idea of jumping back in and making updates to resolve bugs logged by users.  I started considering options.  Should I rewrite the entire codebase from scratch? Should I write it with a different language altogether?  It is a plugin for VS Code, so Typescript is the preferred option, though everything I wrote was in vanilla Javascript.

Between the creation of <a href="https://marketplace.visualstudio.com/items?itemName=cmstead.jsrefactor" rel="noopener" target="_blank">JS Refactor</a> and this past November, I started creating a suite of different libraries all of which were employed to solve the exact kinds of problems I had in my plugin: tight coupling, undocumented code, uncertainty, and the requirement of having to go back and reread my code to rebuild context so I could start working again.

The last two issues were my greatest hurdle. I felt completely uncertain about what the code looked like which I had written to create the plugin in the first place and the only way to understand it was to go back and read it again.

Ultimately, for all of the effort I made to keep my code clean, I had still created write-only code and I was miserable about it.  Nevertheless, I started with the first bug that made sense for me to tackle and dove in.  I plodded along and my dread quickly turned into joy.  Something had happened which actually made me want to throw myself back into this (tested) legacy project.

Somewhere in the process I discovered real programmer joy.

Set aside the fact that I created a <a href="https://www.npmjs.com/package/dject" rel="noopener" target="_blank">dependency injection library</a> and integrated it a while back (this was not the source of my joy). Let's even set aside the tool I created for <a href="https://www.npmjs.com/package/mochadoc" rel="noopener" target="_blank">turning automated tests written in Mocha, Jasmine and Jest into human readable documentation</a>.  The thing that made my life easy and joyful were the types!

No, I didn't make the switch to Typescript.  For all the good Typescript offers to the user, the issue of being constrained by the type system was still too much for me to bear.  Instead I stayed within plain old Javascript and started really leaning hard on the <a href="https://www.npmjs.com/package/signet" rel="noopener" target="_blank">Signet type system</a>.

First things first, I started identifying the types of objects and data I was going to interact with and I created just enough type information to say something meaningful about it all.  Here's a sample of what I created:

<script src="https://gist.github.com/cmstead/7e72bb3dc4db04ef562531bd04c8e78a.js"></script>

After I got my type information lined up, I started working. As I slung code and discovered new information about the data I was working with, I tweaked my types to tell future me, or another developer, what kind of information really was lurking in that data with which I was interacting.

As I worked I would forget what a specific API called for, or how it worked.  I would open the source code and, instead of trying to interpret the functions I had created, I simply referred to the signatures at the bottom and my context was instantly rebuilt.

What made this such a revelatory experience was not that I simply had type information encoded into my files, but it was always accurate and, if I got something wrong, I would get real, useful information about how I could fix it. The types are evaluated at run time and could verify things like bounded values and in-bound function behaviors. The more code I wrote, the faster I got.  The more I introduced types and encoded real, domain-specific information into my files, the better my program became.

My code came to look like the kind of code I always wanted to write: strict and safe at the edges and dynamic in the middle.  As long as I know what is coming in and what is going out I am safe to trust myself, or anyone else, to behave as they should in the middle of their function, because they can't get it wrong.

All of a sudden typed variables became irrelevant and creating something from what existed became an exercise in joy.  The game went from dynamic or static to dynamic and dependent.  I could encode logical notions into my software and they always led to something better. An example of what this looks like is as follows:

<script src="https://gist.github.com/cmstead/1eff9e7ddcf2f2195788dca8a4edc8ab.js"></script>

With all of this information encoded in my program, I could start writing tests which actually described what is really happening under the covers.  Creating example data could be done relatively effortlessly by simply fulfilling the type contract.  Even creating and interacting with automated tests brought me joy:

<script src="https://gist.github.com/cmstead/e29ff045591f7f2dfc3064ad380f07b2.js"></script>

This meant that all of the code would lead back around to the start again and each piece, type definitions, type annotations and tests, told the story of how the program worked as a whole. For the small amount of extra work at the beginning of a given thread of thought, the payout was tremendous at the end.

Now, does this mean that types ARE joy? No.

All this really says is a good, rich type system can, and should, help tell the story of your program.  It is worth noting my code reflects the domain I work in, not the types of data living within objects and values. Arguably, if a programmer goes type crazy and codes something obscure into types (like some of the atrocities committed by overzealous Scala programmers) the types can bring pain. Instead we should aim to speak the same language as other humans who work around us.  Never too clever, never too obscure, just abstraction in simple language which helps form immediate context.

At the end of the day, anything could be used to build beautiful abstractions, but why not use a <a href="https://www.npmjs.com/package/signet" rel="noopener" target="_blank">tool that helps you fall into the pit of success</a>?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1226</wp:post_id>
		<wp:post_date><![CDATA[2017-12-29 10:22:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-29 18:22:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-programmer-joy-with-type-enforcement]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="types"><![CDATA[Types]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551610477;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1133;}i:1;a:1:{s:2:"id";i:1091;}i:2;a:1:{s:2:"id";i:1119;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Coder Joy - Exploring Joyfulness In Creating Software</title>
		<link>http://www.chrisstead.net/archives/1231/coder-joy-exploring-joyfulness-in-creating-software/</link>
		<pubDate>Mon, 26 Feb 2018 17:00:45 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1231</guid>
		<description></description>
		<content:encoded><![CDATA[A couple weeks ago, I attended <a href="http://www.chrisstead.com/archives/1/hello-world/">Agile Open Northwest</a>. As with every other Agile Open conference I attend there were plenty of eye-opening experiences. One experience which surprised me was actually a session I facilitated. I went in with a concept of where it would land and I was dead, flat wrong.

I anticipated my session about creating joy for coders would be small and filled primarily with technical folk who wanted to figure out how they could make their experience incrementally better while they worked daily at their company. Instead I had a large crowd of people who performed a variety of duties at their company and they all wanted to get a perspective on how to make things more joyful. This, in itself, brought me a ton of joy.
<h3>The Inspiration</h3>
Before I dive into the experiment I ran, I want to share a little background on how I arrived at the idea that there could be joy while coding. I know a lot of developers get a fair amount of joy out of creating something new. That first line of code in a fresh project can create a near euphoric experience for some developers. Later, as the code base ages, it can seem as though the joy has drained completely from the project and all that is left is drudgery and obligation to keep this project on life support.

I felt this very same thing with <a href="https://github.com/cmstead/js-refactor" target="_blank" rel="noopener">one of my own open source projects</a>. I was shocked at the very notion I had started developing something which I very much wanted, only to find myself a couple years later feeling totally defeated every time I opened my editor to do a little bug fixing.

I decided I would make one last effort to combat this emotional sinkhole which used to be an exciting project for me. I went to work capturing information at the edges of my code, clarifying language which was used throughout and, ultimately, reformulating the domain language I would use to describe what I was doing. After some time and a little digital sweat, the project came back to life!

I realized I was actually more excited about my project NOW than I had been when I even started writing it in the first place. I actually was experiencing that same joy I used to experience when starting something afresh. Once I found this new dharma in code, I felt it only made sense I try to share it with my team at work. They loved the notion of joyfulness.
<h3>An Experiment In Joy</h3>
Having found this new, lasting sense of joy, I wanted to share it with the agile community. I didn't have a deep plan, carefully constructed with layers of meaning and a precise process with which I could lead people to the promised land. I was just hoping someone would show up and be willing to share. With that in mind, <strong>here's what my basic plan was</strong>:
<ol>
 	<li>Drain the wound</li>
 	<li>Make a Joy Wishlist</li>
 	<li>Pave the Path</li>
 	<li>Take Joy Back to the Team</li>
</ol>
I hoped this would be enough to get people talking about joy, what it meant and how they could claim it in their team. It seemed to pay out. Just having a list of pithy step names isn't really enough to make sense of how to run this experiment in another environment, however. Let's have a look at each step and what it means.
<h3>Running the experiment</h3>
Before starting the experiment, the facilitator must come in with certain assumptions and be willing to defuse any emotional outbursts that might begin to arise. It's important to note that defusing is not simply squashing someones feelings, but accepting they have a feeling and help to reframe what might lead to how they are feeling this way.

In severe cases, the feelings that arise while experimenting might actually warrant deeper exploration before continue digging into building joy within your team. These explorations are okay, and should be welcomed since they will help people to start understanding where others on the team are coming from.
<h4>Drain The Wound</h4>
If we consider how medicine works, if someone is sick because they have a wound which has become infected, the first step to regaining health is to drain the wound in order to get the toxins out of the body. In much the same way, we will never become healthy as a team if we don't drain the wounds which have accumulated throughout our lifetimes.

The exercise of draining the wound is simple: give people post-its, pens and a place to put everything and have them write down every last negative thing they feel about their work, the process or anything else that has them struggling with emotion coming into the experiment. It is important to discourage using names or pointing fingers since this simply spreads toxins around. We want to capture the toxic feelings and quarantine them.

The most important thing after performing this draining is to take all of the collected post-its and place it somewhere people can see it. Make sure to note: we are not ignoring the pain, we all know it is here and it has been exposed.

This is important.

If something new bubbles up during the course of the experiment, people should be welcomed to continue adding to the quarantine. It's not off-limits to update, we are just setting all of the infection in a place where it can't hurt us.

Sometimes wounds need more than one draining. Don't be afraid of coming back around and doing this multiple times. Always be vigilant and identify new wounds that may be growing. Emotions can be fragile and wounds can be inflicted over time. We're human, after all.
<h4>Make a Joy Wishlist</h4>
Everyone has things they wish they had. More time off, more support, faster builds, cleaner code, better communication, etc. Encourage people to simply write these things down. As a facilitator, you can also log ideas as people generate them. The important thing is to avoid filtering. The goal is to identify all the things which would make people happy regardless of how big, small or outlandish they are.

One important item here is, don't log/allow anything that says stuff like "Bob needs to deliver stuff on time" or "make code suck less." These kinds of negative statements are not things to aim for. Instead encourage people to think about what it means for code to suck less. Perhaps what Bob needs to deliver faster is support, so try to capture something like "help Bob when he feels overloaded."
<h4>Pave the Path</h4>
Once people have come to a natural close on what their joy might look like, it's time to start looking for ways to take action. It's not particularly useful to identify things which could be joyful if they are little more than simply a dream never to be realized. Aim to start paving a path people can walk to approach the things which help them feel greater joy.

Once again, our goal is to seek positive actions, which means we want to limit the kind of negativity which might bubble up. The negativity is likely rooted in the toxins we purged at the beginning, so help people to reframe into something positive.

In the session at Agile Open, someone mentioned they believed developers are lazy. Instead of dwelling on it or letting it become a toxin in the middle of our joy seeking, I tried to encourage them to understand the developers and their position, while also pointing out these same developers might not understand that person's position either. From here, we can see joy might take the form of more open, honest communication. Once we understand the tension, we can seek a problem and pose solutions.
<h4>Take Joy Back to the Team</h4>
To close the session, I encouraged people to think about ways they could take the message of joy, and what we discovered during our exploration, back to their respective teams. The goal here was not to be prescriptive. Instead each team needs to find their own joy and way to walk the path.throw them out

Within your own team there are several directions you can go from here; any of the following would be reasonable to try out:
<ul>
 	<li>Dot vote on a point of joy to focus on and develop a path toward joy</li>
 	<li>Pick an action at random, try it for a week and reflect on whether things were better or worse</li>
 	<li>Leave each person with the idea that they must travel their own path to find joy and simply leave a single rule: one person's path cannot stomp on another's</li>
 	<li>Devise your own brilliant plan on how to start moving toward joyful coding given what you've found</li>
</ul>
The most important part of this last bit is to ensure people feel empowered to drive toward joy on their own and together. It is up to the team to support each other and elevate the environment they are in.
<h4>Closing, Joy and My Approach</h4>
I will say, there is a fair amount of time I spend seeking joy on my own. I typically mix a bunch of different ingredients including music, time for recharge, time to vent, and poking the system until it moves in a way that feels better to me.

It's really hard to say what might bring joy in a team or even for an individual, but I find joy often comes to me as clear communication -- both in code and person to person, as a sense of directed purpose, as automation, and as opportunity to share, with others, the things which make my life a little better.

Perhaps you'll find your team values some of these things as well. In all likelihood, your team will value things I wouldn't have thought to include in this post; this too is completely acceptable. Unfortunately seeking joy is not a clear path with a process to force it to emerge. Joy is a lot like love, you just know it when you feel it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1231</wp:post_id>
		<wp:post_date><![CDATA[2018-02-26 09:00:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-26 17:00:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[coder-joy-exploring-joyfulness-in-creating-software]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551682487;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1226;}i:1;a:1:{s:2:"id";i:1091;}i:2;a:1:{s:2:"id";i:611;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascript: Require and Import Found Harmful</title>
		<link>http://www.chrisstead.net/archives/1238/javascript-require-and-import-found-harmful/</link>
		<pubDate>Thu, 05 Apr 2018 20:12:01 +0000</pubDate>
		<dc:creator><![CDATA[chris]]></dc:creator>
		<guid isPermaLink="false">http://www.chrisstead.com/?p=1238</guid>
		<description></description>
		<content:encoded><![CDATA[For the moment, let's go ahead and make an assumption: automated tests (unit tests, integration tests, etc.) <a href="http://www.chrisstead.com/archives/1/hello-world/">make code safer</a> to write, update and change. Even if tests break, it says something about how the code was written and pulled together while running. I will address this concern in another post at a later date. Nevertheless, I am going to rely on this assumption throughout this post, so if you disagree with the initial assumption, you might be better served to drop out now.

Now that the grumpy anti-testers are gone, let's talk, just you and I.

I don't actually believe that require or import -- from the freshly minted ES module system -- are inherently bad; somewhere, someone needs to be in charge of loading stuff from the filesystem, after all. Nevertheless require and import tie us directly to the filesystem which makes our code brittle and tightly coupled. This coupling makes all of the following things harder to accomplish:
<ul>
 	<li>Module Isolation</li>
 	<li>Extracting Dependencies</li>
 	<li>Moving Files</li>
 	<li>Testing</li>
 	<li>Creating Test Doubles</li>
 	<li>General Project Refactoring</li>
</ul>
<h3>The Setup</h3>
Let's take a look at an example which will probably make things clearer:

<script src="https://gist.github.com/cmstead/4873522004fceae5d1d0f1be3a974d36.js"></script>

To get a sense of what we have to do to isolate this code, let's talk about a very popular library for introducing test doubles into Node tests: <a href="https://www.npmjs.com/package/mockery" target="_blank">Mockery</a>. This package manipulates the node cache, inserting a module into the runtime to break dependencies for a module. Particularly worrisome is the fact that you must copy the path for your module dependencies into your test, tightening the noose and deeply seating this dependence on the actual filesystem.

When we try to test this, we either have to use Mockery to jam fakes into the node module cache or we actually have to interact directly with the external systems: the filesystem, and the external logging system. I would lean -- and have leaned -- toward using Mockery, but it leads us down another dangerous road: what happens if the dependencies change location? Now we are interacting with the live system whether we want to or not.

This actually happened on a project I was on. At one point all of our tests were real unit tests: i.e. they tested only the local unit we cared about, but something moved, a module changed and all of a sudden we were interacting with real databases and cloud services. Our tests slowed to a crawl and we noticed unexpected spikes on systems which should have been relatively low-load.

Mind you, this is not an indictment of test tooling. Mockery is great at what it does. Instead, the tool highlights the pitfalls built into the system. I offer an alternative question: is there a better tool we could build which breaks the localized dependence on the filesystem altogether?

It's worthwhile to consider a couple design patterns which could lead us away from the filesystem and toward something which could fully decouple our code: <a href="https://stackoverflow.com/questions/3058/what-is-inversion-of-control" target="_blank">Inversion of Control</a> (of <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank" rel="noopener">SOLID</a> fame) and the <a href="https://stackoverflow.com/questions/69849/factory-pattern-when-to-use-factory-methods" target="_blank" rel="noopener">Factory pattern</a>.

<h3>Breaking it Down</h3>

To get a sense of how the factory pattern helps us, let's isolate our modules and see what it looks like when we break all the pieces up.

<script src="https://gist.github.com/cmstead/4db01275adfefa8ee082d5305c10c972.js"></script>

With this refactoring, some really nice things happen: our abstractions are cleaner, our code becomes more declarative, and all of the explicit module references simply disappear. When modules no longer need to be concerned with the filesystem, everything becomes much freer regarding moving files around and decoupling concerns. Of course, it's unclear who is actually in charge of loading the files into memory...

Whether it be in your tests or in your production code, the ideal solution would be some sort of filesystem aware module which knows what name is associated with which module. The classic name for something like this is either a Dependency Injection (DI) system or an Inversion of Control (IoC) container.

My team has been using <a href="https://www.npmjs.com/package/dject" target="_blank" rel="noopener">the Dject library</a> to manage our dependencies. Dject abstracts away all of the filesystem concerns which allows us to write code exactly how we have it above. Here's what the configuration would look like:

<script src="https://gist.github.com/cmstead/be27f8f61e5e2773e7a17fad97cdb656.js"></script>

<h3>Module Loading With Our Container</h3>

Now our main application file can load dependencies with a container and everything can be loosely referenced by name alone. If we only use our main module for loading core application modules, it allows us to isolate our entire application module structure!

<script src="https://gist.github.com/cmstead/a98472fdebd6e4fa5e691e1ebf7d7e9b.js"></script>
<h3>Containers, Tests and A Better Life</h3>
Let's have a look at what a test might look like using the same application modules. A few things will jump out. First, faking system modules becomes a trivial affair. Since everything is declared by name, we don't have to worry about the module cache. In the same vein, any of our application internals are also easy to fake. Since we don't have to worry about file paths and file-relative references, simply reorganizing our files doesn't impact our tests which continue to be valid and useful. Lastly, our module entry point location is also managed externally, so we don't have to run around updating tests if the module under test moves. Who really wants to test whether the node file module loading system works in their application tests?

<script src="https://gist.github.com/cmstead/205b5b731426fc664687c92835c614ec.js"></script>
<h3>Wrapping it All Up</h3>
With all of the overhead around filesystem management removed, it becomes much easier to think about what our code is doing in isolation. This means our application is far easier to manage and our tests are easier to write and maintain. Now, isn't that really what we all want in the end?

For examples of full applications written using DI/IoC and Dject in specific, I encourage you to check out the code for <a href="https://github.com/cmstead/js-refactor" target="_blank" rel="noopener">JS Refactor</a> (the application that birthed Dject in the first place) and <a href="https://github.com/cmstead/stubcontractor" target="_blank" rel="noopener">Stubcontractor</a> (a test helper for automatically generating fakes).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1238</wp:post_id>
		<wp:post_date><![CDATA[2018-04-05 12:12:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-05 20:12:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-require-and-import-found-harmful]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-smells"><![CDATA[Code Smells]]></category>
		<category domain="category" nicename="design-patterns"><![CDATA[Design Patterns]]></category>
		<category domain="category" nicename="general-blogging"><![CDATA[General Blogging]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[@cm_stead]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_su_rich_snippet_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1551603144;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1128;}i:1;a:1:{s:2:"id";i:1082;}i:2;a:1:{s:2:"id";i:1217;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603689]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_12603684]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_skip_11996274]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
